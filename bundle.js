require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated from Amm.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002\u001e\u00d3\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\te\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0007",
    "\u000bm\n\u000b\f\u000b\u000e\u000bp\u000b\u000b\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010",
    "\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u008f\n\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u0094\n\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0005\u0019\u0099\n\u0019\u0003\u001a\u0006\u001a\u009c",
    "\n\u001a\r\u001a\u000e\u001a\u009d\u0003\u001b\u0003\u001b\u0007\u001b",
    "\u00a2\n\u001b\f\u001b\u000e\u001b\u00a5\u000b\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0007\u001b\u00aa\n\u001b\f\u001b\u000e\u001b\u00ad",
    "\u000b\u001b\u0003\u001b\u0005\u001b\u00b0\n\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0006\u001c\u00b6\n\u001c\r\u001c\u000e",
    "\u001c\u00b7\u0003\u001c\u0006\u001c\u00bb\n\u001c\r\u001c\u000e\u001c",
    "\u00bc\u0003\u001c\u0003\u001c\u0006\u001c\u00c1\n\u001c\r\u001c\u000e",
    "\u001c\u00c2\u0005\u001c\u00c5\n\u001c\u0005\u001c\u00c7\n\u001c\u0003",
    "\u001d\u0006\u001d\u00ca\n\u001d\r\u001d\u000e\u001d\u00cb\u0003\u001d",
    "\u0007\u001d\u00cf\n\u001d\f\u001d\u000e\u001d\u00d2\u000b\u001d\u0002",
    "\u0002\u001e\u0003\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007",
    "\r\b\u000f\t\u0011\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e\u001b\u000f",
    "\u001d\u0010\u001f\u0011!\u0012#\u0013%\u0014\'\u0015)\u0016+\u0017",
    "-\u0018/\u00191\u001a3\u001b5\u001c7\u001d9\u001e\u0003\u0002\u000b",
    "\u0004\u0002\f\f\u000f\u000f\u0004\u0002\u000b\u000b\"\"\u0003\u0002",
    "$$\u0003\u0002))\u0005\u00022;CHch\u0003\u00022;\u0003\u000200\u0005",
    "\u0002C\\aac|\u0006\u00022;C\\aac|\u0002\u00e4\u0002\u0003\u0003\u0002",
    "\u0002\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002",
    "\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002",
    "\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002",
    "\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002",
    "\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002",
    "\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002",
    "\u0002\u0002\u0002\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002",
    "\u0002\u0002\u0002!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002",
    "\u0002\u0002%\u0003\u0002\u0002\u0002\u0002\'\u0003\u0002\u0002\u0002",
    "\u0002)\u0003\u0002\u0002\u0002\u0002+\u0003\u0002\u0002\u0002\u0002",
    "-\u0003\u0002\u0002\u0002\u0002/\u0003\u0002\u0002\u0002\u00021\u0003",
    "\u0002\u0002\u0002\u00023\u0003\u0002\u0002\u0002\u00025\u0003\u0002",
    "\u0002\u0002\u00027\u0003\u0002\u0002\u0002\u00029\u0003\u0002\u0002",
    "\u0002\u0003;\u0003\u0002\u0002\u0002\u0005@\u0003\u0002\u0002\u0002",
    "\u0007C\u0003\u0002\u0002\u0002\tI\u0003\u0002\u0002\u0002\u000bL\u0003",
    "\u0002\u0002\u0002\rR\u0003\u0002\u0002\u0002\u000fV\u0003\u0002\u0002",
    "\u0002\u0011d\u0003\u0002\u0002\u0002\u0013f\u0003\u0002\u0002\u0002",
    "\u0015j\u0003\u0002\u0002\u0002\u0017q\u0003\u0002\u0002\u0002\u0019",
    "s\u0003\u0002\u0002\u0002\u001bu\u0003\u0002\u0002\u0002\u001dw\u0003",
    "\u0002\u0002\u0002\u001fy\u0003\u0002\u0002\u0002!{\u0003\u0002\u0002",
    "\u0002#}\u0003\u0002\u0002\u0002%\u007f\u0003\u0002\u0002\u0002\'\u0081",
    "\u0003\u0002\u0002\u0002)\u0083\u0003\u0002\u0002\u0002+\u0085\u0003",
    "\u0002\u0002\u0002-\u0087\u0003\u0002\u0002\u0002/\u008e\u0003\u0002",
    "\u0002\u00021\u0098\u0003\u0002\u0002\u00023\u009b\u0003\u0002\u0002",
    "\u00025\u00af\u0003\u0002\u0002\u00027\u00c6\u0003\u0002\u0002\u0002",
    "9\u00c9\u0003\u0002\u0002\u0002;<\u0007v\u0002\u0002<=\u0007{\u0002",
    "\u0002=>\u0007r\u0002\u0002>?\u0007g\u0002\u0002?\u0004\u0003\u0002",
    "\u0002\u0002@A\u0007h\u0002\u0002AB\u0007p\u0002\u0002B\u0006\u0003",
    "\u0002\u0002\u0002CD\u0007g\u0002\u0002DE\u0007x\u0002\u0002EF\u0007",
    "g\u0002\u0002FG\u0007p\u0002\u0002GH\u0007v\u0002\u0002H\b\u0003\u0002",
    "\u0002\u0002IJ\u0007q\u0002\u0002JK\u0007p\u0002\u0002K\n\u0003\u0002",
    "\u0002\u0002LM\u0007e\u0002\u0002MN\u0007q\u0002\u0002NO\u0007p\u0002",
    "\u0002OP\u0007u\u0002\u0002PQ\u0007v\u0002\u0002Q\f\u0003\u0002\u0002",
    "\u0002RS\u0007n\u0002\u0002ST\u0007g\u0002\u0002TU\u0007v\u0002\u0002",
    "U\u000e\u0003\u0002\u0002\u0002VW\u0007g\u0002\u0002WX\u0007o\u0002",
    "\u0002XY\u0007k\u0002\u0002YZ\u0007v\u0002\u0002Z\u0010\u0003\u0002",
    "\u0002\u0002[\\\u0007v\u0002\u0002\\]\u0007t\u0002\u0002]^\u0007w\u0002",
    "\u0002^e\u0007g\u0002\u0002_`\u0007h\u0002\u0002`a\u0007c\u0002\u0002",
    "ab\u0007n\u0002\u0002bc\u0007u\u0002\u0002ce\u0007g\u0002\u0002d[\u0003",
    "\u0002\u0002\u0002d_\u0003\u0002\u0002\u0002e\u0012\u0003\u0002\u0002",
    "\u0002fg\u0007p\u0002\u0002gh\u0007g\u0002\u0002hi\u0007y\u0002\u0002",
    "i\u0014\u0003\u0002\u0002\u0002jn\u0007.\u0002\u0002km\u00053\u001a",
    "\u0002lk\u0003\u0002\u0002\u0002mp\u0003\u0002\u0002\u0002nl\u0003\u0002",
    "\u0002\u0002no\u0003\u0002\u0002\u0002o\u0016\u0003\u0002\u0002\u0002",
    "pn\u0003\u0002\u0002\u0002qr\u0007}\u0002\u0002r\u0018\u0003\u0002\u0002",
    "\u0002st\u0007\u007f\u0002\u0002t\u001a\u0003\u0002\u0002\u0002uv\u0007",
    "*\u0002\u0002v\u001c\u0003\u0002\u0002\u0002wx\u0007+\u0002\u0002x\u001e",
    "\u0003\u0002\u0002\u0002yz\u0007>\u0002\u0002z \u0003\u0002\u0002\u0002",
    "{|\u0007@\u0002\u0002|\"\u0003\u0002\u0002\u0002}~\u0007]\u0002\u0002",
    "~$\u0003\u0002\u0002\u0002\u007f\u0080\u0007_\u0002\u0002\u0080&\u0003",
    "\u0002\u0002\u0002\u0081\u0082\u00070\u0002\u0002\u0082(\u0003\u0002",
    "\u0002\u0002\u0083\u0084\u0007?\u0002\u0002\u0084*\u0003\u0002\u0002",
    "\u0002\u0085\u0086\u0007~\u0002\u0002\u0086,\u0003\u0002\u0002\u0002",
    "\u0087\u0088\u0007x\u0002\u0002\u0088\u0089\u0007q\u0002\u0002\u0089",
    "\u008a\u0007k\u0002\u0002\u008a\u008b\u0007f\u0002\u0002\u008b.\u0003",
    "\u0002\u0002\u0002\u008c\u008f\u00053\u001a\u0002\u008d\u008f\u0005",
    "1\u0019\u0002\u008e\u008c\u0003\u0002\u0002\u0002\u008e\u008d\u0003",
    "\u0002\u0002\u0002\u008e\u008f\u0003\u0002\u0002\u0002\u008f\u0090\u0003",
    "\u0002\u0002\u0002\u0090\u0093\u0007<\u0002\u0002\u0091\u0094\u0005",
    "3\u001a\u0002\u0092\u0094\u00051\u0019\u0002\u0093\u0091\u0003\u0002",
    "\u0002\u0002\u0093\u0092\u0003\u0002\u0002\u0002\u0093\u0094\u0003\u0002",
    "\u0002\u0002\u00940\u0003\u0002\u0002\u0002\u0095\u0099\t\u0002\u0002",
    "\u0002\u0096\u0097\u0007\u000f\u0002\u0002\u0097\u0099\u0007\f\u0002",
    "\u0002\u0098\u0095\u0003\u0002\u0002\u0002\u0098\u0096\u0003\u0002\u0002",
    "\u0002\u00992\u0003\u0002\u0002\u0002\u009a\u009c\t\u0003\u0002\u0002",
    "\u009b\u009a\u0003\u0002\u0002\u0002\u009c\u009d\u0003\u0002\u0002\u0002",
    "\u009d\u009b\u0003\u0002\u0002\u0002\u009d\u009e\u0003\u0002\u0002\u0002",
    "\u009e4\u0003\u0002\u0002\u0002\u009f\u00a3\u0007$\u0002\u0002\u00a0",
    "\u00a2\n\u0004\u0002\u0002\u00a1\u00a0\u0003\u0002\u0002\u0002\u00a2",
    "\u00a5\u0003\u0002\u0002\u0002\u00a3\u00a1\u0003\u0002\u0002\u0002\u00a3",
    "\u00a4\u0003\u0002\u0002\u0002\u00a4\u00a6\u0003\u0002\u0002\u0002\u00a5",
    "\u00a3\u0003\u0002\u0002\u0002\u00a6\u00b0\u0007$\u0002\u0002\u00a7",
    "\u00ab\u0007)\u0002\u0002\u00a8\u00aa\n\u0005\u0002\u0002\u00a9\u00a8",
    "\u0003\u0002\u0002\u0002\u00aa\u00ad\u0003\u0002\u0002\u0002\u00ab\u00a9",
    "\u0003\u0002\u0002\u0002\u00ab\u00ac\u0003\u0002\u0002\u0002\u00ac\u00ae",
    "\u0003\u0002\u0002\u0002\u00ad\u00ab\u0003\u0002\u0002\u0002\u00ae\u00b0",
    "\u0007)\u0002\u0002\u00af\u009f\u0003\u0002\u0002\u0002\u00af\u00a7",
    "\u0003\u0002\u0002\u0002\u00b06\u0003\u0002\u0002\u0002\u00b1\u00b2",
    "\u00072\u0002\u0002\u00b2\u00b3\u0007z\u0002\u0002\u00b3\u00b5\u0003",
    "\u0002\u0002\u0002\u00b4\u00b6\t\u0006\u0002\u0002\u00b5\u00b4\u0003",
    "\u0002\u0002\u0002\u00b6\u00b7\u0003\u0002\u0002\u0002\u00b7\u00b5\u0003",
    "\u0002\u0002\u0002\u00b7\u00b8\u0003\u0002\u0002\u0002\u00b8\u00c7\u0003",
    "\u0002\u0002\u0002\u00b9\u00bb\t\u0007\u0002\u0002\u00ba\u00b9\u0003",
    "\u0002\u0002\u0002\u00bb\u00bc\u0003\u0002\u0002\u0002\u00bc\u00ba\u0003",
    "\u0002\u0002\u0002\u00bc\u00bd\u0003\u0002\u0002\u0002\u00bd\u00c4\u0003",
    "\u0002\u0002\u0002\u00be\u00c0\t\b\u0002\u0002\u00bf\u00c1\t\u0007\u0002",
    "\u0002\u00c0\u00bf\u0003\u0002\u0002\u0002\u00c1\u00c2\u0003\u0002\u0002",
    "\u0002\u00c2\u00c0\u0003\u0002\u0002\u0002\u00c2\u00c3\u0003\u0002\u0002",
    "\u0002\u00c3\u00c5\u0003\u0002\u0002\u0002\u00c4\u00be\u0003\u0002\u0002",
    "\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002\u00c5\u00c7\u0003\u0002\u0002",
    "\u0002\u00c6\u00b1\u0003\u0002\u0002\u0002\u00c6\u00ba\u0003\u0002\u0002",
    "\u0002\u00c78\u0003\u0002\u0002\u0002\u00c8\u00ca\t\t\u0002\u0002\u00c9",
    "\u00c8\u0003\u0002\u0002\u0002\u00ca\u00cb\u0003\u0002\u0002\u0002\u00cb",
    "\u00c9\u0003\u0002\u0002\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002\u00cc",
    "\u00d0\u0003\u0002\u0002\u0002\u00cd\u00cf\t\n\u0002\u0002\u00ce\u00cd",
    "\u0003\u0002\u0002\u0002\u00cf\u00d2\u0003\u0002\u0002\u0002\u00d0\u00ce",
    "\u0003\u0002\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1:",
    "\u0003\u0002\u0002\u0002\u00d2\u00d0\u0003\u0002\u0002\u0002\u0013\u0002",
    "dn\u008e\u0093\u0098\u009d\u00a3\u00ab\u00af\u00b7\u00bc\u00c2\u00c4",
    "\u00c6\u00cb\u00d0\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function AmmLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

AmmLexer.prototype = Object.create(antlr4.Lexer.prototype);
AmmLexer.prototype.constructor = AmmLexer;

Object.defineProperty(AmmLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

AmmLexer.EOF = antlr4.Token.EOF;
AmmLexer.TYPE = 1;
AmmLexer.FN = 2;
AmmLexer.EVENT = 3;
AmmLexer.ON = 4;
AmmLexer.CONST = 5;
AmmLexer.LET = 6;
AmmLexer.EMIT = 7;
AmmLexer.BOOLCONSTANT = 8;
AmmLexer.NEW = 9;
AmmLexer.SEP = 10;
AmmLexer.OPENBODY = 11;
AmmLexer.CLOSEBODY = 12;
AmmLexer.OPENARGS = 13;
AmmLexer.CLOSEARGS = 14;
AmmLexer.OPENGENERIC = 15;
AmmLexer.CLOSEGENERIC = 16;
AmmLexer.OPENARRAY = 17;
AmmLexer.CLOSEARRAY = 18;
AmmLexer.METHODSEP = 19;
AmmLexer.EQUALS = 20;
AmmLexer.OR = 21;
AmmLexer.VOID = 22;
AmmLexer.TYPESEP = 23;
AmmLexer.NEWLINE = 24;
AmmLexer.WS = 25;
AmmLexer.STRINGCONSTANT = 26;
AmmLexer.NUMBERCONSTANT = 27;
AmmLexer.VARNAME = 28;

AmmLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

AmmLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

AmmLexer.prototype.literalNames = [ null, "'type'", "'fn'", "'event'", "'on'", 
                                    "'const'", "'let'", "'emit'", null, 
                                    "'new'", null, "'{'", "'}'", "'('", 
                                    "')'", "'<'", "'>'", "'['", "']'", "'.'", 
                                    "'='", "'|'", "'void'" ];

AmmLexer.prototype.symbolicNames = [ null, "TYPE", "FN", "EVENT", "ON", 
                                     "CONST", "LET", "EMIT", "BOOLCONSTANT", 
                                     "NEW", "SEP", "OPENBODY", "CLOSEBODY", 
                                     "OPENARGS", "CLOSEARGS", "OPENGENERIC", 
                                     "CLOSEGENERIC", "OPENARRAY", "CLOSEARRAY", 
                                     "METHODSEP", "EQUALS", "OR", "VOID", 
                                     "TYPESEP", "NEWLINE", "WS", "STRINGCONSTANT", 
                                     "NUMBERCONSTANT", "VARNAME" ];

AmmLexer.prototype.ruleNames = [ "TYPE", "FN", "EVENT", "ON", "CONST", "LET", 
                                 "EMIT", "BOOLCONSTANT", "NEW", "SEP", "OPENBODY", 
                                 "CLOSEBODY", "OPENARGS", "CLOSEARGS", "OPENGENERIC", 
                                 "CLOSEGENERIC", "OPENARRAY", "CLOSEARRAY", 
                                 "METHODSEP", "EQUALS", "OR", "VOID", "TYPESEP", 
                                 "NEWLINE", "WS", "STRINGCONSTANT", "NUMBERCONSTANT", 
                                 "VARNAME" ];

AmmLexer.prototype.grammarFileName = "Amm.g4";



exports.AmmLexer = AmmLexer;


},{"antlr4/index":76}],2:[function(require,module,exports){
// Generated from Amm.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');

// This class defines a complete listener for a parse tree produced by AmmParser.
function AmmListener() {
	antlr4.tree.ParseTreeListener.call(this);
	return this;
}

AmmListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
AmmListener.prototype.constructor = AmmListener;

// Enter a parse tree produced by AmmParser#module.
AmmListener.prototype.enterModule = function(ctx) {
};

// Exit a parse tree produced by AmmParser#module.
AmmListener.prototype.exitModule = function(ctx) {
};


// Enter a parse tree produced by AmmParser#blank.
AmmListener.prototype.enterBlank = function(ctx) {
};

// Exit a parse tree produced by AmmParser#blank.
AmmListener.prototype.exitBlank = function(ctx) {
};


// Enter a parse tree produced by AmmParser#types.
AmmListener.prototype.enterTypes = function(ctx) {
};

// Exit a parse tree produced by AmmParser#types.
AmmListener.prototype.exitTypes = function(ctx) {
};


// Enter a parse tree produced by AmmParser#othertype.
AmmListener.prototype.enterOthertype = function(ctx) {
};

// Exit a parse tree produced by AmmParser#othertype.
AmmListener.prototype.exitOthertype = function(ctx) {
};


// Enter a parse tree produced by AmmParser#typename.
AmmListener.prototype.enterTypename = function(ctx) {
};

// Exit a parse tree produced by AmmParser#typename.
AmmListener.prototype.exitTypename = function(ctx) {
};


// Enter a parse tree produced by AmmParser#typegenerics.
AmmListener.prototype.enterTypegenerics = function(ctx) {
};

// Exit a parse tree produced by AmmParser#typegenerics.
AmmListener.prototype.exitTypegenerics = function(ctx) {
};


// Enter a parse tree produced by AmmParser#fulltypename.
AmmListener.prototype.enterFulltypename = function(ctx) {
};

// Exit a parse tree produced by AmmParser#fulltypename.
AmmListener.prototype.exitFulltypename = function(ctx) {
};


// Enter a parse tree produced by AmmParser#typebody.
AmmListener.prototype.enterTypebody = function(ctx) {
};

// Exit a parse tree produced by AmmParser#typebody.
AmmListener.prototype.exitTypebody = function(ctx) {
};


// Enter a parse tree produced by AmmParser#typeline.
AmmListener.prototype.enterTypeline = function(ctx) {
};

// Exit a parse tree produced by AmmParser#typeline.
AmmListener.prototype.exitTypeline = function(ctx) {
};


// Enter a parse tree produced by AmmParser#functions.
AmmListener.prototype.enterFunctions = function(ctx) {
};

// Exit a parse tree produced by AmmParser#functions.
AmmListener.prototype.exitFunctions = function(ctx) {
};


// Enter a parse tree produced by AmmParser#functionbody.
AmmListener.prototype.enterFunctionbody = function(ctx) {
};

// Exit a parse tree produced by AmmParser#functionbody.
AmmListener.prototype.exitFunctionbody = function(ctx) {
};


// Enter a parse tree produced by AmmParser#statements.
AmmListener.prototype.enterStatements = function(ctx) {
};

// Exit a parse tree produced by AmmParser#statements.
AmmListener.prototype.exitStatements = function(ctx) {
};


// Enter a parse tree produced by AmmParser#declarations.
AmmListener.prototype.enterDeclarations = function(ctx) {
};

// Exit a parse tree produced by AmmParser#declarations.
AmmListener.prototype.exitDeclarations = function(ctx) {
};


// Enter a parse tree produced by AmmParser#decname.
AmmListener.prototype.enterDecname = function(ctx) {
};

// Exit a parse tree produced by AmmParser#decname.
AmmListener.prototype.exitDecname = function(ctx) {
};


// Enter a parse tree produced by AmmParser#constdeclaration.
AmmListener.prototype.enterConstdeclaration = function(ctx) {
};

// Exit a parse tree produced by AmmParser#constdeclaration.
AmmListener.prototype.exitConstdeclaration = function(ctx) {
};


// Enter a parse tree produced by AmmParser#letdeclaration.
AmmListener.prototype.enterLetdeclaration = function(ctx) {
};

// Exit a parse tree produced by AmmParser#letdeclaration.
AmmListener.prototype.exitLetdeclaration = function(ctx) {
};


// Enter a parse tree produced by AmmParser#assignments.
AmmListener.prototype.enterAssignments = function(ctx) {
};

// Exit a parse tree produced by AmmParser#assignments.
AmmListener.prototype.exitAssignments = function(ctx) {
};


// Enter a parse tree produced by AmmParser#assignables.
AmmListener.prototype.enterAssignables = function(ctx) {
};

// Exit a parse tree produced by AmmParser#assignables.
AmmListener.prototype.exitAssignables = function(ctx) {
};


// Enter a parse tree produced by AmmParser#objectliterals.
AmmListener.prototype.enterObjectliterals = function(ctx) {
};

// Exit a parse tree produced by AmmParser#objectliterals.
AmmListener.prototype.exitObjectliterals = function(ctx) {
};


// Enter a parse tree produced by AmmParser#arrayliteral.
AmmListener.prototype.enterArrayliteral = function(ctx) {
};

// Exit a parse tree produced by AmmParser#arrayliteral.
AmmListener.prototype.exitArrayliteral = function(ctx) {
};


// Enter a parse tree produced by AmmParser#typeliteral.
AmmListener.prototype.enterTypeliteral = function(ctx) {
};

// Exit a parse tree produced by AmmParser#typeliteral.
AmmListener.prototype.exitTypeliteral = function(ctx) {
};


// Enter a parse tree produced by AmmParser#mapliteral.
AmmListener.prototype.enterMapliteral = function(ctx) {
};

// Exit a parse tree produced by AmmParser#mapliteral.
AmmListener.prototype.exitMapliteral = function(ctx) {
};


// Enter a parse tree produced by AmmParser#mapline.
AmmListener.prototype.enterMapline = function(ctx) {
};

// Exit a parse tree produced by AmmParser#mapline.
AmmListener.prototype.exitMapline = function(ctx) {
};


// Enter a parse tree produced by AmmParser#assignablelist.
AmmListener.prototype.enterAssignablelist = function(ctx) {
};

// Exit a parse tree produced by AmmParser#assignablelist.
AmmListener.prototype.exitAssignablelist = function(ctx) {
};


// Enter a parse tree produced by AmmParser#calllist.
AmmListener.prototype.enterCalllist = function(ctx) {
};

// Exit a parse tree produced by AmmParser#calllist.
AmmListener.prototype.exitCalllist = function(ctx) {
};


// Enter a parse tree produced by AmmParser#calls.
AmmListener.prototype.enterCalls = function(ctx) {
};

// Exit a parse tree produced by AmmParser#calls.
AmmListener.prototype.exitCalls = function(ctx) {
};


// Enter a parse tree produced by AmmParser#emits.
AmmListener.prototype.enterEmits = function(ctx) {
};

// Exit a parse tree produced by AmmParser#emits.
AmmListener.prototype.exitEmits = function(ctx) {
};


// Enter a parse tree produced by AmmParser#constants.
AmmListener.prototype.enterConstants = function(ctx) {
};

// Exit a parse tree produced by AmmParser#constants.
AmmListener.prototype.exitConstants = function(ctx) {
};


// Enter a parse tree produced by AmmParser#events.
AmmListener.prototype.enterEvents = function(ctx) {
};

// Exit a parse tree produced by AmmParser#events.
AmmListener.prototype.exitEvents = function(ctx) {
};


// Enter a parse tree produced by AmmParser#handlers.
AmmListener.prototype.enterHandlers = function(ctx) {
};

// Exit a parse tree produced by AmmParser#handlers.
AmmListener.prototype.exitHandlers = function(ctx) {
};



exports.AmmListener = AmmListener;
},{"antlr4/index":76}],3:[function(require,module,exports){
// Generated from Amm.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var AmmListener = require('./AmmListener').AmmListener;
var grammarFileName = "Amm.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u001e\u0275\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0003\u0002\u0007\u0002@\n\u0002\f\u0002\u000e",
    "\u0002C\u000b\u0002\u0003\u0002\u0003\u0002\u0006\u0002G\n\u0002\r\u0002",
    "\u000e\u0002H\u0007\u0002K\n\u0002\f\u0002\u000e\u0002N\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0006\u0002R\n\u0002\r\u0002\u000e\u0002S\u0007",
    "\u0002V\n\u0002\f\u0002\u000e\u0002Y\u000b\u0002\u0003\u0002\u0003\u0002",
    "\u0006\u0002]\n\u0002\r\u0002\u000e\u0002^\u0007\u0002a\n\u0002\f\u0002",
    "\u000e\u0002d\u000b\u0002\u0003\u0002\u0003\u0002\u0006\u0002h\n\u0002",
    "\r\u0002\u000e\u0002i\u0006\u0002l\n\u0002\r\u0002\u000e\u0002m\u0003",
    "\u0002\u0005\u0002q\n\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0006\u0004w\n\u0004\r\u0004\u000e\u0004x\u0003\u0004\u0003\u0004",
    "\u0007\u0004}\n\u0004\f\u0004\u000e\u0004\u0080\u000b\u0004\u0003\u0004",
    "\u0005\u0004\u0083\n\u0004\u0003\u0004\u0006\u0004\u0086\n\u0004\r\u0004",
    "\u000e\u0004\u0087\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u008d",
    "\n\u0004\f\u0004\u000e\u0004\u0090\u000b\u0004\u0003\u0004\u0003\u0004",
    "\u0007\u0004\u0094\n\u0004\f\u0004\u000e\u0004\u0097\u000b\u0004\u0003",
    "\u0004\u0003\u0004\u0007\u0004\u009b\n\u0004\f\u0004\u000e\u0004\u009e",
    "\u000b\u0004\u0003\u0004\u0007\u0004\u00a1\n\u0004\f\u0004\u000e\u0004",
    "\u00a4\u000b\u0004\u0005\u0004\u00a6\n\u0004\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u00aa\n\u0005\f\u0005\u000e\u0005\u00ad\u000b\u0005\u0003",
    "\u0005\u0005\u0005\u00b0\n\u0005\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0007\u0007\u00b6\n\u0007\f\u0007\u000e\u0007\u00b9\u000b",
    "\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00bd\n\u0007\f\u0007\u000e",
    "\u0007\u00c0\u000b\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00c4\n",
    "\u0007\f\u0007\u000e\u0007\u00c7\u000b\u0007\u0003\u0007\u0003\u0007",
    "\u0007\u0007\u00cb\n\u0007\f\u0007\u000e\u0007\u00ce\u000b\u0007\u0007",
    "\u0007\u00d0\n\u0007\f\u0007\u000e\u0007\u00d3\u000b\u0007\u0003\u0007",
    "\u0003\u0007\u0003\b\u0003\b\u0007\b\u00d9\n\b\f\b\u000e\b\u00dc\u000b",
    "\b\u0003\b\u0005\b\u00df\n\b\u0003\b\u0005\b\u00e2\n\b\u0003\t\u0003",
    "\t\u0007\t\u00e6\n\t\f\t\u000e\t\u00e9\u000b\t\u0003\t\u0007\t\u00ec",
    "\n\t\f\t\u000e\t\u00ef\u000b\t\u0003\t\u0006\t\u00f2\n\t\r\t\u000e\t",
    "\u00f3\u0003\t\u0005\t\u00f7\n\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0007\n\u00ff\n\n\f\n\u000e\n\u0102\u000b\n\u0003\u000b\u0003",
    "\u000b\u0006\u000b\u0106\n\u000b\r\u000b\u000e\u000b\u0107\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u010e\n\u000b\u0003",
    "\u000b\u0003\u000b\u0007\u000b\u0112\n\u000b\f\u000b\u000e\u000b\u0115",
    "\u000b\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0119\n\u000b\f\u000b",
    "\u000e\u000b\u011c\u000b\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0120",
    "\n\u000b\f\u000b\u000e\u000b\u0123\u000b\u000b\u0003\u000b\u0003\u000b",
    "\u0003\f\u0003\f\u0007\f\u0129\n\f\f\f\u000e\f\u012c\u000b\f\u0003\f",
    "\u0006\f\u012f\n\f\r\f\u000e\f\u0130\u0003\f\u0007\f\u0134\n\f\f\f\u000e",
    "\f\u0137\u000b\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0005",
    "\r\u013f\n\r\u0003\r\u0006\r\u0142\n\r\r\r\u000e\r\u0143\u0003\u000e",
    "\u0003\u000e\u0005\u000e\u0148\n\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u0010\u0003\u0010\u0007\u0010\u014e\n\u0010\f\u0010\u000e\u0010\u0151",
    "\u000b\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0155\n\u0010\f\u0010",
    "\u000e\u0010\u0158\u000b\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u015c",
    "\n\u0010\f\u0010\u000e\u0010\u015f\u000b\u0010\u0003\u0010\u0003\u0010",
    "\u0007\u0010\u0163\n\u0010\f\u0010\u000e\u0010\u0166\u000b\u0010\u0003",
    "\u0010\u0003\u0010\u0007\u0010\u016a\n\u0010\f\u0010\u000e\u0010\u016d",
    "\u000b\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0007\u0011",
    "\u0173\n\u0011\f\u0011\u000e\u0011\u0176\u000b\u0011\u0003\u0011\u0003",
    "\u0011\u0007\u0011\u017a\n\u0011\f\u0011\u000e\u0011\u017d\u000b\u0011",
    "\u0003\u0011\u0003\u0011\u0007\u0011\u0181\n\u0011\f\u0011\u000e\u0011",
    "\u0184\u000b\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0188\n\u0011",
    "\f\u0011\u000e\u0011\u018b\u000b\u0011\u0003\u0011\u0003\u0011\u0007",
    "\u0011\u018f\n\u0011\f\u0011\u000e\u0011\u0192\u000b\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0012\u0003\u0012\u0007\u0012\u0198\n\u0012\f\u0012",
    "\u000e\u0012\u019b\u000b\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u019f",
    "\n\u0012\f\u0012\u000e\u0012\u01a2\u000b\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u01ab\n\u0013\u0003\u0014\u0003\u0014\u0007\u0014\u01af\n\u0014\f\u0014",
    "\u000e\u0014\u01b2\u000b\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u01b6",
    "\n\u0014\f\u0014\u000e\u0014\u01b9\u000b\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u01be\n\u0014\u0003\u0015\u0003\u0015\u0007",
    "\u0015\u01c2\n\u0015\f\u0015\u000e\u0015\u01c5\u000b\u0015\u0003\u0015",
    "\u0003\u0015\u0007\u0015\u01c9\n\u0015\f\u0015\u000e\u0015\u01cc\u000b",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0007\u0016\u01d2",
    "\n\u0016\f\u0016\u000e\u0016\u01d5\u000b\u0016\u0003\u0016\u0003\u0016",
    "\u0006\u0016\u01d9\n\u0016\r\u0016\u000e\u0016\u01da\u0006\u0016\u01dd",
    "\n\u0016\r\u0016\u000e\u0016\u01de\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0007\u0017\u01e5\n\u0017\f\u0017\u000e\u0017\u01e8\u000b",
    "\u0017\u0003\u0017\u0003\u0017\u0006\u0017\u01ec\n\u0017\r\u0017\u000e",
    "\u0017\u01ed\u0007\u0017\u01f0\n\u0017\f\u0017\u000e\u0017\u01f3\u000b",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0007\u0018\u01f9",
    "\n\u0018\f\u0018\u000e\u0018\u01fc\u000b\u0018\u0003\u0018\u0003\u0018",
    "\u0007\u0018\u0200\n\u0018\f\u0018\u000e\u0018\u0203\u000b\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0019\u0007\u0019\u0208\n\u0019\f\u0019\u000e",
    "\u0019\u020b\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019",
    "\u0210\n\u0019\f\u0019\u000e\u0019\u0213\u000b\u0019\u0003\u0019\u0007",
    "\u0019\u0216\n\u0019\f\u0019\u000e\u0019\u0219\u000b\u0019\u0003\u0019",
    "\u0007\u0019\u021c\n\u0019\f\u0019\u000e\u0019\u021f\u000b\u0019\u0003",
    "\u001a\u0007\u001a\u0222\n\u001a\f\u001a\u000e\u001a\u0225\u000b\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u022a\n\u001a\f\u001a",
    "\u000e\u001a\u022d\u000b\u001a\u0003\u001a\u0007\u001a\u0230\n\u001a",
    "\f\u001a\u000e\u001a\u0233\u000b\u001a\u0003\u001a\u0007\u001a\u0236",
    "\n\u001a\f\u001a\u000e\u001a\u0239\u000b\u001a\u0003\u001b\u0003\u001b",
    "\u0007\u001b\u023d\n\u001b\f\u001b\u000e\u001b\u0240\u000b\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u0244\n\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001c\u0003\u001c\u0007\u001c\u024a\n\u001c\f\u001c\u000e\u001c",
    "\u024d\u000b\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u0251\n\u001c",
    "\f\u001c\u000e\u001c\u0254\u000b\u001c\u0003\u001c\u0005\u001c\u0257",
    "\n\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0007\u001e\u025f\n\u001e\f\u001e\u000e\u001e\u0262\u000b",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0006",
    "\u001f\u0269\n\u001f\r\u001f\u000e\u001f\u026a\u0003\u001f\u0003\u001f",
    "\u0006\u001f\u026f\n\u001f\r\u001f\u000e\u001f\u0270\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0002\u0002 \u0002\u0004\u0006\b\n\f\u000e\u0010",
    "\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<\u0002\u0004",
    "\u0003\u0002\u001a\u001b\u0004\u0002\n\n\u001c\u001d\u0002\u02b7\u0002",
    "p\u0003\u0002\u0002\u0002\u0004r\u0003\u0002\u0002\u0002\u0006t\u0003",
    "\u0002\u0002\u0002\b\u00a7\u0003\u0002\u0002\u0002\n\u00b1\u0003\u0002",
    "\u0002\u0002\f\u00b3\u0003\u0002\u0002\u0002\u000e\u00e1\u0003\u0002",
    "\u0002\u0002\u0010\u00e3\u0003\u0002\u0002\u0002\u0012\u00fa\u0003\u0002",
    "\u0002\u0002\u0014\u0103\u0003\u0002\u0002\u0002\u0016\u0126\u0003\u0002",
    "\u0002\u0002\u0018\u013e\u0003\u0002\u0002\u0002\u001a\u0147\u0003\u0002",
    "\u0002\u0002\u001c\u0149\u0003\u0002\u0002\u0002\u001e\u014b\u0003\u0002",
    "\u0002\u0002 \u0170\u0003\u0002\u0002\u0002\"\u0195\u0003\u0002\u0002",
    "\u0002$\u01aa\u0003\u0002\u0002\u0002&\u01ac\u0003\u0002\u0002\u0002",
    "(\u01bf\u0003\u0002\u0002\u0002*\u01cf\u0003\u0002\u0002\u0002,\u01e2",
    "\u0003\u0002\u0002\u0002.\u01f6\u0003\u0002\u0002\u00020\u0209\u0003",
    "\u0002\u0002\u00022\u0223\u0003\u0002\u0002\u00024\u023a\u0003\u0002",
    "\u0002\u00026\u0247\u0003\u0002\u0002\u00028\u0258\u0003\u0002\u0002",
    "\u0002:\u025a\u0003\u0002\u0002\u0002<\u0266\u0003\u0002\u0002\u0002",
    ">@\u0005\u0004\u0003\u0002?>\u0003\u0002\u0002\u0002@C\u0003\u0002\u0002",
    "\u0002A?\u0003\u0002\u0002\u0002AB\u0003\u0002\u0002\u0002BL\u0003\u0002",
    "\u0002\u0002CA\u0003\u0002\u0002\u0002DK\u0005\u0006\u0004\u0002EG\u0005",
    "\u0004\u0003\u0002FE\u0003\u0002\u0002\u0002GH\u0003\u0002\u0002\u0002",
    "HF\u0003\u0002\u0002\u0002HI\u0003\u0002\u0002\u0002IK\u0003\u0002\u0002",
    "\u0002JD\u0003\u0002\u0002\u0002JF\u0003\u0002\u0002\u0002KN\u0003\u0002",
    "\u0002\u0002LJ\u0003\u0002\u0002\u0002LM\u0003\u0002\u0002\u0002MW\u0003",
    "\u0002\u0002\u0002NL\u0003\u0002\u0002\u0002OV\u0005\u001e\u0010\u0002",
    "PR\u0005\u0004\u0003\u0002QP\u0003\u0002\u0002\u0002RS\u0003\u0002\u0002",
    "\u0002SQ\u0003\u0002\u0002\u0002ST\u0003\u0002\u0002\u0002TV\u0003\u0002",
    "\u0002\u0002UO\u0003\u0002\u0002\u0002UQ\u0003\u0002\u0002\u0002VY\u0003",
    "\u0002\u0002\u0002WU\u0003\u0002\u0002\u0002WX\u0003\u0002\u0002\u0002",
    "Xb\u0003\u0002\u0002\u0002YW\u0003\u0002\u0002\u0002Za\u0005:\u001e",
    "\u0002[]\u0005\u0004\u0003\u0002\\[\u0003\u0002\u0002\u0002]^\u0003",
    "\u0002\u0002\u0002^\\\u0003\u0002\u0002\u0002^_\u0003\u0002\u0002\u0002",
    "_a\u0003\u0002\u0002\u0002`Z\u0003\u0002\u0002\u0002`\\\u0003\u0002",
    "\u0002\u0002ad\u0003\u0002\u0002\u0002b`\u0003\u0002\u0002\u0002bc\u0003",
    "\u0002\u0002\u0002ck\u0003\u0002\u0002\u0002db\u0003\u0002\u0002\u0002",
    "el\u0005<\u001f\u0002fh\u0005\u0004\u0003\u0002gf\u0003\u0002\u0002",
    "\u0002hi\u0003\u0002\u0002\u0002ig\u0003\u0002\u0002\u0002ij\u0003\u0002",
    "\u0002\u0002jl\u0003\u0002\u0002\u0002ke\u0003\u0002\u0002\u0002kg\u0003",
    "\u0002\u0002\u0002lm\u0003\u0002\u0002\u0002mk\u0003\u0002\u0002\u0002",
    "mn\u0003\u0002\u0002\u0002nq\u0003\u0002\u0002\u0002oq\u0007\u0002\u0002",
    "\u0003pA\u0003\u0002\u0002\u0002po\u0003\u0002\u0002\u0002q\u0003\u0003",
    "\u0002\u0002\u0002rs\t\u0002\u0002\u0002s\u0005\u0003\u0002\u0002\u0002",
    "tv\u0007\u0003\u0002\u0002uw\u0005\u0004\u0003\u0002vu\u0003\u0002\u0002",
    "\u0002wx\u0003\u0002\u0002\u0002xv\u0003\u0002\u0002\u0002xy\u0003\u0002",
    "\u0002\u0002yz\u0003\u0002\u0002\u0002z~\u0005\n\u0006\u0002{}\u0005",
    "\u0004\u0003\u0002|{\u0003\u0002\u0002\u0002}\u0080\u0003\u0002\u0002",
    "\u0002~|\u0003\u0002\u0002\u0002~\u007f\u0003\u0002\u0002\u0002\u007f",
    "\u0082\u0003\u0002\u0002\u0002\u0080~\u0003\u0002\u0002\u0002\u0081",
    "\u0083\u0005\f\u0007\u0002\u0082\u0081\u0003\u0002\u0002\u0002\u0082",
    "\u0083\u0003\u0002\u0002\u0002\u0083\u0085\u0003\u0002\u0002\u0002\u0084",
    "\u0086\u0005\u0004\u0003\u0002\u0085\u0084\u0003\u0002\u0002\u0002\u0086",
    "\u0087\u0003\u0002\u0002\u0002\u0087\u0085\u0003\u0002\u0002\u0002\u0087",
    "\u0088\u0003\u0002\u0002\u0002\u0088\u00a5\u0003\u0002\u0002\u0002\u0089",
    "\u00a6\u0005\u0010\t\u0002\u008a\u008e\u0007\u0016\u0002\u0002\u008b",
    "\u008d\u0005\u0004\u0003\u0002\u008c\u008b\u0003\u0002\u0002\u0002\u008d",
    "\u0090\u0003\u0002\u0002\u0002\u008e\u008c\u0003\u0002\u0002\u0002\u008e",
    "\u008f\u0003\u0002\u0002\u0002\u008f\u0091\u0003\u0002\u0002\u0002\u0090",
    "\u008e\u0003\u0002\u0002\u0002\u0091\u00a2\u0005\b\u0005\u0002\u0092",
    "\u0094\u0005\u0004\u0003\u0002\u0093\u0092\u0003\u0002\u0002\u0002\u0094",
    "\u0097\u0003\u0002\u0002\u0002\u0095\u0093\u0003\u0002\u0002\u0002\u0095",
    "\u0096\u0003\u0002\u0002\u0002\u0096\u0098\u0003\u0002\u0002\u0002\u0097",
    "\u0095\u0003\u0002\u0002\u0002\u0098\u009c\u0007\u0017\u0002\u0002\u0099",
    "\u009b\u0005\u0004\u0003\u0002\u009a\u0099\u0003\u0002\u0002\u0002\u009b",
    "\u009e\u0003\u0002\u0002\u0002\u009c\u009a\u0003\u0002\u0002\u0002\u009c",
    "\u009d\u0003\u0002\u0002\u0002\u009d\u009f\u0003\u0002\u0002\u0002\u009e",
    "\u009c\u0003\u0002\u0002\u0002\u009f\u00a1\u0005\b\u0005\u0002\u00a0",
    "\u0095\u0003\u0002\u0002\u0002\u00a1\u00a4\u0003\u0002\u0002\u0002\u00a2",
    "\u00a0\u0003\u0002\u0002\u0002\u00a2\u00a3\u0003\u0002\u0002\u0002\u00a3",
    "\u00a6\u0003\u0002\u0002\u0002\u00a4\u00a2\u0003\u0002\u0002\u0002\u00a5",
    "\u0089\u0003\u0002\u0002\u0002\u00a5\u008a\u0003\u0002\u0002\u0002\u00a6",
    "\u0007\u0003\u0002\u0002\u0002\u00a7\u00ab\u0005\n\u0006\u0002\u00a8",
    "\u00aa\u0005\u0004\u0003\u0002\u00a9\u00a8\u0003\u0002\u0002\u0002\u00aa",
    "\u00ad\u0003\u0002\u0002\u0002\u00ab\u00a9\u0003\u0002\u0002\u0002\u00ab",
    "\u00ac\u0003\u0002\u0002\u0002\u00ac\u00af\u0003\u0002\u0002\u0002\u00ad",
    "\u00ab\u0003\u0002\u0002\u0002\u00ae\u00b0\u0005\f\u0007\u0002\u00af",
    "\u00ae\u0003\u0002\u0002\u0002\u00af\u00b0\u0003\u0002\u0002\u0002\u00b0",
    "\t\u0003\u0002\u0002\u0002\u00b1\u00b2\u0007\u001e\u0002\u0002\u00b2",
    "\u000b\u0003\u0002\u0002\u0002\u00b3\u00b7\u0007\u0011\u0002\u0002\u00b4",
    "\u00b6\u0005\u0004\u0003\u0002\u00b5\u00b4\u0003\u0002\u0002\u0002\u00b6",
    "\u00b9\u0003\u0002\u0002\u0002\u00b7\u00b5\u0003\u0002\u0002\u0002\u00b7",
    "\u00b8\u0003\u0002\u0002\u0002\u00b8\u00ba\u0003\u0002\u0002\u0002\u00b9",
    "\u00b7\u0003\u0002\u0002\u0002\u00ba\u00be\u0005\u000e\b\u0002\u00bb",
    "\u00bd\u0005\u0004\u0003\u0002\u00bc\u00bb\u0003\u0002\u0002\u0002\u00bd",
    "\u00c0\u0003\u0002\u0002\u0002\u00be\u00bc\u0003\u0002\u0002\u0002\u00be",
    "\u00bf\u0003\u0002\u0002\u0002\u00bf\u00d1\u0003\u0002\u0002\u0002\u00c0",
    "\u00be\u0003\u0002\u0002\u0002\u00c1\u00c5\u0007\f\u0002\u0002\u00c2",
    "\u00c4\u0005\u0004\u0003\u0002\u00c3\u00c2\u0003\u0002\u0002\u0002\u00c4",
    "\u00c7\u0003\u0002\u0002\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002\u00c5",
    "\u00c6\u0003\u0002\u0002\u0002\u00c6\u00c8\u0003\u0002\u0002\u0002\u00c7",
    "\u00c5\u0003\u0002\u0002\u0002\u00c8\u00cc\u0005\u000e\b\u0002\u00c9",
    "\u00cb\u0005\u0004\u0003\u0002\u00ca\u00c9\u0003\u0002\u0002\u0002\u00cb",
    "\u00ce\u0003\u0002\u0002\u0002\u00cc\u00ca\u0003\u0002\u0002\u0002\u00cc",
    "\u00cd\u0003\u0002\u0002\u0002\u00cd\u00d0\u0003\u0002\u0002\u0002\u00ce",
    "\u00cc\u0003\u0002\u0002\u0002\u00cf\u00c1\u0003\u0002\u0002\u0002\u00d0",
    "\u00d3\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002\u0002\u0002\u00d1",
    "\u00d2\u0003\u0002\u0002\u0002\u00d2\u00d4\u0003\u0002\u0002\u0002\u00d3",
    "\u00d1\u0003\u0002\u0002\u0002\u00d4\u00d5\u0007\u0012\u0002\u0002\u00d5",
    "\r\u0003\u0002\u0002\u0002\u00d6\u00da\u0005\n\u0006\u0002\u00d7\u00d9",
    "\u0005\u0004\u0003\u0002\u00d8\u00d7\u0003\u0002\u0002\u0002\u00d9\u00dc",
    "\u0003\u0002\u0002\u0002\u00da\u00d8\u0003\u0002\u0002\u0002\u00da\u00db",
    "\u0003\u0002\u0002\u0002\u00db\u00de\u0003\u0002\u0002\u0002\u00dc\u00da",
    "\u0003\u0002\u0002\u0002\u00dd\u00df\u0005\f\u0007\u0002\u00de\u00dd",
    "\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002\u0002\u00df\u00e2",
    "\u0003\u0002\u0002\u0002\u00e0\u00e2\u0007\u0018\u0002\u0002\u00e1\u00d6",
    "\u0003\u0002\u0002\u0002\u00e1\u00e0\u0003\u0002\u0002\u0002\u00e2\u000f",
    "\u0003\u0002\u0002\u0002\u00e3\u00e7\u0007\r\u0002\u0002\u00e4\u00e6",
    "\u0005\u0004\u0003\u0002\u00e5\u00e4\u0003\u0002\u0002\u0002\u00e6\u00e9",
    "\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003\u0002\u0002\u0002\u00e7\u00e8",
    "\u0003\u0002\u0002\u0002\u00e8\u00f1\u0003\u0002\u0002\u0002\u00e9\u00e7",
    "\u0003\u0002\u0002\u0002\u00ea\u00ec\u0007\u001b\u0002\u0002\u00eb\u00ea",
    "\u0003\u0002\u0002\u0002\u00ec\u00ef\u0003\u0002\u0002\u0002\u00ed\u00eb",
    "\u0003\u0002\u0002\u0002\u00ed\u00ee\u0003\u0002\u0002\u0002\u00ee\u00f0",
    "\u0003\u0002\u0002\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002\u00f0\u00f2",
    "\u0005\u0012\n\u0002\u00f1\u00ed\u0003\u0002\u0002\u0002\u00f2\u00f3",
    "\u0003\u0002\u0002\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f3\u00f4",
    "\u0003\u0002\u0002\u0002\u00f4\u00f6\u0003\u0002\u0002\u0002\u00f5\u00f7",
    "\u0005\u0004\u0003\u0002\u00f6\u00f5\u0003\u0002\u0002\u0002\u00f6\u00f7",
    "\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u00f9",
    "\u0007\u000e\u0002\u0002\u00f9\u0011\u0003\u0002\u0002\u0002\u00fa\u00fb",
    "\u0007\u001e\u0002\u0002\u00fb\u00fc\u0007\u0019\u0002\u0002\u00fc\u0100",
    "\u0005\n\u0006\u0002\u00fd\u00ff\u0007\u001a\u0002\u0002\u00fe\u00fd",
    "\u0003\u0002\u0002\u0002\u00ff\u0102\u0003\u0002\u0002\u0002\u0100\u00fe",
    "\u0003\u0002\u0002\u0002\u0100\u0101\u0003\u0002\u0002\u0002\u0101\u0013",
    "\u0003\u0002\u0002\u0002\u0102\u0100\u0003\u0002\u0002\u0002\u0103\u0105",
    "\u0007\u0004\u0002\u0002\u0104\u0106\u0005\u0004\u0003\u0002\u0105\u0104",
    "\u0003\u0002\u0002\u0002\u0106\u0107\u0003\u0002\u0002\u0002\u0107\u0105",
    "\u0003\u0002\u0002\u0002\u0107\u0108\u0003\u0002\u0002\u0002\u0108\u0109",
    "\u0003\u0002\u0002\u0002\u0109\u010d\u0007\u000f\u0002\u0002\u010a\u010b",
    "\u0007\u001e\u0002\u0002\u010b\u010c\u0007\u0019\u0002\u0002\u010c\u010e",
    "\u0005\u000e\b\u0002\u010d\u010a\u0003\u0002\u0002\u0002\u010d\u010e",
    "\u0003\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u0113",
    "\u0007\u0010\u0002\u0002\u0110\u0112\u0005\u0004\u0003\u0002\u0111\u0110",
    "\u0003\u0002\u0002\u0002\u0112\u0115\u0003\u0002\u0002\u0002\u0113\u0111",
    "\u0003\u0002\u0002\u0002\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u0116",
    "\u0003\u0002\u0002\u0002\u0115\u0113\u0003\u0002\u0002\u0002\u0116\u011a",
    "\u0007\u0019\u0002\u0002\u0117\u0119\u0005\u0004\u0003\u0002\u0118\u0117",
    "\u0003\u0002\u0002\u0002\u0119\u011c\u0003\u0002\u0002\u0002\u011a\u0118",
    "\u0003\u0002\u0002\u0002\u011a\u011b\u0003\u0002\u0002\u0002\u011b\u011d",
    "\u0003\u0002\u0002\u0002\u011c\u011a\u0003\u0002\u0002\u0002\u011d\u0121",
    "\u0007\u0018\u0002\u0002\u011e\u0120\u0005\u0004\u0003\u0002\u011f\u011e",
    "\u0003\u0002\u0002\u0002\u0120\u0123\u0003\u0002\u0002\u0002\u0121\u011f",
    "\u0003\u0002\u0002\u0002\u0121\u0122\u0003\u0002\u0002\u0002\u0122\u0124",
    "\u0003\u0002\u0002\u0002\u0123\u0121\u0003\u0002\u0002\u0002\u0124\u0125",
    "\u0005\u0016\f\u0002\u0125\u0015\u0003\u0002\u0002\u0002\u0126\u012a",
    "\u0007\r\u0002\u0002\u0127\u0129\u0005\u0004\u0003\u0002\u0128\u0127",
    "\u0003\u0002\u0002\u0002\u0129\u012c\u0003\u0002\u0002\u0002\u012a\u0128",
    "\u0003\u0002\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b\u012e",
    "\u0003\u0002\u0002\u0002\u012c\u012a\u0003\u0002\u0002\u0002\u012d\u012f",
    "\u0005\u0018\r\u0002\u012e\u012d\u0003\u0002\u0002\u0002\u012f\u0130",
    "\u0003\u0002\u0002\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0130\u0131",
    "\u0003\u0002\u0002\u0002\u0131\u0135\u0003\u0002\u0002\u0002\u0132\u0134",
    "\u0005\u0004\u0003\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u0134\u0137",
    "\u0003\u0002\u0002\u0002\u0135\u0133\u0003\u0002\u0002\u0002\u0135\u0136",
    "\u0003\u0002\u0002\u0002\u0136\u0138\u0003\u0002\u0002\u0002\u0137\u0135",
    "\u0003\u0002\u0002\u0002\u0138\u0139\u0007\u000e\u0002\u0002\u0139\u0017",
    "\u0003\u0002\u0002\u0002\u013a\u013f\u0005\u001a\u000e\u0002\u013b\u013f",
    "\u0005\"\u0012\u0002\u013c\u013f\u00054\u001b\u0002\u013d\u013f\u0005",
    "6\u001c\u0002\u013e\u013a\u0003\u0002\u0002\u0002\u013e\u013b\u0003",
    "\u0002\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013e\u013d\u0003",
    "\u0002\u0002\u0002\u013f\u0141\u0003\u0002\u0002\u0002\u0140\u0142\u0005",
    "\u0004\u0003\u0002\u0141\u0140\u0003\u0002\u0002\u0002\u0142\u0143\u0003",
    "\u0002\u0002\u0002\u0143\u0141\u0003\u0002\u0002\u0002\u0143\u0144\u0003",
    "\u0002\u0002\u0002\u0144\u0019\u0003\u0002\u0002\u0002\u0145\u0148\u0005",
    "\u001e\u0010\u0002\u0146\u0148\u0005 \u0011\u0002\u0147\u0145\u0003",
    "\u0002\u0002\u0002\u0147\u0146\u0003\u0002\u0002\u0002\u0148\u001b\u0003",
    "\u0002\u0002\u0002\u0149\u014a\u0007\u001e\u0002\u0002\u014a\u001d\u0003",
    "\u0002\u0002\u0002\u014b\u014f\u0007\u0007\u0002\u0002\u014c\u014e\u0005",
    "\u0004\u0003\u0002\u014d\u014c\u0003\u0002\u0002\u0002\u014e\u0151\u0003",
    "\u0002\u0002\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u014f\u0150\u0003",
    "\u0002\u0002\u0002\u0150\u0152\u0003\u0002\u0002\u0002\u0151\u014f\u0003",
    "\u0002\u0002\u0002\u0152\u0156\u0005\u001c\u000f\u0002\u0153\u0155\u0005",
    "\u0004\u0003\u0002\u0154\u0153\u0003\u0002\u0002\u0002\u0155\u0158\u0003",
    "\u0002\u0002\u0002\u0156\u0154\u0003\u0002\u0002\u0002\u0156\u0157\u0003",
    "\u0002\u0002\u0002\u0157\u0159\u0003\u0002\u0002\u0002\u0158\u0156\u0003",
    "\u0002\u0002\u0002\u0159\u015d\u0007\u0019\u0002\u0002\u015a\u015c\u0005",
    "\u0004\u0003\u0002\u015b\u015a\u0003\u0002\u0002\u0002\u015c\u015f\u0003",
    "\u0002\u0002\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015d\u015e\u0003",
    "\u0002\u0002\u0002\u015e\u0160\u0003\u0002\u0002\u0002\u015f\u015d\u0003",
    "\u0002\u0002\u0002\u0160\u0164\u0005\u000e\b\u0002\u0161\u0163\u0005",
    "\u0004\u0003\u0002\u0162\u0161\u0003\u0002\u0002\u0002\u0163\u0166\u0003",
    "\u0002\u0002\u0002\u0164\u0162\u0003\u0002\u0002\u0002\u0164\u0165\u0003",
    "\u0002\u0002\u0002\u0165\u0167\u0003\u0002\u0002\u0002\u0166\u0164\u0003",
    "\u0002\u0002\u0002\u0167\u016b\u0007\u0016\u0002\u0002\u0168\u016a\u0005",
    "\u0004\u0003\u0002\u0169\u0168\u0003\u0002\u0002\u0002\u016a\u016d\u0003",
    "\u0002\u0002\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016b\u016c\u0003",
    "\u0002\u0002\u0002\u016c\u016e\u0003\u0002\u0002\u0002\u016d\u016b\u0003",
    "\u0002\u0002\u0002\u016e\u016f\u0005$\u0013\u0002\u016f\u001f\u0003",
    "\u0002\u0002\u0002\u0170\u0174\u0007\b\u0002\u0002\u0171\u0173\u0005",
    "\u0004\u0003\u0002\u0172\u0171\u0003\u0002\u0002\u0002\u0173\u0176\u0003",
    "\u0002\u0002\u0002\u0174\u0172\u0003\u0002\u0002\u0002\u0174\u0175\u0003",
    "\u0002\u0002\u0002\u0175\u0177\u0003\u0002\u0002\u0002\u0176\u0174\u0003",
    "\u0002\u0002\u0002\u0177\u017b\u0005\u001c\u000f\u0002\u0178\u017a\u0005",
    "\u0004\u0003\u0002\u0179\u0178\u0003\u0002\u0002\u0002\u017a\u017d\u0003",
    "\u0002\u0002\u0002\u017b\u0179\u0003\u0002\u0002\u0002\u017b\u017c\u0003",
    "\u0002\u0002\u0002\u017c\u017e\u0003\u0002\u0002\u0002\u017d\u017b\u0003",
    "\u0002\u0002\u0002\u017e\u0182\u0007\u0019\u0002\u0002\u017f\u0181\u0005",
    "\u0004\u0003\u0002\u0180\u017f\u0003\u0002\u0002\u0002\u0181\u0184\u0003",
    "\u0002\u0002\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0182\u0183\u0003",
    "\u0002\u0002\u0002\u0183\u0185\u0003\u0002\u0002\u0002\u0184\u0182\u0003",
    "\u0002\u0002\u0002\u0185\u0189\u0005\u000e\b\u0002\u0186\u0188\u0005",
    "\u0004\u0003\u0002\u0187\u0186\u0003\u0002\u0002\u0002\u0188\u018b\u0003",
    "\u0002\u0002\u0002\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u018a\u0003",
    "\u0002\u0002\u0002\u018a\u018c\u0003\u0002\u0002\u0002\u018b\u0189\u0003",
    "\u0002\u0002\u0002\u018c\u0190\u0007\u0016\u0002\u0002\u018d\u018f\u0005",
    "\u0004\u0003\u0002\u018e\u018d\u0003\u0002\u0002\u0002\u018f\u0192\u0003",
    "\u0002\u0002\u0002\u0190\u018e\u0003\u0002\u0002\u0002\u0190\u0191\u0003",
    "\u0002\u0002\u0002\u0191\u0193\u0003\u0002\u0002\u0002\u0192\u0190\u0003",
    "\u0002\u0002\u0002\u0193\u0194\u0005$\u0013\u0002\u0194!\u0003\u0002",
    "\u0002\u0002\u0195\u0199\u0005\u001c\u000f\u0002\u0196\u0198\u0005\u0004",
    "\u0003\u0002\u0197\u0196\u0003\u0002\u0002\u0002\u0198\u019b\u0003\u0002",
    "\u0002\u0002\u0199\u0197\u0003\u0002\u0002\u0002\u0199\u019a\u0003\u0002",
    "\u0002\u0002\u019a\u019c\u0003\u0002\u0002\u0002\u019b\u0199\u0003\u0002",
    "\u0002\u0002\u019c\u01a0\u0007\u0016\u0002\u0002\u019d\u019f\u0005\u0004",
    "\u0003\u0002\u019e\u019d\u0003\u0002\u0002\u0002\u019f\u01a2\u0003\u0002",
    "\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002",
    "\u0002\u0002\u01a1\u01a3\u0003\u0002\u0002\u0002\u01a2\u01a0\u0003\u0002",
    "\u0002\u0002\u01a3\u01a4\u0005$\u0013\u0002\u01a4#\u0003\u0002\u0002",
    "\u0002\u01a5\u01ab\u0005\u0014\u000b\u0002\u01a6\u01ab\u00054\u001b",
    "\u0002\u01a7\u01ab\u00058\u001d\u0002\u01a8\u01ab\u0005&\u0014\u0002",
    "\u01a9\u01ab\u0007\u001e\u0002\u0002\u01aa\u01a5\u0003\u0002\u0002\u0002",
    "\u01aa\u01a6\u0003\u0002\u0002\u0002\u01aa\u01a7\u0003\u0002\u0002\u0002",
    "\u01aa\u01a8\u0003\u0002\u0002\u0002\u01aa\u01a9\u0003\u0002\u0002\u0002",
    "\u01ab%\u0003\u0002\u0002\u0002\u01ac\u01b0\u0007\u000b\u0002\u0002",
    "\u01ad\u01af\u0007\u001b\u0002\u0002\u01ae\u01ad\u0003\u0002\u0002\u0002",
    "\u01af\u01b2\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002",
    "\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u01b3\u0003\u0002\u0002\u0002",
    "\u01b2\u01b0\u0003\u0002\u0002\u0002\u01b3\u01b7\u0005\b\u0005\u0002",
    "\u01b4\u01b6\u0007\u001b\u0002\u0002\u01b5\u01b4\u0003\u0002\u0002\u0002",
    "\u01b6\u01b9\u0003\u0002\u0002\u0002\u01b7\u01b5\u0003\u0002\u0002\u0002",
    "\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\u01bd\u0003\u0002\u0002\u0002",
    "\u01b9\u01b7\u0003\u0002\u0002\u0002\u01ba\u01be\u0005(\u0015\u0002",
    "\u01bb\u01be\u0005*\u0016\u0002\u01bc\u01be\u0005,\u0017\u0002\u01bd",
    "\u01ba\u0003\u0002\u0002\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd",
    "\u01bc\u0003\u0002\u0002\u0002\u01be\'\u0003\u0002\u0002\u0002\u01bf",
    "\u01c3\u0007\u0013\u0002\u0002\u01c0\u01c2\u0005\u0004\u0003\u0002\u01c1",
    "\u01c0\u0003\u0002\u0002\u0002\u01c2\u01c5\u0003\u0002\u0002\u0002\u01c3",
    "\u01c1\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4",
    "\u01c6\u0003\u0002\u0002\u0002\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c6",
    "\u01ca\u00050\u0019\u0002\u01c7\u01c9\u0005\u0004\u0003\u0002\u01c8",
    "\u01c7\u0003\u0002\u0002\u0002\u01c9\u01cc\u0003\u0002\u0002\u0002\u01ca",
    "\u01c8\u0003\u0002\u0002\u0002\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb",
    "\u01cd\u0003\u0002\u0002\u0002\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cd",
    "\u01ce\u0007\u0014\u0002\u0002\u01ce)\u0003\u0002\u0002\u0002\u01cf",
    "\u01d3\u0007\r\u0002\u0002\u01d0\u01d2\u0005\u0004\u0003\u0002\u01d1",
    "\u01d0\u0003\u0002\u0002\u0002\u01d2\u01d5\u0003\u0002\u0002\u0002\u01d3",
    "\u01d1\u0003\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4",
    "\u01dc\u0003\u0002\u0002\u0002\u01d5\u01d3\u0003\u0002\u0002\u0002\u01d6",
    "\u01d8\u0005\"\u0012\u0002\u01d7\u01d9\u0005\u0004\u0003\u0002\u01d8",
    "\u01d7\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002\u01da",
    "\u01d8\u0003\u0002\u0002\u0002\u01da\u01db\u0003\u0002\u0002\u0002\u01db",
    "\u01dd\u0003\u0002\u0002\u0002\u01dc\u01d6\u0003\u0002\u0002\u0002\u01dd",
    "\u01de\u0003\u0002\u0002\u0002\u01de\u01dc\u0003\u0002\u0002\u0002\u01de",
    "\u01df\u0003\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0",
    "\u01e1\u0007\u000e\u0002\u0002\u01e1+\u0003\u0002\u0002\u0002\u01e2",
    "\u01e6\u0007\r\u0002\u0002\u01e3\u01e5\u0005\u0004\u0003\u0002\u01e4",
    "\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6",
    "\u01e4\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7",
    "\u01f1\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e9",
    "\u01eb\u0005.\u0018\u0002\u01ea\u01ec\u0005\u0004\u0003\u0002\u01eb",
    "\u01ea\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed",
    "\u01eb\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee",
    "\u01f0\u0003\u0002\u0002\u0002\u01ef\u01e9\u0003\u0002\u0002\u0002\u01f0",
    "\u01f3\u0003\u0002\u0002\u0002\u01f1\u01ef\u0003\u0002\u0002\u0002\u01f1",
    "\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f4\u0003\u0002\u0002\u0002\u01f3",
    "\u01f1\u0003\u0002\u0002\u0002\u01f4\u01f5\u0007\u000e\u0002\u0002\u01f5",
    "-\u0003\u0002\u0002\u0002\u01f6\u01fa\u0005$\u0013\u0002\u01f7\u01f9",
    "\u0007\u001b\u0002\u0002\u01f8\u01f7\u0003\u0002\u0002\u0002\u01f9\u01fc",
    "\u0003\u0002\u0002\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fa\u01fb",
    "\u0003\u0002\u0002\u0002\u01fb\u01fd\u0003\u0002\u0002\u0002\u01fc\u01fa",
    "\u0003\u0002\u0002\u0002\u01fd\u0201\u0007\u0019\u0002\u0002\u01fe\u0200",
    "\u0007\u001b\u0002\u0002\u01ff\u01fe\u0003\u0002\u0002\u0002\u0200\u0203",
    "\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0201\u0202",
    "\u0003\u0002\u0002\u0002\u0202\u0204\u0003\u0002\u0002\u0002\u0203\u0201",
    "\u0003\u0002\u0002\u0002\u0204\u0205\u0005$\u0013\u0002\u0205/\u0003",
    "\u0002\u0002\u0002\u0206\u0208\u0005\u0004\u0003\u0002\u0207\u0206\u0003",
    "\u0002\u0002\u0002\u0208\u020b\u0003\u0002\u0002\u0002\u0209\u0207\u0003",
    "\u0002\u0002\u0002\u0209\u020a\u0003\u0002\u0002\u0002\u020a\u020c\u0003",
    "\u0002\u0002\u0002\u020b\u0209\u0003\u0002\u0002\u0002\u020c\u0217\u0005",
    "$\u0013\u0002\u020d\u0211\u0007\f\u0002\u0002\u020e\u0210\u0005\u0004",
    "\u0003\u0002\u020f\u020e\u0003\u0002\u0002\u0002\u0210\u0213\u0003\u0002",
    "\u0002\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002",
    "\u0002\u0002\u0212\u0214\u0003\u0002\u0002\u0002\u0213\u0211\u0003\u0002",
    "\u0002\u0002\u0214\u0216\u0005$\u0013\u0002\u0215\u020d\u0003\u0002",
    "\u0002\u0002\u0216\u0219\u0003\u0002\u0002\u0002\u0217\u0215\u0003\u0002",
    "\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u021d\u0003\u0002",
    "\u0002\u0002\u0219\u0217\u0003\u0002\u0002\u0002\u021a\u021c\u0005\u0004",
    "\u0003\u0002\u021b\u021a\u0003\u0002\u0002\u0002\u021c\u021f\u0003\u0002",
    "\u0002\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002",
    "\u0002\u0002\u021e1\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002",
    "\u0002\u0002\u0220\u0222\u0005\u0004\u0003\u0002\u0221\u0220\u0003\u0002",
    "\u0002\u0002\u0222\u0225\u0003\u0002\u0002\u0002\u0223\u0221\u0003\u0002",
    "\u0002\u0002\u0223\u0224\u0003\u0002\u0002\u0002\u0224\u0226\u0003\u0002",
    "\u0002\u0002\u0225\u0223\u0003\u0002\u0002\u0002\u0226\u0231\u0007\u001e",
    "\u0002\u0002\u0227\u022b\u0007\f\u0002\u0002\u0228\u022a\u0005\u0004",
    "\u0003\u0002\u0229\u0228\u0003\u0002\u0002\u0002\u022a\u022d\u0003\u0002",
    "\u0002\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002",
    "\u0002\u0002\u022c\u022e\u0003\u0002\u0002\u0002\u022d\u022b\u0003\u0002",
    "\u0002\u0002\u022e\u0230\u0007\u001e\u0002\u0002\u022f\u0227\u0003\u0002",
    "\u0002\u0002\u0230\u0233\u0003\u0002\u0002\u0002\u0231\u022f\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0237\u0003\u0002",
    "\u0002\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0234\u0236\u0005\u0004",
    "\u0003\u0002\u0235\u0234\u0003\u0002\u0002\u0002\u0236\u0239\u0003\u0002",
    "\u0002\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002",
    "\u0002\u0002\u02383\u0003\u0002\u0002\u0002\u0239\u0237\u0003\u0002",
    "\u0002\u0002\u023a\u023e\u0007\u001e\u0002\u0002\u023b\u023d\u0007\u001b",
    "\u0002\u0002\u023c\u023b\u0003\u0002\u0002\u0002\u023d\u0240\u0003\u0002",
    "\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023e\u023f\u0003\u0002",
    "\u0002\u0002\u023f\u0241\u0003\u0002\u0002\u0002\u0240\u023e\u0003\u0002",
    "\u0002\u0002\u0241\u0243\u0007\u000f\u0002\u0002\u0242\u0244\u00052",
    "\u001a\u0002\u0243\u0242\u0003\u0002\u0002\u0002\u0243\u0244\u0003\u0002",
    "\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0246\u0007\u0010",
    "\u0002\u0002\u02465\u0003\u0002\u0002\u0002\u0247\u024b\u0007\t\u0002",
    "\u0002\u0248\u024a\u0005\u0004\u0003\u0002\u0249\u0248\u0003\u0002\u0002",
    "\u0002\u024a\u024d\u0003\u0002\u0002\u0002\u024b\u0249\u0003\u0002\u0002",
    "\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u024e\u0003\u0002\u0002",
    "\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024e\u0256\u0007\u001e\u0002",
    "\u0002\u024f\u0251\u0005\u0004\u0003\u0002\u0250\u024f\u0003\u0002\u0002",
    "\u0002\u0251\u0254\u0003\u0002\u0002\u0002\u0252\u0250\u0003\u0002\u0002",
    "\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0255\u0003\u0002\u0002",
    "\u0002\u0254\u0252\u0003\u0002\u0002\u0002\u0255\u0257\u0007\u001e\u0002",
    "\u0002\u0256\u0252\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002",
    "\u0002\u02577\u0003\u0002\u0002\u0002\u0258\u0259\t\u0003\u0002\u0002",
    "\u02599\u0003\u0002\u0002\u0002\u025a\u025b\u0007\u0005\u0002\u0002",
    "\u025b\u025c\u0005\u0004\u0003\u0002\u025c\u0260\u0007\u001e\u0002\u0002",
    "\u025d\u025f\u0005\u0004\u0003\u0002\u025e\u025d\u0003\u0002\u0002\u0002",
    "\u025f\u0262\u0003\u0002\u0002\u0002\u0260\u025e\u0003\u0002\u0002\u0002",
    "\u0260\u0261\u0003\u0002\u0002\u0002\u0261\u0263\u0003\u0002\u0002\u0002",
    "\u0262\u0260\u0003\u0002\u0002\u0002\u0263\u0264\u0007\u0019\u0002\u0002",
    "\u0264\u0265\u0005\n\u0006\u0002\u0265;\u0003\u0002\u0002\u0002\u0266",
    "\u0268\u0007\u0006\u0002\u0002\u0267\u0269\u0005\u0004\u0003\u0002\u0268",
    "\u0267\u0003\u0002\u0002\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a",
    "\u0268\u0003\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b",
    "\u026c\u0003\u0002\u0002\u0002\u026c\u026e\u0007\u001e\u0002\u0002\u026d",
    "\u026f\u0005\u0004\u0003\u0002\u026e\u026d\u0003\u0002\u0002\u0002\u026f",
    "\u0270\u0003\u0002\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0270",
    "\u0271\u0003\u0002\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002\u0272",
    "\u0273\u0005\u0014\u000b\u0002\u0273=\u0003\u0002\u0002\u0002]AHJLS",
    "UW^`bikmpx~\u0082\u0087\u008e\u0095\u009c\u00a2\u00a5\u00ab\u00af\u00b7",
    "\u00be\u00c5\u00cc\u00d1\u00da\u00de\u00e1\u00e7\u00ed\u00f3\u00f6\u0100",
    "\u0107\u010d\u0113\u011a\u0121\u012a\u0130\u0135\u013e\u0143\u0147\u014f",
    "\u0156\u015d\u0164\u016b\u0174\u017b\u0182\u0189\u0190\u0199\u01a0\u01aa",
    "\u01b0\u01b7\u01bd\u01c3\u01ca\u01d3\u01da\u01de\u01e6\u01ed\u01f1\u01fa",
    "\u0201\u0209\u0211\u0217\u021d\u0223\u022b\u0231\u0237\u023e\u0243\u024b",
    "\u0252\u0256\u0260\u026a\u0270"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'type'", "'fn'", "'event'", "'on'", "'const'", 
                     "'let'", "'emit'", null, "'new'", null, "'{'", "'}'", 
                     "'('", "')'", "'<'", "'>'", "'['", "']'", "'.'", "'='", 
                     "'|'", "'void'" ];

var symbolicNames = [ null, "TYPE", "FN", "EVENT", "ON", "CONST", "LET", 
                      "EMIT", "BOOLCONSTANT", "NEW", "SEP", "OPENBODY", 
                      "CLOSEBODY", "OPENARGS", "CLOSEARGS", "OPENGENERIC", 
                      "CLOSEGENERIC", "OPENARRAY", "CLOSEARRAY", "METHODSEP", 
                      "EQUALS", "OR", "VOID", "TYPESEP", "NEWLINE", "WS", 
                      "STRINGCONSTANT", "NUMBERCONSTANT", "VARNAME" ];

var ruleNames =  [ "module", "blank", "types", "othertype", "typename", 
                   "typegenerics", "fulltypename", "typebody", "typeline", 
                   "functions", "functionbody", "statements", "declarations", 
                   "decname", "constdeclaration", "letdeclaration", "assignments", 
                   "assignables", "objectliterals", "arrayliteral", "typeliteral", 
                   "mapliteral", "mapline", "assignablelist", "calllist", 
                   "calls", "emits", "constants", "events", "handlers" ];

function AmmParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

AmmParser.prototype = Object.create(antlr4.Parser.prototype);
AmmParser.prototype.constructor = AmmParser;

Object.defineProperty(AmmParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

AmmParser.EOF = antlr4.Token.EOF;
AmmParser.TYPE = 1;
AmmParser.FN = 2;
AmmParser.EVENT = 3;
AmmParser.ON = 4;
AmmParser.CONST = 5;
AmmParser.LET = 6;
AmmParser.EMIT = 7;
AmmParser.BOOLCONSTANT = 8;
AmmParser.NEW = 9;
AmmParser.SEP = 10;
AmmParser.OPENBODY = 11;
AmmParser.CLOSEBODY = 12;
AmmParser.OPENARGS = 13;
AmmParser.CLOSEARGS = 14;
AmmParser.OPENGENERIC = 15;
AmmParser.CLOSEGENERIC = 16;
AmmParser.OPENARRAY = 17;
AmmParser.CLOSEARRAY = 18;
AmmParser.METHODSEP = 19;
AmmParser.EQUALS = 20;
AmmParser.OR = 21;
AmmParser.VOID = 22;
AmmParser.TYPESEP = 23;
AmmParser.NEWLINE = 24;
AmmParser.WS = 25;
AmmParser.STRINGCONSTANT = 26;
AmmParser.NUMBERCONSTANT = 27;
AmmParser.VARNAME = 28;

AmmParser.RULE_module = 0;
AmmParser.RULE_blank = 1;
AmmParser.RULE_types = 2;
AmmParser.RULE_othertype = 3;
AmmParser.RULE_typename = 4;
AmmParser.RULE_typegenerics = 5;
AmmParser.RULE_fulltypename = 6;
AmmParser.RULE_typebody = 7;
AmmParser.RULE_typeline = 8;
AmmParser.RULE_functions = 9;
AmmParser.RULE_functionbody = 10;
AmmParser.RULE_statements = 11;
AmmParser.RULE_declarations = 12;
AmmParser.RULE_decname = 13;
AmmParser.RULE_constdeclaration = 14;
AmmParser.RULE_letdeclaration = 15;
AmmParser.RULE_assignments = 16;
AmmParser.RULE_assignables = 17;
AmmParser.RULE_objectliterals = 18;
AmmParser.RULE_arrayliteral = 19;
AmmParser.RULE_typeliteral = 20;
AmmParser.RULE_mapliteral = 21;
AmmParser.RULE_mapline = 22;
AmmParser.RULE_assignablelist = 23;
AmmParser.RULE_calllist = 24;
AmmParser.RULE_calls = 25;
AmmParser.RULE_emits = 26;
AmmParser.RULE_constants = 27;
AmmParser.RULE_events = 28;
AmmParser.RULE_handlers = 29;

function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ModuleContext.prototype.types = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypesContext);
    } else {
        return this.getTypedRuleContext(TypesContext,i);
    }
};

ModuleContext.prototype.constdeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstdeclarationContext);
    } else {
        return this.getTypedRuleContext(ConstdeclarationContext,i);
    }
};

ModuleContext.prototype.events = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EventsContext);
    } else {
        return this.getTypedRuleContext(EventsContext,i);
    }
};

ModuleContext.prototype.handlers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HandlersContext);
    } else {
        return this.getTypedRuleContext(HandlersContext,i);
    }
};

ModuleContext.prototype.EOF = function() {
    return this.getToken(AmmParser.EOF, 0);
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitModule(this);
	}
};




AmmParser.ModuleContext = ModuleContext;

AmmParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, AmmParser.RULE_module);
    var _la = 0; // Token type
    try {
        this.state = 110;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case AmmParser.TYPE:
        case AmmParser.EVENT:
        case AmmParser.ON:
        case AmmParser.CONST:
        case AmmParser.NEWLINE:
        case AmmParser.WS:
            this.enterOuterAlt(localctx, 1);
            this.state = 63;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 60;
                    this.blank(); 
                }
                this.state = 65;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            this.state = 74;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 72;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case AmmParser.TYPE:
                        this.state = 66;
                        this.types();
                        break;
                    case AmmParser.NEWLINE:
                    case AmmParser.WS:
                        this.state = 68; 
                        this._errHandler.sync(this);
                        var _alt = 1;
                        do {
                        	switch (_alt) {
                        	case 1:
                        		this.state = 67;
                        		this.blank();
                        		break;
                        	default:
                        		throw new antlr4.error.NoViableAltException(this);
                        	}
                        	this.state = 70; 
                        	this._errHandler.sync(this);
                        	_alt = this._interp.adaptivePredict(this._input,1, this._ctx);
                        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 76;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
            }

            this.state = 85;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 83;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case AmmParser.CONST:
                        this.state = 77;
                        this.constdeclaration();
                        break;
                    case AmmParser.NEWLINE:
                    case AmmParser.WS:
                        this.state = 79; 
                        this._errHandler.sync(this);
                        var _alt = 1;
                        do {
                        	switch (_alt) {
                        	case 1:
                        		this.state = 78;
                        		this.blank();
                        		break;
                        	default:
                        		throw new antlr4.error.NoViableAltException(this);
                        	}
                        	this.state = 81; 
                        	this._errHandler.sync(this);
                        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
                        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 87;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
            }

            this.state = 96;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 94;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case AmmParser.EVENT:
                        this.state = 88;
                        this.events();
                        break;
                    case AmmParser.NEWLINE:
                    case AmmParser.WS:
                        this.state = 90; 
                        this._errHandler.sync(this);
                        var _alt = 1;
                        do {
                        	switch (_alt) {
                        	case 1:
                        		this.state = 89;
                        		this.blank();
                        		break;
                        	default:
                        		throw new antlr4.error.NoViableAltException(this);
                        	}
                        	this.state = 92; 
                        	this._errHandler.sync(this);
                        	_alt = this._interp.adaptivePredict(this._input,7, this._ctx);
                        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 98;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
            }

            this.state = 105; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 105;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case AmmParser.ON:
                    this.state = 99;
                    this.handlers();
                    break;
                case AmmParser.NEWLINE:
                case AmmParser.WS:
                    this.state = 101; 
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                    	switch (_alt) {
                    	case 1:
                    		this.state = 100;
                    		this.blank();
                    		break;
                    	default:
                    		throw new antlr4.error.NoViableAltException(this);
                    	}
                    	this.state = 103; 
                    	this._errHandler.sync(this);
                    	_alt = this._interp.adaptivePredict(this._input,10, this._ctx);
                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 107; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AmmParser.ON) | (1 << AmmParser.NEWLINE) | (1 << AmmParser.WS))) !== 0));
            break;
        case AmmParser.EOF:
            this.enterOuterAlt(localctx, 2);
            this.state = 109;
            this.match(AmmParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_blank;
    return this;
}

BlankContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankContext.prototype.constructor = BlankContext;

BlankContext.prototype.WS = function() {
    return this.getToken(AmmParser.WS, 0);
};

BlankContext.prototype.NEWLINE = function() {
    return this.getToken(AmmParser.NEWLINE, 0);
};

BlankContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterBlank(this);
	}
};

BlankContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitBlank(this);
	}
};




AmmParser.BlankContext = BlankContext;

AmmParser.prototype.blank = function() {

    var localctx = new BlankContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, AmmParser.RULE_blank);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 112;
        _la = this._input.LA(1);
        if(!(_la===AmmParser.NEWLINE || _la===AmmParser.WS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_types;
    return this;
}

TypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypesContext.prototype.constructor = TypesContext;

TypesContext.prototype.TYPE = function() {
    return this.getToken(AmmParser.TYPE, 0);
};

TypesContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

TypesContext.prototype.typebody = function() {
    return this.getTypedRuleContext(TypebodyContext,0);
};

TypesContext.prototype.EQUALS = function() {
    return this.getToken(AmmParser.EQUALS, 0);
};

TypesContext.prototype.othertype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OthertypeContext);
    } else {
        return this.getTypedRuleContext(OthertypeContext,i);
    }
};

TypesContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypesContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

TypesContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.OR);
    } else {
        return this.getToken(AmmParser.OR, i);
    }
};


TypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypes(this);
	}
};

TypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypes(this);
	}
};




AmmParser.TypesContext = TypesContext;

AmmParser.prototype.types = function() {

    var localctx = new TypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, AmmParser.RULE_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 114;
        this.match(AmmParser.TYPE);
        this.state = 116; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 115;
            this.blank();
            this.state = 118; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
        this.state = 120;
        this.typename();
        this.state = 124;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 121;
                this.blank(); 
            }
            this.state = 126;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        }

        this.state = 128;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===AmmParser.OPENGENERIC) {
            this.state = 127;
            this.typegenerics();
        }

        this.state = 131; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 130;
            this.blank();
            this.state = 133; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
        this.state = 163;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case AmmParser.OPENBODY:
            this.state = 135;
            this.typebody();
            break;
        case AmmParser.EQUALS:
            this.state = 136;
            this.match(AmmParser.EQUALS);
            this.state = 140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 137;
                this.blank();
                this.state = 142;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 143;
            this.othertype();
            this.state = 160;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 147;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                        this.state = 144;
                        this.blank();
                        this.state = 149;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 150;
                    this.match(AmmParser.OR);
                    this.state = 154;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                        this.state = 151;
                        this.blank();
                        this.state = 156;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 157;
                    this.othertype(); 
                }
                this.state = 162;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OthertypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_othertype;
    return this;
}

OthertypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OthertypeContext.prototype.constructor = OthertypeContext;

OthertypeContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

OthertypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

OthertypeContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

OthertypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterOthertype(this);
	}
};

OthertypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitOthertype(this);
	}
};




AmmParser.OthertypeContext = OthertypeContext;

AmmParser.prototype.othertype = function() {

    var localctx = new OthertypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, AmmParser.RULE_othertype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 165;
        this.typename();
        this.state = 169;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 166;
                this.blank(); 
            }
            this.state = 171;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
        }

        this.state = 173;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===AmmParser.OPENGENERIC) {
            this.state = 172;
            this.typegenerics();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_typename;
    return this;
}

TypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypenameContext.prototype.constructor = TypenameContext;

TypenameContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

TypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypename(this);
	}
};

TypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypename(this);
	}
};




AmmParser.TypenameContext = TypenameContext;

AmmParser.prototype.typename = function() {

    var localctx = new TypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, AmmParser.RULE_typename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 175;
        this.match(AmmParser.VARNAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypegenericsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_typegenerics;
    return this;
}

TypegenericsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypegenericsContext.prototype.constructor = TypegenericsContext;

TypegenericsContext.prototype.OPENGENERIC = function() {
    return this.getToken(AmmParser.OPENGENERIC, 0);
};

TypegenericsContext.prototype.fulltypename = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FulltypenameContext);
    } else {
        return this.getTypedRuleContext(FulltypenameContext,i);
    }
};

TypegenericsContext.prototype.CLOSEGENERIC = function() {
    return this.getToken(AmmParser.CLOSEGENERIC, 0);
};

TypegenericsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypegenericsContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.SEP);
    } else {
        return this.getToken(AmmParser.SEP, i);
    }
};


TypegenericsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypegenerics(this);
	}
};

TypegenericsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypegenerics(this);
	}
};




AmmParser.TypegenericsContext = TypegenericsContext;

AmmParser.prototype.typegenerics = function() {

    var localctx = new TypegenericsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, AmmParser.RULE_typegenerics);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 177;
        this.match(AmmParser.OPENGENERIC);
        this.state = 181;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 178;
            this.blank();
            this.state = 183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 184;
        this.fulltypename();
        this.state = 188;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 185;
            this.blank();
            this.state = 190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 207;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.SEP) {
            this.state = 191;
            this.match(AmmParser.SEP);
            this.state = 195;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 192;
                this.blank();
                this.state = 197;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 198;
            this.fulltypename();
            this.state = 202;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 199;
                this.blank();
                this.state = 204;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 209;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 210;
        this.match(AmmParser.CLOSEGENERIC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FulltypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_fulltypename;
    return this;
}

FulltypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FulltypenameContext.prototype.constructor = FulltypenameContext;

FulltypenameContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

FulltypenameContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FulltypenameContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

FulltypenameContext.prototype.VOID = function() {
    return this.getToken(AmmParser.VOID, 0);
};

FulltypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterFulltypename(this);
	}
};

FulltypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitFulltypename(this);
	}
};




AmmParser.FulltypenameContext = FulltypenameContext;

AmmParser.prototype.fulltypename = function() {

    var localctx = new FulltypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, AmmParser.RULE_fulltypename);
    var _la = 0; // Token type
    try {
        this.state = 223;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case AmmParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 212;
            this.typename();
            this.state = 216;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 213;
                    this.blank(); 
                }
                this.state = 218;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
            }

            this.state = 220;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===AmmParser.OPENGENERIC) {
                this.state = 219;
                this.typegenerics();
            }

            break;
        case AmmParser.VOID:
            this.enterOuterAlt(localctx, 2);
            this.state = 222;
            this.match(AmmParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypebodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_typebody;
    return this;
}

TypebodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypebodyContext.prototype.constructor = TypebodyContext;

TypebodyContext.prototype.OPENBODY = function() {
    return this.getToken(AmmParser.OPENBODY, 0);
};

TypebodyContext.prototype.CLOSEBODY = function() {
    return this.getToken(AmmParser.CLOSEBODY, 0);
};

TypebodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypebodyContext.prototype.typeline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypelineContext);
    } else {
        return this.getTypedRuleContext(TypelineContext,i);
    }
};

TypebodyContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.WS);
    } else {
        return this.getToken(AmmParser.WS, i);
    }
};


TypebodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypebody(this);
	}
};

TypebodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypebody(this);
	}
};




AmmParser.TypebodyContext = TypebodyContext;

AmmParser.prototype.typebody = function() {

    var localctx = new TypebodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, AmmParser.RULE_typebody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 225;
        this.match(AmmParser.OPENBODY);
        this.state = 229;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 226;
                this.blank(); 
            }
            this.state = 231;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
        }

        this.state = 239; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 235;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(_la===AmmParser.WS) {
        		    this.state = 232;
        		    this.match(AmmParser.WS);
        		    this.state = 237;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		this.state = 238;
        		this.typeline();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 241; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,35, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 244;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 243;
            this.blank();
        }

        this.state = 246;
        this.match(AmmParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_typeline;
    return this;
}

TypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypelineContext.prototype.constructor = TypelineContext;

TypelineContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

TypelineContext.prototype.TYPESEP = function() {
    return this.getToken(AmmParser.TYPESEP, 0);
};

TypelineContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

TypelineContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.NEWLINE);
    } else {
        return this.getToken(AmmParser.NEWLINE, i);
    }
};


TypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypeline(this);
	}
};

TypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypeline(this);
	}
};




AmmParser.TypelineContext = TypelineContext;

AmmParser.prototype.typeline = function() {

    var localctx = new TypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, AmmParser.RULE_typeline);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 248;
        this.match(AmmParser.VARNAME);
        this.state = 249;
        this.match(AmmParser.TYPESEP);
        this.state = 250;
        this.typename();
        this.state = 254;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 251;
                this.match(AmmParser.NEWLINE); 
            }
            this.state = 256;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.FN = function() {
    return this.getToken(AmmParser.FN, 0);
};

FunctionsContext.prototype.OPENARGS = function() {
    return this.getToken(AmmParser.OPENARGS, 0);
};

FunctionsContext.prototype.CLOSEARGS = function() {
    return this.getToken(AmmParser.CLOSEARGS, 0);
};

FunctionsContext.prototype.TYPESEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.TYPESEP);
    } else {
        return this.getToken(AmmParser.TYPESEP, i);
    }
};


FunctionsContext.prototype.VOID = function() {
    return this.getToken(AmmParser.VOID, 0);
};

FunctionsContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

FunctionsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctionsContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

FunctionsContext.prototype.fulltypename = function() {
    return this.getTypedRuleContext(FulltypenameContext,0);
};

FunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterFunctions(this);
	}
};

FunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitFunctions(this);
	}
};




AmmParser.FunctionsContext = FunctionsContext;

AmmParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, AmmParser.RULE_functions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 257;
        this.match(AmmParser.FN);
        this.state = 259; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 258;
            this.blank();
            this.state = 261; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
        this.state = 263;
        this.match(AmmParser.OPENARGS);
        this.state = 267;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===AmmParser.VARNAME) {
            this.state = 264;
            this.match(AmmParser.VARNAME);
            this.state = 265;
            this.match(AmmParser.TYPESEP);
            this.state = 266;
            this.fulltypename();
        }

        this.state = 269;
        this.match(AmmParser.CLOSEARGS);
        this.state = 273;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 270;
            this.blank();
            this.state = 275;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 276;
        this.match(AmmParser.TYPESEP);
        this.state = 280;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 277;
            this.blank();
            this.state = 282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 283;
        this.match(AmmParser.VOID);
        this.state = 287;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 284;
            this.blank();
            this.state = 289;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 290;
        this.functionbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_functionbody;
    return this;
}

FunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionbodyContext.prototype.constructor = FunctionbodyContext;

FunctionbodyContext.prototype.OPENBODY = function() {
    return this.getToken(AmmParser.OPENBODY, 0);
};

FunctionbodyContext.prototype.CLOSEBODY = function() {
    return this.getToken(AmmParser.CLOSEBODY, 0);
};

FunctionbodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctionbodyContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

FunctionbodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterFunctionbody(this);
	}
};

FunctionbodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitFunctionbody(this);
	}
};




AmmParser.FunctionbodyContext = FunctionbodyContext;

AmmParser.prototype.functionbody = function() {

    var localctx = new FunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, AmmParser.RULE_functionbody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        this.match(AmmParser.OPENBODY);
        this.state = 296;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 293;
            this.blank();
            this.state = 298;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 300; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 299;
            this.statements();
            this.state = 302; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AmmParser.CONST) | (1 << AmmParser.LET) | (1 << AmmParser.EMIT) | (1 << AmmParser.VARNAME))) !== 0));
        this.state = 307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 304;
            this.blank();
            this.state = 309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 310;
        this.match(AmmParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};

StatementsContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

StatementsContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

StatementsContext.prototype.emits = function() {
    return this.getTypedRuleContext(EmitsContext,0);
};

StatementsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitStatements(this);
	}
};




AmmParser.StatementsContext = StatementsContext;

AmmParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, AmmParser.RULE_statements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 316;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.state = 312;
            this.declarations();
            break;

        case 2:
            this.state = 313;
            this.assignments();
            break;

        case 3:
            this.state = 314;
            this.calls();
            break;

        case 4:
            this.state = 315;
            this.emits();
            break;

        }
        this.state = 319; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 318;
        		this.blank();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 321; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,47, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;

DeclarationsContext.prototype.constdeclaration = function() {
    return this.getTypedRuleContext(ConstdeclarationContext,0);
};

DeclarationsContext.prototype.letdeclaration = function() {
    return this.getTypedRuleContext(LetdeclarationContext,0);
};

DeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterDeclarations(this);
	}
};

DeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitDeclarations(this);
	}
};




AmmParser.DeclarationsContext = DeclarationsContext;

AmmParser.prototype.declarations = function() {

    var localctx = new DeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, AmmParser.RULE_declarations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case AmmParser.CONST:
            this.state = 323;
            this.constdeclaration();
            break;
        case AmmParser.LET:
            this.state = 324;
            this.letdeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_decname;
    return this;
}

DecnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecnameContext.prototype.constructor = DecnameContext;

DecnameContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

DecnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterDecname(this);
	}
};

DecnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitDecname(this);
	}
};




AmmParser.DecnameContext = DecnameContext;

AmmParser.prototype.decname = function() {

    var localctx = new DecnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, AmmParser.RULE_decname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        this.match(AmmParser.VARNAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_constdeclaration;
    return this;
}

ConstdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstdeclarationContext.prototype.constructor = ConstdeclarationContext;

ConstdeclarationContext.prototype.CONST = function() {
    return this.getToken(AmmParser.CONST, 0);
};

ConstdeclarationContext.prototype.decname = function() {
    return this.getTypedRuleContext(DecnameContext,0);
};

ConstdeclarationContext.prototype.TYPESEP = function() {
    return this.getToken(AmmParser.TYPESEP, 0);
};

ConstdeclarationContext.prototype.fulltypename = function() {
    return this.getTypedRuleContext(FulltypenameContext,0);
};

ConstdeclarationContext.prototype.EQUALS = function() {
    return this.getToken(AmmParser.EQUALS, 0);
};

ConstdeclarationContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

ConstdeclarationContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ConstdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterConstdeclaration(this);
	}
};

ConstdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitConstdeclaration(this);
	}
};




AmmParser.ConstdeclarationContext = ConstdeclarationContext;

AmmParser.prototype.constdeclaration = function() {

    var localctx = new ConstdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, AmmParser.RULE_constdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.match(AmmParser.CONST);
        this.state = 333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 330;
            this.blank();
            this.state = 335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 336;
        this.decname();
        this.state = 340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 337;
            this.blank();
            this.state = 342;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 343;
        this.match(AmmParser.TYPESEP);
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 344;
            this.blank();
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 350;
        this.fulltypename();
        this.state = 354;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 351;
            this.blank();
            this.state = 356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 357;
        this.match(AmmParser.EQUALS);
        this.state = 361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 358;
            this.blank();
            this.state = 363;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 364;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LetdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_letdeclaration;
    return this;
}

LetdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetdeclarationContext.prototype.constructor = LetdeclarationContext;

LetdeclarationContext.prototype.LET = function() {
    return this.getToken(AmmParser.LET, 0);
};

LetdeclarationContext.prototype.decname = function() {
    return this.getTypedRuleContext(DecnameContext,0);
};

LetdeclarationContext.prototype.TYPESEP = function() {
    return this.getToken(AmmParser.TYPESEP, 0);
};

LetdeclarationContext.prototype.fulltypename = function() {
    return this.getTypedRuleContext(FulltypenameContext,0);
};

LetdeclarationContext.prototype.EQUALS = function() {
    return this.getToken(AmmParser.EQUALS, 0);
};

LetdeclarationContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

LetdeclarationContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

LetdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterLetdeclaration(this);
	}
};

LetdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitLetdeclaration(this);
	}
};




AmmParser.LetdeclarationContext = LetdeclarationContext;

AmmParser.prototype.letdeclaration = function() {

    var localctx = new LetdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, AmmParser.RULE_letdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this.match(AmmParser.LET);
        this.state = 370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 367;
            this.blank();
            this.state = 372;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 373;
        this.decname();
        this.state = 377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 374;
            this.blank();
            this.state = 379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 380;
        this.match(AmmParser.TYPESEP);
        this.state = 384;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 381;
            this.blank();
            this.state = 386;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 387;
        this.fulltypename();
        this.state = 391;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 388;
            this.blank();
            this.state = 393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 394;
        this.match(AmmParser.EQUALS);
        this.state = 398;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 395;
            this.blank();
            this.state = 400;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 401;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_assignments;
    return this;
}

AssignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentsContext.prototype.constructor = AssignmentsContext;

AssignmentsContext.prototype.decname = function() {
    return this.getTypedRuleContext(DecnameContext,0);
};

AssignmentsContext.prototype.EQUALS = function() {
    return this.getToken(AmmParser.EQUALS, 0);
};

AssignmentsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

AssignmentsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

AssignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterAssignments(this);
	}
};

AssignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitAssignments(this);
	}
};




AmmParser.AssignmentsContext = AssignmentsContext;

AmmParser.prototype.assignments = function() {

    var localctx = new AssignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, AmmParser.RULE_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        this.decname();
        this.state = 407;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 404;
            this.blank();
            this.state = 409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 410;
        this.match(AmmParser.EQUALS);
        this.state = 414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 411;
            this.blank();
            this.state = 416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 417;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_assignables;
    return this;
}

AssignablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignablesContext.prototype.constructor = AssignablesContext;

AssignablesContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

AssignablesContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

AssignablesContext.prototype.constants = function() {
    return this.getTypedRuleContext(ConstantsContext,0);
};

AssignablesContext.prototype.objectliterals = function() {
    return this.getTypedRuleContext(ObjectliteralsContext,0);
};

AssignablesContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

AssignablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterAssignables(this);
	}
};

AssignablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitAssignables(this);
	}
};




AmmParser.AssignablesContext = AssignablesContext;

AmmParser.prototype.assignables = function() {

    var localctx = new AssignablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, AmmParser.RULE_assignables);
    try {
        this.state = 424;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 419;
            this.functions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 420;
            this.calls();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 421;
            this.constants();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 422;
            this.objectliterals();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 423;
            this.match(AmmParser.VARNAME);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectliteralsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_objectliterals;
    return this;
}

ObjectliteralsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectliteralsContext.prototype.constructor = ObjectliteralsContext;

ObjectliteralsContext.prototype.NEW = function() {
    return this.getToken(AmmParser.NEW, 0);
};

ObjectliteralsContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

ObjectliteralsContext.prototype.arrayliteral = function() {
    return this.getTypedRuleContext(ArrayliteralContext,0);
};

ObjectliteralsContext.prototype.typeliteral = function() {
    return this.getTypedRuleContext(TypeliteralContext,0);
};

ObjectliteralsContext.prototype.mapliteral = function() {
    return this.getTypedRuleContext(MapliteralContext,0);
};

ObjectliteralsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.WS);
    } else {
        return this.getToken(AmmParser.WS, i);
    }
};


ObjectliteralsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterObjectliterals(this);
	}
};

ObjectliteralsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitObjectliterals(this);
	}
};




AmmParser.ObjectliteralsContext = ObjectliteralsContext;

AmmParser.prototype.objectliterals = function() {

    var localctx = new ObjectliteralsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, AmmParser.RULE_objectliterals);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 426;
        this.match(AmmParser.NEW);
        this.state = 430;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.WS) {
            this.state = 427;
            this.match(AmmParser.WS);
            this.state = 432;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 433;
        this.othertype();
        this.state = 437;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.WS) {
            this.state = 434;
            this.match(AmmParser.WS);
            this.state = 439;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 443;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.state = 440;
            this.arrayliteral();
            break;

        case 2:
            this.state = 441;
            this.typeliteral();
            break;

        case 3:
            this.state = 442;
            this.mapliteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_arrayliteral;
    return this;
}

ArrayliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayliteralContext.prototype.constructor = ArrayliteralContext;

ArrayliteralContext.prototype.OPENARRAY = function() {
    return this.getToken(AmmParser.OPENARRAY, 0);
};

ArrayliteralContext.prototype.assignablelist = function() {
    return this.getTypedRuleContext(AssignablelistContext,0);
};

ArrayliteralContext.prototype.CLOSEARRAY = function() {
    return this.getToken(AmmParser.CLOSEARRAY, 0);
};

ArrayliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ArrayliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterArrayliteral(this);
	}
};

ArrayliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitArrayliteral(this);
	}
};




AmmParser.ArrayliteralContext = ArrayliteralContext;

AmmParser.prototype.arrayliteral = function() {

    var localctx = new ArrayliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, AmmParser.RULE_arrayliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 445;
        this.match(AmmParser.OPENARRAY);
        this.state = 449;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 446;
                this.blank(); 
            }
            this.state = 451;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

        this.state = 452;
        this.assignablelist();
        this.state = 456;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 453;
            this.blank();
            this.state = 458;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 459;
        this.match(AmmParser.CLOSEARRAY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_typeliteral;
    return this;
}

TypeliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeliteralContext.prototype.constructor = TypeliteralContext;

TypeliteralContext.prototype.OPENBODY = function() {
    return this.getToken(AmmParser.OPENBODY, 0);
};

TypeliteralContext.prototype.CLOSEBODY = function() {
    return this.getToken(AmmParser.CLOSEBODY, 0);
};

TypeliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypeliteralContext.prototype.assignments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentsContext);
    } else {
        return this.getTypedRuleContext(AssignmentsContext,i);
    }
};

TypeliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypeliteral(this);
	}
};

TypeliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypeliteral(this);
	}
};




AmmParser.TypeliteralContext = TypeliteralContext;

AmmParser.prototype.typeliteral = function() {

    var localctx = new TypeliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, AmmParser.RULE_typeliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 461;
        this.match(AmmParser.OPENBODY);
        this.state = 465;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 462;
            this.blank();
            this.state = 467;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 474; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 468;
            this.assignments();
            this.state = 470; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 469;
                this.blank();
                this.state = 472; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
            this.state = 476; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.VARNAME);
        this.state = 478;
        this.match(AmmParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_mapliteral;
    return this;
}

MapliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapliteralContext.prototype.constructor = MapliteralContext;

MapliteralContext.prototype.OPENBODY = function() {
    return this.getToken(AmmParser.OPENBODY, 0);
};

MapliteralContext.prototype.CLOSEBODY = function() {
    return this.getToken(AmmParser.CLOSEBODY, 0);
};

MapliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

MapliteralContext.prototype.mapline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MaplineContext);
    } else {
        return this.getTypedRuleContext(MaplineContext,i);
    }
};

MapliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterMapliteral(this);
	}
};

MapliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitMapliteral(this);
	}
};




AmmParser.MapliteralContext = MapliteralContext;

AmmParser.prototype.mapliteral = function() {

    var localctx = new MapliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, AmmParser.RULE_mapliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480;
        this.match(AmmParser.OPENBODY);
        this.state = 484;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 481;
            this.blank();
            this.state = 486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 495;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AmmParser.FN) | (1 << AmmParser.BOOLCONSTANT) | (1 << AmmParser.NEW) | (1 << AmmParser.STRINGCONSTANT) | (1 << AmmParser.NUMBERCONSTANT) | (1 << AmmParser.VARNAME))) !== 0)) {
            this.state = 487;
            this.mapline();
            this.state = 489; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 488;
                this.blank();
                this.state = 491; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
            this.state = 497;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 498;
        this.match(AmmParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaplineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_mapline;
    return this;
}

MaplineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaplineContext.prototype.constructor = MaplineContext;

MaplineContext.prototype.assignables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignablesContext);
    } else {
        return this.getTypedRuleContext(AssignablesContext,i);
    }
};

MaplineContext.prototype.TYPESEP = function() {
    return this.getToken(AmmParser.TYPESEP, 0);
};

MaplineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.WS);
    } else {
        return this.getToken(AmmParser.WS, i);
    }
};


MaplineContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterMapline(this);
	}
};

MaplineContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitMapline(this);
	}
};




AmmParser.MaplineContext = MaplineContext;

AmmParser.prototype.mapline = function() {

    var localctx = new MaplineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, AmmParser.RULE_mapline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this.assignables();
        this.state = 504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.WS) {
            this.state = 501;
            this.match(AmmParser.WS);
            this.state = 506;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 507;
        this.match(AmmParser.TYPESEP);
        this.state = 511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.WS) {
            this.state = 508;
            this.match(AmmParser.WS);
            this.state = 513;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 514;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignablelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_assignablelist;
    return this;
}

AssignablelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignablelistContext.prototype.constructor = AssignablelistContext;

AssignablelistContext.prototype.assignables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignablesContext);
    } else {
        return this.getTypedRuleContext(AssignablesContext,i);
    }
};

AssignablelistContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

AssignablelistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.SEP);
    } else {
        return this.getToken(AmmParser.SEP, i);
    }
};


AssignablelistContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterAssignablelist(this);
	}
};

AssignablelistContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitAssignablelist(this);
	}
};




AmmParser.AssignablelistContext = AssignablelistContext;

AmmParser.prototype.assignablelist = function() {

    var localctx = new AssignablelistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, AmmParser.RULE_assignablelist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 516;
            this.blank();
            this.state = 521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 522;
        this.assignables();
        this.state = 533;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.SEP) {
            this.state = 523;
            this.match(AmmParser.SEP);
            this.state = 527;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 524;
                this.blank();
                this.state = 529;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 530;
            this.assignables();
            this.state = 535;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 539;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 536;
                this.blank(); 
            }
            this.state = 541;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CalllistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_calllist;
    return this;
}

CalllistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalllistContext.prototype.constructor = CalllistContext;

CalllistContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.VARNAME);
    } else {
        return this.getToken(AmmParser.VARNAME, i);
    }
};


CalllistContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

CalllistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.SEP);
    } else {
        return this.getToken(AmmParser.SEP, i);
    }
};


CalllistContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterCalllist(this);
	}
};

CalllistContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitCalllist(this);
	}
};




AmmParser.CalllistContext = CalllistContext;

AmmParser.prototype.calllist = function() {

    var localctx = new CalllistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, AmmParser.RULE_calllist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 542;
            this.blank();
            this.state = 547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 548;
        this.match(AmmParser.VARNAME);
        this.state = 559;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.SEP) {
            this.state = 549;
            this.match(AmmParser.SEP);
            this.state = 553;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 550;
                this.blank();
                this.state = 555;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 556;
            this.match(AmmParser.VARNAME);
            this.state = 561;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 565;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 562;
            this.blank();
            this.state = 567;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_calls;
    return this;
}

CallsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallsContext.prototype.constructor = CallsContext;

CallsContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

CallsContext.prototype.OPENARGS = function() {
    return this.getToken(AmmParser.OPENARGS, 0);
};

CallsContext.prototype.CLOSEARGS = function() {
    return this.getToken(AmmParser.CLOSEARGS, 0);
};

CallsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.WS);
    } else {
        return this.getToken(AmmParser.WS, i);
    }
};


CallsContext.prototype.calllist = function() {
    return this.getTypedRuleContext(CalllistContext,0);
};

CallsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterCalls(this);
	}
};

CallsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitCalls(this);
	}
};




AmmParser.CallsContext = CallsContext;

AmmParser.prototype.calls = function() {

    var localctx = new CallsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, AmmParser.RULE_calls);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 568;
        this.match(AmmParser.VARNAME);
        this.state = 572;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.WS) {
            this.state = 569;
            this.match(AmmParser.WS);
            this.state = 574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 575;
        this.match(AmmParser.OPENARGS);
        this.state = 577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AmmParser.NEWLINE) | (1 << AmmParser.WS) | (1 << AmmParser.VARNAME))) !== 0)) {
            this.state = 576;
            this.calllist();
        }

        this.state = 579;
        this.match(AmmParser.CLOSEARGS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_emits;
    return this;
}

EmitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmitsContext.prototype.constructor = EmitsContext;

EmitsContext.prototype.EMIT = function() {
    return this.getToken(AmmParser.EMIT, 0);
};

EmitsContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.VARNAME);
    } else {
        return this.getToken(AmmParser.VARNAME, i);
    }
};


EmitsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

EmitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterEmits(this);
	}
};

EmitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitEmits(this);
	}
};




AmmParser.EmitsContext = EmitsContext;

AmmParser.prototype.emits = function() {

    var localctx = new EmitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, AmmParser.RULE_emits);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 581;
        this.match(AmmParser.EMIT);
        this.state = 585;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 582;
            this.blank();
            this.state = 587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 588;
        this.match(AmmParser.VARNAME);
        this.state = 596;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        if(la_===1) {
            this.state = 592;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 589;
                this.blank();
                this.state = 594;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 595;
            this.match(AmmParser.VARNAME);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_constants;
    return this;
}

ConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantsContext.prototype.constructor = ConstantsContext;

ConstantsContext.prototype.NUMBERCONSTANT = function() {
    return this.getToken(AmmParser.NUMBERCONSTANT, 0);
};

ConstantsContext.prototype.STRINGCONSTANT = function() {
    return this.getToken(AmmParser.STRINGCONSTANT, 0);
};

ConstantsContext.prototype.BOOLCONSTANT = function() {
    return this.getToken(AmmParser.BOOLCONSTANT, 0);
};

ConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterConstants(this);
	}
};

ConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitConstants(this);
	}
};




AmmParser.ConstantsContext = ConstantsContext;

AmmParser.prototype.constants = function() {

    var localctx = new ConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, AmmParser.RULE_constants);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AmmParser.BOOLCONSTANT) | (1 << AmmParser.STRINGCONSTANT) | (1 << AmmParser.NUMBERCONSTANT))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_events;
    return this;
}

EventsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventsContext.prototype.constructor = EventsContext;

EventsContext.prototype.EVENT = function() {
    return this.getToken(AmmParser.EVENT, 0);
};

EventsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

EventsContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

EventsContext.prototype.TYPESEP = function() {
    return this.getToken(AmmParser.TYPESEP, 0);
};

EventsContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

EventsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterEvents(this);
	}
};

EventsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitEvents(this);
	}
};




AmmParser.EventsContext = EventsContext;

AmmParser.prototype.events = function() {

    var localctx = new EventsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, AmmParser.RULE_events);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600;
        this.match(AmmParser.EVENT);
        this.state = 601;
        this.blank();
        this.state = 602;
        this.match(AmmParser.VARNAME);
        this.state = 606;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 603;
            this.blank();
            this.state = 608;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 609;
        this.match(AmmParser.TYPESEP);
        this.state = 610;
        this.typename();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandlersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_handlers;
    return this;
}

HandlersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlersContext.prototype.constructor = HandlersContext;

HandlersContext.prototype.ON = function() {
    return this.getToken(AmmParser.ON, 0);
};

HandlersContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

HandlersContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

HandlersContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

HandlersContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterHandlers(this);
	}
};

HandlersContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitHandlers(this);
	}
};




AmmParser.HandlersContext = HandlersContext;

AmmParser.prototype.handlers = function() {

    var localctx = new HandlersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, AmmParser.RULE_handlers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 612;
        this.match(AmmParser.ON);
        this.state = 614; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 613;
            this.blank();
            this.state = 616; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
        this.state = 618;
        this.match(AmmParser.VARNAME);
        this.state = 620; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 619;
            this.blank();
            this.state = 622; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
        this.state = 624;
        this.functions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.AmmParser = AmmParser;

},{"./AmmListener":2,"antlr4/index":76}],4:[function(require,module,exports){
const fs = require('fs')

const { InputStream, CommonTokenStream, } = require('antlr4')

const { AmmLexer, AmmParser, } = require('./')

const Ast = {
  fromString: (str) => {
    const inputStream = new InputStream(str)
    const langLexer = new AmmLexer(inputStream)
    const commonTokenStream = new CommonTokenStream(langLexer)
    const langParser = new AmmParser(commonTokenStream)

    return langParser.module()
  },

  fromFile: (filename) => {
    return Ast.fromString(fs.readFileSync(filename, { encoding: 'utf8', }))
  },
}

module.exports = Ast

},{"./":5,"antlr4":76,"fs":82}],5:[function(require,module,exports){
module.exports = {
  AmmLexer: require('./AmmLexer').AmmLexer,
  AmmParser: require('./AmmParser').AmmParser,
}

},{"./AmmLexer":1,"./AmmParser":3}],6:[function(require,module,exports){
const Ast = require('../amm/Ast')

const callToJsText = (call) => {
  const args = call.calllist() ? call.calllist().VARNAME().map(v => v.getText()).join(', ') : ""
  return `r.${call.VARNAME().getText()}(${args})`
}

const functionbodyToJsText = (fnbody, indent) => {
  let outText = ""
  for (const statement of fnbody.statements()) {
    outText += indent + "  " // For legibility of the output
    if (statement.declarations()) {
      if (statement.declarations().constdeclaration()) {
        const dec = statement.declarations().constdeclaration()
        outText += `const ${dec.decname().getText()} = ${assignableToJsText(dec.assignables(), indent)}\n`
      } else if (statement.declarations().letdeclaration()) {
        const dec = statement.declarations().letdeclaration()
        outText += `let ${dec.decname().getText()} = ${assignableToJsText(dec.assignables(), indent)}\n`
      }
    } else if (statement.assignments()) {
      const assign = statement.assignments()
      outText += `${assign.decname().getText()} = ${assignableToJsText(assign.assignables(), indent)}\n`
    } else if (statement.calls()) {
      outText += `${callToJsText(statement.calls())}\n`
    } else if (statement.emits()) {
      const emit = statement.emits()
      const name = emit.VARNAME(0).getText()
      const arg = emit.VARNAME(1) ? emit.VARNAME(1).getText() : 'undefined'
      outText += `r.emit('${name}', ${arg})\n`
    }
  }
  return outText
}

const assignableToJsText = (assignable, indent) => {
  let outText = ""
  if (assignable.functions()) {
    const fn = assignable.functions()
    outText += '() => {\n' // All assignable functions/closures take no arguments
    outText += functionbodyToJsText(assignable.functions().functionbody(), indent + "  ")
    outText += indent + '  }' // End this closure
  } else if (assignable.calls()) {
    outText += callToJsText(assignable.calls())
  } else if (assignable.VARNAME()) {
    outText += assignable.VARNAME().getText()
  } else if (assignable.constants()) {
    outText += assignable.constants().getText()
  } else if (assignable.objectliterals()) {
    // TODO: Actually do this right once we figure out what we even want to do with object literals
    throw new Error('Object literals not yet implemented!')
  }
  return outText
}

const ammToJsText = (amm) => {
  let outFile = "const r = require('alan-js-runtime')\n"
  // Where we're going we don't need types, so skipping that entire section
  // First convert all of the global constants to javascript
  for (const globalConst of amm.constdeclaration()) {
    outFile +=
      `const ${globalConst.decname().getText()} = ${assignableToJsText(globalConst.assignables(), '')}\n`
  }
  // We can also skip the event declarations because they are lazily bound by EventEmitter
  // Now we convert the handlers to Javascript. This is the vast majority of the work
  for (const handler of amm.handlers()) {
    const eventVarName = handler.functions().VARNAME() ? handler.functions().VARNAME().getText() : ""
    outFile += `r.on('${handler.VARNAME().getText()}', (${eventVarName}) => {\n`
    outFile += functionbodyToJsText(handler.functions().functionbody(), '')
    outFile += '})\n' // End this handler
  }
  outFile += "r.emit('_start', undefined)\n" // Let's get it started in here
  return outFile
}

module.exports = (filename) => ammToJsText(Ast.fromFile(filename))
module.exports.ammTextToJs = (str) => ammToJsText(Ast.fromString(str))

},{"../amm/Ast":4}],7:[function(require,module,exports){
const stdlibs = require('./stdlibs.json')

const Ast = require('../lntoamm/Ast')
const Module = require('../lntoamm/Module')
const Scope = require('../lntoamm/Scope')
const opcodeScope = require('../lntoamm/opcodes').exportScope

module.exports = {
  loadStdModules: (modules) => {
    const stdAsts = Object.keys(stdlibs).map(n => ({
      name: n,
      ast: Ast.fromString(stdlibs[n]),
    }))
    // Load the rootScope first, all the others depend on it
    let rootModule
    stdAsts.forEach((moduleAst) => {
      if (moduleAst.name == 'root.ln') {
        rootModule = Module.populateModule('<root>', moduleAst.ast, opcodeScope)
        Module.getAllModules()['<root>'] = rootModule
      }
    })
    // Now load the remainig modules based on the root scope
    stdAsts.forEach((moduleAst) => {
      if (moduleAst.name != 'root.ln') {
        moduleAst.name = '@std/' + moduleAst.name.replace(/.ln$/, '')
        const stdModule = Module.populateModule(
          moduleAst.name,
          moduleAst.ast,
          rootModule.exportScope
        )
        Module.getAllModules()[moduleAst.name] = stdModule
      }
    })
  },
}

},{"../lntoamm/Ast":13,"../lntoamm/Module":25,"../lntoamm/Scope":27,"../lntoamm/opcodes":33,"./stdlibs.json":8}],8:[function(require,module,exports){
module.exports={"app.ln":"/**\n * @std/app - The entrypoint for CLI apps\n */\n\n// The `start` event with a signature like `event start` but has special meaning in the runtime\nexport start\n\n// The `stdout` event\nexport event stdout: string\n\n// `@std/app` has access to a special `stdoutp` opcode to trigger stdout writing\non stdout fn (out: string) = stdoutp(out)\n\n// The `print` function converts its input to a string, appends a newline, and sends it to `stdout`\nexport fn print(out: Stringifiable) {\n  emit stdout out.toString() + \"\\n\"\n}\n\n// The `exit` event\nexport event exit: int8\n\n// `@std/app` has access to a special `exitop` opcode to trigger the exit behavior\non exit fn (status: int8) = exitop(status)\n\n","root.ln":"/**\n * The root scope. These definitions are automatically available from every module.\n * These are almost entirely wrappers around runtime opcodes to provide a friendlier\n * name and using function dispatch based on input arguments to pick the correct opcode.\n */\n\n// TODO: See about making an export block scope so we don't have to write `export` so much\n\n// Special _ variable\nexport const _: void\n\n// Default Interfaces\nexport interface any {}\nexport interface Stringifiable {\n  toString(Stringifiable): string\n}\n\n// Type conversion functions\nexport fn toFloat64(n: int8) = i8f64(n)\nexport fn toFloat64(n: int16) = i16f64(n)\nexport fn toFloat64(n: int32) = i32f64(n)\nexport fn toFloat64(n: int64) = i64f64(n)\nexport fn toFloat64(n: float32) = f32f64(n)\nexport fn toFloat64(n: float64) = n\nexport fn toFloat64(n: string) = strf64(n)\nexport fn toFloat64(n: bool) = boolf64(n)\n\nexport fn toFloat32(n: int8) = i8f32(n)\nexport fn toFloat32(n: int16) = i16f32(n)\nexport fn toFloat32(n: int32) = i32f32(n)\nexport fn toFloat32(n: int64) = i64f32(n)\nexport fn toFloat32(n: float32) = n\nexport fn toFloat32(n: float64) = f64f32(n)\nexport fn toFloat32(n: string) = strf32(n)\nexport fn toFloat32(n: bool) = boolf32(n)\n\nexport fn toInt64(n: int8) = i8i64(n)\nexport fn toInt64(n: int16) = i16i64(n)\nexport fn toInt64(n: int32) = i32i64(n)\nexport fn toInt64(n: int64) = n\nexport fn toInt64(n: float32) = f32i64(n)\nexport fn toInt64(n: float64) = f64i64(n)\nexport fn toInt64(n: string) = stri64(n)\nexport fn toInt64(n: bool) = booli64(n)\n\nexport fn toInt32(n: int8) = i8i32(n)\nexport fn toInt32(n: int16) = i16i32(n)\nexport fn toInt32(n: int32) = n\nexport fn toInt32(n: int64) = i64i32(n)\nexport fn toInt32(n: float32) = f32i32(n)\nexport fn toInt32(n: float64) = f64i32(n)\nexport fn toInt32(n: string) = stri32(n)\nexport fn toInt32(n: bool) = booli32(n)\n\nexport fn toInt16(n: int8) = i8i16(n)\nexport fn toInt16(n: int16) = n\nexport fn toInt16(n: int32) = i32i16(n)\nexport fn toInt16(n: int64) = i64i16(n)\nexport fn toInt16(n: float32) = f32i16(n)\nexport fn toInt16(n: float64) = f64i16(n)\nexport fn toInt16(n: string) = stri16(n)\nexport fn toInt16(n: bool) = booli16(n)\n\nexport fn toInt8(n: int8) = n\nexport fn toInt8(n: int16) = i16i8(n)\nexport fn toInt8(n: int32) = i32i8(n)\nexport fn toInt8(n: int64) = i64i8(n)\nexport fn toInt8(n: float32) = f32i8(n)\nexport fn toInt8(n: float64) = f64i8(n)\nexport fn toInt8(n: string) = stri8(n)\nexport fn toInt8(n: bool) = booli8(n)\n\nexport fn toBool(n: int8) = i8bool(n)\nexport fn toBool(n: int16) = i16bool(n)\nexport fn toBool(n: int32) = i32bool(n)\nexport fn toBool(n: int64) = i64bool(n)\nexport fn toBool(n: float32) = f32bool(n)\nexport fn toBool(n: float64) = f64bool(n)\nexport fn toBool(n: string) = strbool(n)\nexport fn toBool(n: bool) = n\n\nexport fn toString(n: int8) = i8str(n)\nexport fn toString(n: int16) = i16str(n)\nexport fn toString(n: int32) = i32str(n)\nexport fn toString(n: int64) = i64str(n)\nexport fn toString(n: float32) = f32str(n)\nexport fn toString(n: float64) = f64str(n)\nexport fn toString(n: string) = n\nexport fn toString(n: bool) = boolstr(n)\n\n// Arithmetic functions\nexport fn add(a: int8, b: int8) = addi8(a, b)\nexport fn add(a: int16, b: int16) = addi16(a, b)\nexport fn add(a: int32, b: int32) = addi32(a, b)\nexport fn add(a: int64, b: int64) = addi64(a, b)\nexport fn add(a: float32, b: float32) = addf32(a, b)\nexport fn add(a: float64, b: float64) = addf64(a, b)\n\nexport fn sub(a: int8, b: int8) = subi8(a, b)\nexport fn sub(a: int16, b: int16) = subi16(a, b)\nexport fn sub(a: int32, b: int32) = subi32(a, b)\nexport fn sub(a: int64, b: int64) = subi64(a, b)\nexport fn sub(a: float32, b: float32) = subf32(a, b)\nexport fn sub(a: float64, b: float64) = subf64(a, b)\n\nexport fn negate(n: int8) = negi8(n)\nexport fn negate(n: int16) = negi16(n)\nexport fn negate(n: int32) = negi32(n)\nexport fn negate(n: int64) = negi64(n)\nexport fn negate(n: float32) = negf32(n)\nexport fn negate(n: float64) = negf64(n)\n\nexport fn mul(a: int8, b: int8) = muli8(a, b)\nexport fn mul(a: int16, b: int16) = muli16(a, b)\nexport fn mul(a: int32, b: int32) = muli32(a, b)\nexport fn mul(a: int64, b: int64) = muli64(a, b)\nexport fn mul(a: float32, b: float32) = mulf32(a, b)\nexport fn mul(a: float64, b: float64) = mulf64(a, b)\n\nexport fn div(a: int8, b: int8) = divi8(a, b)\nexport fn div(a: int16, b: int16) = divi16(a, b)\nexport fn div(a: int32, b: int32) = divi32(a, b)\nexport fn div(a: int64, b: int64) = divi64(a, b)\nexport fn div(a: float32, b: float32) = divf32(a, b)\nexport fn div(a: float64, b: float64) = divf64(a, b)\n\nexport fn mod(a: int8, b: int8) = modi8(a, b)\nexport fn mod(a: int16, b: int16) = modi16(a, b)\nexport fn mod(a: int32, b: int32) = modi32(a, b)\nexport fn mod(a: int64, b: int64) = modi64(a, b)\n\nexport fn pow(a: int8, b: int8) = powi8(a, b)\nexport fn pow(a: int16, b: int16) = powi16(a, b)\nexport fn pow(a: int32, b: int32) = powi32(a, b)\nexport fn pow(a: int64, b: int64) = powi64(a, b)\nexport fn pow(a: float32, b: float32) = powf32(a, b)\nexport fn pow(a: float64, b: float64) = powf64(a, b)\n\nexport fn sqrt(n: float32) = sqrtf32(n)\nexport fn sqrt(n: float64) = sqrtf64(n)\n\n// Boolean and bitwise functions\nexport fn and(a: int8, b: int8) = andi8(a, b)\nexport fn and(a: int16, b: int16) = andi16(a, b)\nexport fn and(a: int32, b: int32) = andi32(a, b)\nexport fn and(a: int64, b: int64) = andi64(a, b)\nexport fn and(a: bool, b: bool) = andbool(a, b)\n\nexport fn or(a: int8, b: int8) = ori8(a, b)\nexport fn or(a: int16, b: int16) = ori16(a, b)\nexport fn or(a: int32, b: int32) = ori32(a, b)\nexport fn or(a: int64, b: int64) = ori64(a, b)\nexport fn or(a: bool, b: bool) = orbool(a, b)\n\nexport fn xor(a: int8, b: int8) = xori8(a, b)\nexport fn xor(a: int16, b: int16) = xori16(a, b)\nexport fn xor(a: int32, b: int32) = xori32(a, b)\nexport fn xor(a: int64, b: int64) = xori64(a, b)\nexport fn xor(a: bool, b: bool) = xorbool(a, b)\n\nexport fn not(n: int8) = noti8(n)\nexport fn not(n: int16) = noti16(n)\nexport fn not(n: int32) = noti32(n)\nexport fn not(n: int64) = noti64(n)\nexport fn not(n: bool) = notbool(n)\n\nexport fn nand(a: int8, b: int8) = nandi8(a, b)\nexport fn nand(a: int16, b: int16) = nandi16(a, b)\nexport fn nand(a: int32, b: int32) = nandi32(a, b)\nexport fn nand(a: int64, b: int64) = nandi64(a, b)\nexport fn nand(a: bool, b: bool) = nandboo(a, b)\n\nexport fn nor(a: int8, b: int8) = nori8(a, b)\nexport fn nor(a: int16, b: int16) = nori16(a, b)\nexport fn nor(a: int32, b: int32) = nori32(a, b)\nexport fn nor(a: int64, b: int64) = nori64(a, b)\nexport fn nor(a: bool, b: bool) = norbool(a, b)\n\nexport fn xnor(a: int8, b: int8) = xnori8(a, b)\nexport fn xnor(a: int16, b: int16) = xnori16(a, b)\nexport fn xnor(a: int32, b: int32) = xnori32(a, b)\nexport fn xnor(a: int64, b: int64) = xnori64(a, b)\nexport fn xnor(a: bool, b: bool) = xnorboo(a, b)\n\n// Equality and order functions\nexport fn eq(a: int8, b: int8) = eqi8(a, b)\nexport fn eq(a: int16, b: int16) = eqi16(a, b)\nexport fn eq(a: int32, b: int32) = eqi32(a, b)\nexport fn eq(a: int64, b: int64) = eqi64(a, b)\nexport fn eq(a: float32, b: float32) = eqf32(a, b)\nexport fn eq(a: float64, b: float64) = eqf64(a, b)\nexport fn eq(a: string, b: string) = eqstr(a, b)\nexport fn eq(a: bool, b: bool) = eqbool(a, b)\n\nexport fn neq(a: int8, b: int8) = neqi8(a, b)\nexport fn neq(a: int16, b: int16) = neqi16(a, b)\nexport fn neq(a: int32, b: int32) = neqi32(a, b)\nexport fn neq(a: int64, b: int64) = neqi64(a, b)\nexport fn neq(a: float32, b: float32) = neqf32(a, b)\nexport fn neq(a: float64, b: float64) = neqf64(a, b)\nexport fn neq(a: string, b: string) = neqstr(a, b)\nexport fn neq(a: bool, b: bool) = neqbool(a, b)\n\nexport fn lt(a: int8, b: int8) = lti8(a, b)\nexport fn lt(a: int16, b: int16) = lti16(a, b)\nexport fn lt(a: int32, b: int32) = lti32(a, b)\nexport fn lt(a: int64, b: int64) = lti64(a, b)\nexport fn lt(a: float32, b: float32) = ltf32(a, b)\nexport fn lt(a: float64, b: float64) = ltf64(a, b)\nexport fn lt(a: string, b: string) = ltstr(a, b)\n\nexport fn lte(a: int8, b: int8) = ltei8(a, b)\nexport fn lte(a: int16, b: int16) = ltei16(a, b)\nexport fn lte(a: int32, b: int32) = ltei32(a, b)\nexport fn lte(a: int64, b: int64) = ltei64(a, b)\nexport fn lte(a: float32, b: float32) = ltef32(a, b)\nexport fn lte(a: float64, b: float64) = ltef64(a, b)\nexport fn lte(a: string, b: string) = ltestr(a, b)\n\nexport fn gt(a: int8, b: int8) = gti8(a, b)\nexport fn gt(a: int16, b: int16) = gti16(a, b)\nexport fn gt(a: int32, b: int32) = gti32(a, b)\nexport fn gt(a: int64, b: int64) = gti64(a, b)\nexport fn gt(a: float32, b: float32) = gtf32(a, b)\nexport fn gt(a: float64, b: float64) = gtf64(a, b)\nexport fn gt(a: string, b: string) = gtstr(a, b)\n\nexport fn gte(a: int8, b: int8) = gtei8(a, b)\nexport fn gte(a: int16, b: int16) = gtei16(a, b)\nexport fn gte(a: int32, b: int32) = gtei32(a, b)\nexport fn gte(a: int64, b: int64) = gtei64(a, b)\nexport fn gte(a: float32, b: float32) = gtef32(a, b)\nexport fn gte(a: float64, b: float64) = gtef64(a, b)\nexport fn gte(a: string, b: string) = gtestr(a, b)\n\n// String functions\nexport fn concat(a: string, b: string) = catstr(a, b)\nexport fn split(str: string, spl: string): Array<string> = split(str, spl)\nexport fn repeat(s: string, n: int64) = repstr(s, n)\nexport fn template(str: string, map: Map<string, string>) = templ(str, map)\nexport matches // opcode with signature `fn matches(s: string, t: string): bool`\nexport fn index(s: string, t: string) = indstr(s, t)\nexport fn length(s: string) = lenstr(s)\nexport trim // opcode with signature `fn trim(s: string): string`\n\n// Array functions\nexport fn concat(a: Array<any>, b: Array<any>) = catarr(a, b)\nexport fn repeat(arr: Array<any>, n: int64) = reparr(arr, n)\nexport fn index(arr: Array<any>, val: any) = indarr(arr, val)\nexport fn length(arr: Array<any>) = lenarr(arr)\nexport each // opcode with signature `fn each(arr: Array<any>, cb: function): void`\nexport map // opcode with signature `fn map(arr: Array<any>, cb: function): Array<any>`\nexport reduce // opcode with signature `fn reduce(arr: Array<any>, cb: function): any`\nexport filter // opcode with signature `fn filter(arr: Array<any>, cb: function): Array<any>`\nexport find // opcode with signature `fn find(arr: Array<any>, cb: function): any`\nexport every // opcode with signature `fn every(arr: Array<any>, cb: function): bool`\nexport some // opcode with signature `fn some(arr: Array<any>, cb: function): bool`\nexport join // opcode with signature `fn join(arr: Array<string>, sep: string): string`\n\n// Map functions\nexport keyVal // opcode with signature `fn keyVal(map: Map<any, any>): Array<KeyVal<any, any>>`\nexport keys // opcode with signature `fn keys(map: Map<any, any>): Array<any>`\nexport values // opcode with signature `fn values(map: Map<any, any>): Array<any>`\n\n// Ternary functions\nexport pair // opcode with signature `fn pair(trueval: any, falseval: any): Array<any>`\nexport fn cond(c: bool, options: Array<any>): any = condarr(c, options)\nexport fn cond(c: bool, optional: function): void = condfn(c, optional)\n\n// Operator declarations\nexport infix commutative associative + 2 add\nexport infix associative + 2 concat\nexport infix - 2 sub\nexport prefix - 1 negate\nexport infix commutative associative * 3 mul\nexport infix * 3 repeat\nexport infix / 3 div\nexport infix / 3 split\nexport infix % 3 mod\nexport infix % 3 template\nexport infix ** 4 pow\nexport infix commutative associative & 3 and\nexport infix commutative associative && 3 and\nexport infix commutative associative | 2 or\nexport infix commutative associative || 2 or\nexport infix commutative associative ^ 2 xor\nexport prefix ! 4 not\nexport infix commutative associative !& 3 nand\nexport infix commutative associative !| 2 nor\nexport infix commutative associative !^ 2 xnor\nexport infix commutative associative == 1 eq\nexport infix commutative associative != 1 neq\nexport infix < 1 lt\nexport infix <= 1 lte\nexport infix > 1 gt\nexport infix >= 1 gte\nexport infix ~ 1 matches\nexport infix @ 1 index\nexport prefix # 4 length\nexport prefix ` 4 trim\nexport infix : 5 pair\nexport infix ? 0 cond\n\n"}

},{}],9:[function(require,module,exports){
// Generated from Ln.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u00020\u0172\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u00a6\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0007\u0017\u00e5\n",
    "\u0017\f\u0017\u000e\u0017\u00e8\u000b\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003!\u0003!\u0003\"\u0003\"",
    "\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003",
    "&\u0003&\u0003\'\u0003\'\u0007\'\u010d\n\'\f\'\u000e\'\u0110\u000b\'",
    "\u0003(\u0003(\u0005(\u0114\n(\u0003(\u0003(\u0003(\u0005(\u0119\n(",
    "\u0003)\u0003)\u0003)\u0005)\u011e\n)\u0003*\u0006*\u0121\n*\r*\u000e",
    "*\u0122\u0003+\u0003+\u0003+\u0003+\u0006+\u0129\n+\r+\u000e+\u012a",
    "\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u0135",
    "\n,\f,\u000e,\u0138\u000b,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    "-\u0003-\u0007-\u0141\n-\f-\u000e-\u0144\u000b-\u0003-\u0003-\u0003",
    "-\u0007-\u0149\n-\f-\u000e-\u014c\u000b-\u0003-\u0005-\u014f\n-\u0003",
    ".\u0003.\u0003.\u0003.\u0006.\u0155\n.\r.\u000e.\u0156\u0003.\u0006",
    ".\u015a\n.\r.\u000e.\u015b\u0003.\u0003.\u0006.\u0160\n.\r.\u000e.\u0161",
    "\u0005.\u0164\n.\u0005.\u0166\n.\u0003/\u0006/\u0169\n/\r/\u000e/\u016a",
    "\u0003/\u0007/\u016e\n/\f/\u000e/\u0171\u000b/\u0002\u00020\u0003\u0003",
    "\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011\n\u0013",
    "\u000b\u0015\f\u0017\r\u0019\u000e\u001b\u000f\u001d\u0010\u001f\u0011",
    "!\u0012#\u0013%\u0014\'\u0015)\u0016+\u0017-\u0018/\u00191\u001a3\u001b",
    "5\u001c7\u001d9\u001e;\u001f= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]0\u0003",
    "\u0002\u000f\f\u0002##%(,-/1<?AB``bb~~\u0080\u0080\u000b\u0002##%(,",
    "-/1<B``bb~~\u0080\u0080\u0004\u0002\f\f\u000f\u000f\u0004\u0002\u000b",
    "\u000b\"\"\u0003\u000211\u0003\u0002,,\u0003\u0002$$\u0003\u0002))\u0005",
    "\u00022;CHch\u0003\u00022;\u0003\u000200\u0005\u0002C\\aac|\u0006\u0002",
    "2;C\\aac|\u0002\u0187\u0002\u0003\u0003\u0002\u0002\u0002\u0002\u0005",
    "\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002\t",
    "\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002\r",
    "\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002\u0011",
    "\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002\u0015",
    "\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0002\u0019",
    "\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002\u001d",
    "\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002!",
    "\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003",
    "\u0002\u0002\u0002\u0002\'\u0003\u0002\u0002\u0002\u0002)\u0003\u0002",
    "\u0002\u0002\u0002+\u0003\u0002\u0002\u0002\u0002-\u0003\u0002\u0002",
    "\u0002\u0002/\u0003\u0002\u0002\u0002\u00021\u0003\u0002\u0002\u0002",
    "\u00023\u0003\u0002\u0002\u0002\u00025\u0003\u0002\u0002\u0002\u0002",
    "7\u0003\u0002\u0002\u0002\u00029\u0003\u0002\u0002\u0002\u0002;\u0003",
    "\u0002\u0002\u0002\u0002=\u0003\u0002\u0002\u0002\u0002?\u0003\u0002",
    "\u0002\u0002\u0002A\u0003\u0002\u0002\u0002\u0002C\u0003\u0002\u0002",
    "\u0002\u0002E\u0003\u0002\u0002\u0002\u0002G\u0003\u0002\u0002\u0002",
    "\u0002I\u0003\u0002\u0002\u0002\u0002K\u0003\u0002\u0002\u0002\u0002",
    "M\u0003\u0002\u0002\u0002\u0002O\u0003\u0002\u0002\u0002\u0002Q\u0003",
    "\u0002\u0002\u0002\u0002S\u0003\u0002\u0002\u0002\u0002U\u0003\u0002",
    "\u0002\u0002\u0002W\u0003\u0002\u0002\u0002\u0002Y\u0003\u0002\u0002",
    "\u0002\u0002[\u0003\u0002\u0002\u0002\u0002]\u0003\u0002\u0002\u0002",
    "\u0003_\u0003\u0002\u0002\u0002\u0005f\u0003\u0002\u0002\u0002\u0007",
    "k\u0003\u0002\u0002\u0002\tp\u0003\u0002\u0002\u0002\u000bs\u0003\u0002",
    "\u0002\u0002\ry\u0003\u0002\u0002\u0002\u000f|\u0003\u0002\u0002\u0002",
    "\u0011\u0083\u0003\u0002\u0002\u0002\u0013\u0089\u0003\u0002\u0002\u0002",
    "\u0015\u008d\u0003\u0002\u0002\u0002\u0017\u0094\u0003\u0002\u0002\u0002",
    "\u0019\u0099\u0003\u0002\u0002\u0002\u001b\u00a5\u0003\u0002\u0002\u0002",
    "\u001d\u00a7\u0003\u0002\u0002\u0002\u001f\u00ae\u0003\u0002\u0002\u0002",
    "!\u00b4\u0003\u0002\u0002\u0002#\u00c0\u0003\u0002\u0002\u0002%\u00cc",
    "\u0003\u0002\u0002\u0002\'\u00cf\u0003\u0002\u0002\u0002)\u00d4\u0003",
    "\u0002\u0002\u0002+\u00d8\u0003\u0002\u0002\u0002-\u00e2\u0003\u0002",
    "\u0002\u0002/\u00e9\u0003\u0002\u0002\u00021\u00eb\u0003\u0002\u0002",
    "\u00023\u00ed\u0003\u0002\u0002\u00025\u00ef\u0003\u0002\u0002\u0002",
    "7\u00f1\u0003\u0002\u0002\u00029\u00f3\u0003\u0002\u0002\u0002;\u00f5",
    "\u0003\u0002\u0002\u0002=\u00f7\u0003\u0002\u0002\u0002?\u00f9\u0003",
    "\u0002\u0002\u0002A\u00fb\u0003\u0002\u0002\u0002C\u00fd\u0003\u0002",
    "\u0002\u0002E\u00ff\u0003\u0002\u0002\u0002G\u0102\u0003\u0002\u0002",
    "\u0002I\u0106\u0003\u0002\u0002\u0002K\u0108\u0003\u0002\u0002\u0002",
    "M\u010a\u0003\u0002\u0002\u0002O\u0113\u0003\u0002\u0002\u0002Q\u011d",
    "\u0003\u0002\u0002\u0002S\u0120\u0003\u0002\u0002\u0002U\u0124\u0003",
    "\u0002\u0002\u0002W\u012e\u0003\u0002\u0002\u0002Y\u014e\u0003\u0002",
    "\u0002\u0002[\u0165\u0003\u0002\u0002\u0002]\u0168\u0003\u0002\u0002",
    "\u0002_`\u0007k\u0002\u0002`a\u0007o\u0002\u0002ab\u0007r\u0002\u0002",
    "bc\u0007q\u0002\u0002cd\u0007t\u0002\u0002de\u0007v\u0002\u0002e\u0004",
    "\u0003\u0002\u0002\u0002fg\u0007h\u0002\u0002gh\u0007t\u0002\u0002h",
    "i\u0007q\u0002\u0002ij\u0007o\u0002\u0002j\u0006\u0003\u0002\u0002\u0002",
    "kl\u0007v\u0002\u0002lm\u0007{\u0002\u0002mn\u0007r\u0002\u0002no\u0007",
    "g\u0002\u0002o\b\u0003\u0002\u0002\u0002pq\u0007h\u0002\u0002qr\u0007",
    "p\u0002\u0002r\n\u0003\u0002\u0002\u0002st\u0007g\u0002\u0002tu\u0007",
    "x\u0002\u0002uv\u0007g\u0002\u0002vw\u0007p\u0002\u0002wx\u0007v\u0002",
    "\u0002x\f\u0003\u0002\u0002\u0002yz\u0007q\u0002\u0002z{\u0007p\u0002",
    "\u0002{\u000e\u0003\u0002\u0002\u0002|}\u0007g\u0002\u0002}~\u0007z",
    "\u0002\u0002~\u007f\u0007r\u0002\u0002\u007f\u0080\u0007q\u0002\u0002",
    "\u0080\u0081\u0007t\u0002\u0002\u0081\u0082\u0007v\u0002\u0002\u0082",
    "\u0010\u0003\u0002\u0002\u0002\u0083\u0084\u0007e\u0002\u0002\u0084",
    "\u0085\u0007q\u0002\u0002\u0085\u0086\u0007p\u0002\u0002\u0086\u0087",
    "\u0007u\u0002\u0002\u0087\u0088\u0007v\u0002\u0002\u0088\u0012\u0003",
    "\u0002\u0002\u0002\u0089\u008a\u0007n\u0002\u0002\u008a\u008b\u0007",
    "g\u0002\u0002\u008b\u008c\u0007v\u0002\u0002\u008c\u0014\u0003\u0002",
    "\u0002\u0002\u008d\u008e\u0007t\u0002\u0002\u008e\u008f\u0007g\u0002",
    "\u0002\u008f\u0090\u0007v\u0002\u0002\u0090\u0091\u0007w\u0002\u0002",
    "\u0091\u0092\u0007t\u0002\u0002\u0092\u0093\u0007p\u0002\u0002\u0093",
    "\u0016\u0003\u0002\u0002\u0002\u0094\u0095\u0007g\u0002\u0002\u0095",
    "\u0096\u0007o\u0002\u0002\u0096\u0097\u0007k\u0002\u0002\u0097\u0098",
    "\u0007v\u0002\u0002\u0098\u0018\u0003\u0002\u0002\u0002\u0099\u009a",
    "\u0007c\u0002\u0002\u009a\u009b\u0007u\u0002\u0002\u009b\u001a\u0003",
    "\u0002\u0002\u0002\u009c\u009d\u0007v\u0002\u0002\u009d\u009e\u0007",
    "t\u0002\u0002\u009e\u009f\u0007w\u0002\u0002\u009f\u00a6\u0007g\u0002",
    "\u0002\u00a0\u00a1\u0007h\u0002\u0002\u00a1\u00a2\u0007c\u0002\u0002",
    "\u00a2\u00a3\u0007n\u0002\u0002\u00a3\u00a4\u0007u\u0002\u0002\u00a4",
    "\u00a6\u0007g\u0002\u0002\u00a5\u009c\u0003\u0002\u0002\u0002\u00a5",
    "\u00a0\u0003\u0002\u0002\u0002\u00a6\u001c\u0003\u0002\u0002\u0002\u00a7",
    "\u00a8\u0007r\u0002\u0002\u00a8\u00a9\u0007t\u0002\u0002\u00a9\u00aa",
    "\u0007g\u0002\u0002\u00aa\u00ab\u0007h\u0002\u0002\u00ab\u00ac\u0007",
    "k\u0002\u0002\u00ac\u00ad\u0007z\u0002\u0002\u00ad\u001e\u0003\u0002",
    "\u0002\u0002\u00ae\u00af\u0007k\u0002\u0002\u00af\u00b0\u0007p\u0002",
    "\u0002\u00b0\u00b1\u0007h\u0002\u0002\u00b1\u00b2\u0007k\u0002\u0002",
    "\u00b2\u00b3\u0007z\u0002\u0002\u00b3 \u0003\u0002\u0002\u0002\u00b4",
    "\u00b5\u0007e\u0002\u0002\u00b5\u00b6\u0007q\u0002\u0002\u00b6\u00b7",
    "\u0007o\u0002\u0002\u00b7\u00b8\u0007o\u0002\u0002\u00b8\u00b9\u0007",
    "w\u0002\u0002\u00b9\u00ba\u0007v\u0002\u0002\u00ba\u00bb\u0007c\u0002",
    "\u0002\u00bb\u00bc\u0007v\u0002\u0002\u00bc\u00bd\u0007k\u0002\u0002",
    "\u00bd\u00be\u0007x\u0002\u0002\u00be\u00bf\u0007g\u0002\u0002\u00bf",
    "\"\u0003\u0002\u0002\u0002\u00c0\u00c1\u0007c\u0002\u0002\u00c1\u00c2",
    "\u0007u\u0002\u0002\u00c2\u00c3\u0007u\u0002\u0002\u00c3\u00c4\u0007",
    "q\u0002\u0002\u00c4\u00c5\u0007e\u0002\u0002\u00c5\u00c6\u0007k\u0002",
    "\u0002\u00c6\u00c7\u0007c\u0002\u0002\u00c7\u00c8\u0007v\u0002\u0002",
    "\u00c8\u00c9\u0007k\u0002\u0002\u00c9\u00ca\u0007x\u0002\u0002\u00ca",
    "\u00cb\u0007g\u0002\u0002\u00cb$\u0003\u0002\u0002\u0002\u00cc\u00cd",
    "\u0007k\u0002\u0002\u00cd\u00ce\u0007h\u0002\u0002\u00ce&\u0003\u0002",
    "\u0002\u0002\u00cf\u00d0\u0007g\u0002\u0002\u00d0\u00d1\u0007n\u0002",
    "\u0002\u00d1\u00d2\u0007u\u0002\u0002\u00d2\u00d3\u0007g\u0002\u0002",
    "\u00d3(\u0003\u0002\u0002\u0002\u00d4\u00d5\u0007p\u0002\u0002\u00d5",
    "\u00d6\u0007g\u0002\u0002\u00d6\u00d7\u0007y\u0002\u0002\u00d7*\u0003",
    "\u0002\u0002\u0002\u00d8\u00d9\u0007k\u0002\u0002\u00d9\u00da\u0007",
    "p\u0002\u0002\u00da\u00db\u0007v\u0002\u0002\u00db\u00dc\u0007g\u0002",
    "\u0002\u00dc\u00dd\u0007t\u0002\u0002\u00dd\u00de\u0007h\u0002\u0002",
    "\u00de\u00df\u0007c\u0002\u0002\u00df\u00e0\u0007e\u0002\u0002\u00e0",
    "\u00e1\u0007g\u0002\u0002\u00e1,\u0003\u0002\u0002\u0002\u00e2\u00e6",
    "\u0007.\u0002\u0002\u00e3\u00e5\u0005S*\u0002\u00e4\u00e3\u0003\u0002",
    "\u0002\u0002\u00e5\u00e8\u0003\u0002\u0002\u0002\u00e6\u00e4\u0003\u0002",
    "\u0002\u0002\u00e6\u00e7\u0003\u0002\u0002\u0002\u00e7.\u0003\u0002",
    "\u0002\u0002\u00e8\u00e6\u0003\u0002\u0002\u0002\u00e9\u00ea\u0007}",
    "\u0002\u0002\u00ea0\u0003\u0002\u0002\u0002\u00eb\u00ec\u0007\u007f",
    "\u0002\u0002\u00ec2\u0003\u0002\u0002\u0002\u00ed\u00ee\u0007*\u0002",
    "\u0002\u00ee4\u0003\u0002\u0002\u0002\u00ef\u00f0\u0007+\u0002\u0002",
    "\u00f06\u0003\u0002\u0002\u0002\u00f1\u00f2\u0007>\u0002\u0002\u00f2",
    "8\u0003\u0002\u0002\u0002\u00f3\u00f4\u0007@\u0002\u0002\u00f4:\u0003",
    "\u0002\u0002\u0002\u00f5\u00f6\u0007]\u0002\u0002\u00f6<\u0003\u0002",
    "\u0002\u0002\u00f7\u00f8\u0007_\u0002\u0002\u00f8>\u0003\u0002\u0002",
    "\u0002\u00f9\u00fa\u00070\u0002\u0002\u00fa@\u0003\u0002\u0002\u0002",
    "\u00fb\u00fc\u0007?\u0002\u0002\u00fcB\u0003\u0002\u0002\u0002\u00fd",
    "\u00fe\u0007B\u0002\u0002\u00feD\u0003\u0002\u0002\u0002\u00ff\u0100",
    "\u00070\u0002\u0002\u0100\u0101\u00071\u0002\u0002\u0101F\u0003\u0002",
    "\u0002\u0002\u0102\u0103\u00070\u0002\u0002\u0103\u0104\u00070\u0002",
    "\u0002\u0104\u0105\u00071\u0002\u0002\u0105H\u0003\u0002\u0002\u0002",
    "\u0106\u0107\u00071\u0002\u0002\u0107J\u0003\u0002\u0002\u0002\u0108",
    "\u0109\u0007~\u0002\u0002\u0109L\u0003\u0002\u0002\u0002\u010a\u010e",
    "\t\u0002\u0002\u0002\u010b\u010d\t\u0003\u0002\u0002\u010c\u010b\u0003",
    "\u0002\u0002\u0002\u010d\u0110\u0003\u0002\u0002\u0002\u010e\u010c\u0003",
    "\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010fN\u0003",
    "\u0002\u0002\u0002\u0110\u010e\u0003\u0002\u0002\u0002\u0111\u0114\u0005",
    "S*\u0002\u0112\u0114\u0005Q)\u0002\u0113\u0111\u0003\u0002\u0002\u0002",
    "\u0113\u0112\u0003\u0002\u0002\u0002\u0113\u0114\u0003\u0002\u0002\u0002",
    "\u0114\u0115\u0003\u0002\u0002\u0002\u0115\u0118\u0007<\u0002\u0002",
    "\u0116\u0119\u0005S*\u0002\u0117\u0119\u0005Q)\u0002\u0118\u0116\u0003",
    "\u0002\u0002\u0002\u0118\u0117\u0003\u0002\u0002\u0002\u0118\u0119\u0003",
    "\u0002\u0002\u0002\u0119P\u0003\u0002\u0002\u0002\u011a\u011e\t\u0004",
    "\u0002\u0002\u011b\u011c\u0007\u000f\u0002\u0002\u011c\u011e\u0007\f",
    "\u0002\u0002\u011d\u011a\u0003\u0002\u0002\u0002\u011d\u011b\u0003\u0002",
    "\u0002\u0002\u011eR\u0003\u0002\u0002\u0002\u011f\u0121\t\u0005\u0002",
    "\u0002\u0120\u011f\u0003\u0002\u0002\u0002\u0121\u0122\u0003\u0002\u0002",
    "\u0002\u0122\u0120\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002",
    "\u0002\u0123T\u0003\u0002\u0002\u0002\u0124\u0125\u00071\u0002\u0002",
    "\u0125\u0126\u00071\u0002\u0002\u0126\u0128\u0003\u0002\u0002\u0002",
    "\u0127\u0129\n\u0004\u0002\u0002\u0128\u0127\u0003\u0002\u0002\u0002",
    "\u0129\u012a\u0003\u0002\u0002\u0002\u012a\u0128\u0003\u0002\u0002\u0002",
    "\u012a\u012b\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002\u0002",
    "\u012c\u012d\b+\u0002\u0002\u012dV\u0003\u0002\u0002\u0002\u012e\u012f",
    "\u00071\u0002\u0002\u012f\u0130\u0007,\u0002\u0002\u0130\u0136\u0003",
    "\u0002\u0002\u0002\u0131\u0132\u0007,\u0002\u0002\u0132\u0135\n\u0006",
    "\u0002\u0002\u0133\u0135\n\u0007\u0002\u0002\u0134\u0131\u0003\u0002",
    "\u0002\u0002\u0134\u0133\u0003\u0002\u0002\u0002\u0135\u0138\u0003\u0002",
    "\u0002\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002",
    "\u0002\u0002\u0137\u0139\u0003\u0002\u0002\u0002\u0138\u0136\u0003\u0002",
    "\u0002\u0002\u0139\u013a\u0007,\u0002\u0002\u013a\u013b\u00071\u0002",
    "\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u013d\b,\u0002\u0002",
    "\u013dX\u0003\u0002\u0002\u0002\u013e\u0142\u0007$\u0002\u0002\u013f",
    "\u0141\n\b\u0002\u0002\u0140\u013f\u0003\u0002\u0002\u0002\u0141\u0144",
    "\u0003\u0002\u0002\u0002\u0142\u0140\u0003\u0002\u0002\u0002\u0142\u0143",
    "\u0003\u0002\u0002\u0002\u0143\u0145\u0003\u0002\u0002\u0002\u0144\u0142",
    "\u0003\u0002\u0002\u0002\u0145\u014f\u0007$\u0002\u0002\u0146\u014a",
    "\u0007)\u0002\u0002\u0147\u0149\n\t\u0002\u0002\u0148\u0147\u0003\u0002",
    "\u0002\u0002\u0149\u014c\u0003\u0002\u0002\u0002\u014a\u0148\u0003\u0002",
    "\u0002\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b\u014d\u0003\u0002",
    "\u0002\u0002\u014c\u014a\u0003\u0002\u0002\u0002\u014d\u014f\u0007)",
    "\u0002\u0002\u014e\u013e\u0003\u0002\u0002\u0002\u014e\u0146\u0003\u0002",
    "\u0002\u0002\u014fZ\u0003\u0002\u0002\u0002\u0150\u0151\u00072\u0002",
    "\u0002\u0151\u0152\u0007z\u0002\u0002\u0152\u0154\u0003\u0002\u0002",
    "\u0002\u0153\u0155\t\n\u0002\u0002\u0154\u0153\u0003\u0002\u0002\u0002",
    "\u0155\u0156\u0003\u0002\u0002\u0002\u0156\u0154\u0003\u0002\u0002\u0002",
    "\u0156\u0157\u0003\u0002\u0002\u0002\u0157\u0166\u0003\u0002\u0002\u0002",
    "\u0158\u015a\t\u000b\u0002\u0002\u0159\u0158\u0003\u0002\u0002\u0002",
    "\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u0159\u0003\u0002\u0002\u0002",
    "\u015b\u015c\u0003\u0002\u0002\u0002\u015c\u0163\u0003\u0002\u0002\u0002",
    "\u015d\u015f\t\f\u0002\u0002\u015e\u0160\t\u000b\u0002\u0002\u015f\u015e",
    "\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u015f",
    "\u0003\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002\u0162\u0164",
    "\u0003\u0002\u0002\u0002\u0163\u015d\u0003\u0002\u0002\u0002\u0163\u0164",
    "\u0003\u0002\u0002\u0002\u0164\u0166\u0003\u0002\u0002\u0002\u0165\u0150",
    "\u0003\u0002\u0002\u0002\u0165\u0159\u0003\u0002\u0002\u0002\u0166\\",
    "\u0003\u0002\u0002\u0002\u0167\u0169\t\r\u0002\u0002\u0168\u0167\u0003",
    "\u0002\u0002\u0002\u0169\u016a\u0003\u0002\u0002\u0002\u016a\u0168\u0003",
    "\u0002\u0002\u0002\u016a\u016b\u0003\u0002\u0002\u0002\u016b\u016f\u0003",
    "\u0002\u0002\u0002\u016c\u016e\t\u000e\u0002\u0002\u016d\u016c\u0003",
    "\u0002\u0002\u0002\u016e\u0171\u0003\u0002\u0002\u0002\u016f\u016d\u0003",
    "\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170^\u0003",
    "\u0002\u0002\u0002\u0171\u016f\u0003\u0002\u0002\u0002\u0017\u0002\u00a5",
    "\u00e6\u010e\u0113\u0118\u011d\u0122\u012a\u0134\u0136\u0142\u014a\u014e",
    "\u0156\u015b\u0161\u0163\u0165\u016a\u016f\u0003\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function LnLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

LnLexer.prototype = Object.create(antlr4.Lexer.prototype);
LnLexer.prototype.constructor = LnLexer;

Object.defineProperty(LnLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

LnLexer.EOF = antlr4.Token.EOF;
LnLexer.IMPORT = 1;
LnLexer.FROM = 2;
LnLexer.TYPE = 3;
LnLexer.FN = 4;
LnLexer.EVENT = 5;
LnLexer.ON = 6;
LnLexer.EXPORT = 7;
LnLexer.CONST = 8;
LnLexer.LET = 9;
LnLexer.RETURN = 10;
LnLexer.EMIT = 11;
LnLexer.AS = 12;
LnLexer.BOOLCONSTANT = 13;
LnLexer.PREFIX = 14;
LnLexer.INFIX = 15;
LnLexer.COMMUTATIVE = 16;
LnLexer.ASSOCIATIVE = 17;
LnLexer.IF = 18;
LnLexer.ELSE = 19;
LnLexer.NEW = 20;
LnLexer.INTERFACE = 21;
LnLexer.SEP = 22;
LnLexer.OPENBODY = 23;
LnLexer.CLOSEBODY = 24;
LnLexer.OPENARGS = 25;
LnLexer.CLOSEARGS = 26;
LnLexer.OPENGENERIC = 27;
LnLexer.CLOSEGENERIC = 28;
LnLexer.OPENARRAY = 29;
LnLexer.CLOSEARRAY = 30;
LnLexer.METHODSEP = 31;
LnLexer.EQUALS = 32;
LnLexer.GLOBAL = 33;
LnLexer.CURDIR = 34;
LnLexer.PARDIR = 35;
LnLexer.DIRSEP = 36;
LnLexer.OR = 37;
LnLexer.GENERALOPERATORS = 38;
LnLexer.TYPESEP = 39;
LnLexer.NEWLINE = 40;
LnLexer.WS = 41;
LnLexer.SINGLELINECOMMENT = 42;
LnLexer.MULTILINECOMMENT = 43;
LnLexer.STRINGCONSTANT = 44;
LnLexer.NUMBERCONSTANT = 45;
LnLexer.VARNAME = 46;

LnLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

LnLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

LnLexer.prototype.literalNames = [ null, "'import'", "'from'", "'type'", 
                                   "'fn'", "'event'", "'on'", "'export'", 
                                   "'const'", "'let'", "'return'", "'emit'", 
                                   "'as'", null, "'prefix'", "'infix'", 
                                   "'commutative'", "'associative'", "'if'", 
                                   "'else'", "'new'", "'interface'", null, 
                                   "'{'", "'}'", "'('", "')'", "'<'", "'>'", 
                                   "'['", "']'", "'.'", "'='", "'@'", "'./'", 
                                   "'../'", "'/'", "'|'" ];

LnLexer.prototype.symbolicNames = [ null, "IMPORT", "FROM", "TYPE", "FN", 
                                    "EVENT", "ON", "EXPORT", "CONST", "LET", 
                                    "RETURN", "EMIT", "AS", "BOOLCONSTANT", 
                                    "PREFIX", "INFIX", "COMMUTATIVE", "ASSOCIATIVE", 
                                    "IF", "ELSE", "NEW", "INTERFACE", "SEP", 
                                    "OPENBODY", "CLOSEBODY", "OPENARGS", 
                                    "CLOSEARGS", "OPENGENERIC", "CLOSEGENERIC", 
                                    "OPENARRAY", "CLOSEARRAY", "METHODSEP", 
                                    "EQUALS", "GLOBAL", "CURDIR", "PARDIR", 
                                    "DIRSEP", "OR", "GENERALOPERATORS", 
                                    "TYPESEP", "NEWLINE", "WS", "SINGLELINECOMMENT", 
                                    "MULTILINECOMMENT", "STRINGCONSTANT", 
                                    "NUMBERCONSTANT", "VARNAME" ];

LnLexer.prototype.ruleNames = [ "IMPORT", "FROM", "TYPE", "FN", "EVENT", 
                                "ON", "EXPORT", "CONST", "LET", "RETURN", 
                                "EMIT", "AS", "BOOLCONSTANT", "PREFIX", 
                                "INFIX", "COMMUTATIVE", "ASSOCIATIVE", "IF", 
                                "ELSE", "NEW", "INTERFACE", "SEP", "OPENBODY", 
                                "CLOSEBODY", "OPENARGS", "CLOSEARGS", "OPENGENERIC", 
                                "CLOSEGENERIC", "OPENARRAY", "CLOSEARRAY", 
                                "METHODSEP", "EQUALS", "GLOBAL", "CURDIR", 
                                "PARDIR", "DIRSEP", "OR", "GENERALOPERATORS", 
                                "TYPESEP", "NEWLINE", "WS", "SINGLELINECOMMENT", 
                                "MULTILINECOMMENT", "STRINGCONSTANT", "NUMBERCONSTANT", 
                                "VARNAME" ];

LnLexer.prototype.grammarFileName = "Ln.g4";



exports.LnLexer = LnLexer;


},{"antlr4/index":76}],10:[function(require,module,exports){
// Generated from Ln.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');

// This class defines a complete listener for a parse tree produced by LnParser.
function LnListener() {
	antlr4.tree.ParseTreeListener.call(this);
	return this;
}

LnListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
LnListener.prototype.constructor = LnListener;

// Enter a parse tree produced by LnParser#module.
LnListener.prototype.enterModule = function(ctx) {
};

// Exit a parse tree produced by LnParser#module.
LnListener.prototype.exitModule = function(ctx) {
};


// Enter a parse tree produced by LnParser#blank.
LnListener.prototype.enterBlank = function(ctx) {
};

// Exit a parse tree produced by LnParser#blank.
LnListener.prototype.exitBlank = function(ctx) {
};


// Enter a parse tree produced by LnParser#imports.
LnListener.prototype.enterImports = function(ctx) {
};

// Exit a parse tree produced by LnParser#imports.
LnListener.prototype.exitImports = function(ctx) {
};


// Enter a parse tree produced by LnParser#standardImport.
LnListener.prototype.enterStandardImport = function(ctx) {
};

// Exit a parse tree produced by LnParser#standardImport.
LnListener.prototype.exitStandardImport = function(ctx) {
};


// Enter a parse tree produced by LnParser#fromImport.
LnListener.prototype.enterFromImport = function(ctx) {
};

// Exit a parse tree produced by LnParser#fromImport.
LnListener.prototype.exitFromImport = function(ctx) {
};


// Enter a parse tree produced by LnParser#dependency.
LnListener.prototype.enterDependency = function(ctx) {
};

// Exit a parse tree produced by LnParser#dependency.
LnListener.prototype.exitDependency = function(ctx) {
};


// Enter a parse tree produced by LnParser#localdependency.
LnListener.prototype.enterLocaldependency = function(ctx) {
};

// Exit a parse tree produced by LnParser#localdependency.
LnListener.prototype.exitLocaldependency = function(ctx) {
};


// Enter a parse tree produced by LnParser#globaldependency.
LnListener.prototype.enterGlobaldependency = function(ctx) {
};

// Exit a parse tree produced by LnParser#globaldependency.
LnListener.prototype.exitGlobaldependency = function(ctx) {
};


// Enter a parse tree produced by LnParser#types.
LnListener.prototype.enterTypes = function(ctx) {
};

// Exit a parse tree produced by LnParser#types.
LnListener.prototype.exitTypes = function(ctx) {
};


// Enter a parse tree produced by LnParser#othertype.
LnListener.prototype.enterOthertype = function(ctx) {
};

// Exit a parse tree produced by LnParser#othertype.
LnListener.prototype.exitOthertype = function(ctx) {
};


// Enter a parse tree produced by LnParser#typename.
LnListener.prototype.enterTypename = function(ctx) {
};

// Exit a parse tree produced by LnParser#typename.
LnListener.prototype.exitTypename = function(ctx) {
};


// Enter a parse tree produced by LnParser#typegenerics.
LnListener.prototype.enterTypegenerics = function(ctx) {
};

// Exit a parse tree produced by LnParser#typegenerics.
LnListener.prototype.exitTypegenerics = function(ctx) {
};


// Enter a parse tree produced by LnParser#fulltypename.
LnListener.prototype.enterFulltypename = function(ctx) {
};

// Exit a parse tree produced by LnParser#fulltypename.
LnListener.prototype.exitFulltypename = function(ctx) {
};


// Enter a parse tree produced by LnParser#typebody.
LnListener.prototype.enterTypebody = function(ctx) {
};

// Exit a parse tree produced by LnParser#typebody.
LnListener.prototype.exitTypebody = function(ctx) {
};


// Enter a parse tree produced by LnParser#typeline.
LnListener.prototype.enterTypeline = function(ctx) {
};

// Exit a parse tree produced by LnParser#typeline.
LnListener.prototype.exitTypeline = function(ctx) {
};


// Enter a parse tree produced by LnParser#functions.
LnListener.prototype.enterFunctions = function(ctx) {
};

// Exit a parse tree produced by LnParser#functions.
LnListener.prototype.exitFunctions = function(ctx) {
};


// Enter a parse tree produced by LnParser#fullfunctionbody.
LnListener.prototype.enterFullfunctionbody = function(ctx) {
};

// Exit a parse tree produced by LnParser#fullfunctionbody.
LnListener.prototype.exitFullfunctionbody = function(ctx) {
};


// Enter a parse tree produced by LnParser#functionbody.
LnListener.prototype.enterFunctionbody = function(ctx) {
};

// Exit a parse tree produced by LnParser#functionbody.
LnListener.prototype.exitFunctionbody = function(ctx) {
};


// Enter a parse tree produced by LnParser#statements.
LnListener.prototype.enterStatements = function(ctx) {
};

// Exit a parse tree produced by LnParser#statements.
LnListener.prototype.exitStatements = function(ctx) {
};


// Enter a parse tree produced by LnParser#declarations.
LnListener.prototype.enterDeclarations = function(ctx) {
};

// Exit a parse tree produced by LnParser#declarations.
LnListener.prototype.exitDeclarations = function(ctx) {
};


// Enter a parse tree produced by LnParser#constdeclaration.
LnListener.prototype.enterConstdeclaration = function(ctx) {
};

// Exit a parse tree produced by LnParser#constdeclaration.
LnListener.prototype.exitConstdeclaration = function(ctx) {
};


// Enter a parse tree produced by LnParser#letdeclaration.
LnListener.prototype.enterLetdeclaration = function(ctx) {
};

// Exit a parse tree produced by LnParser#letdeclaration.
LnListener.prototype.exitLetdeclaration = function(ctx) {
};


// Enter a parse tree produced by LnParser#assignments.
LnListener.prototype.enterAssignments = function(ctx) {
};

// Exit a parse tree produced by LnParser#assignments.
LnListener.prototype.exitAssignments = function(ctx) {
};


// Enter a parse tree produced by LnParser#assignables.
LnListener.prototype.enterAssignables = function(ctx) {
};

// Exit a parse tree produced by LnParser#assignables.
LnListener.prototype.exitAssignables = function(ctx) {
};


// Enter a parse tree produced by LnParser#basicassignables.
LnListener.prototype.enterBasicassignables = function(ctx) {
};

// Exit a parse tree produced by LnParser#basicassignables.
LnListener.prototype.exitBasicassignables = function(ctx) {
};


// Enter a parse tree produced by LnParser#operatororassignable.
LnListener.prototype.enterOperatororassignable = function(ctx) {
};

// Exit a parse tree produced by LnParser#operatororassignable.
LnListener.prototype.exitOperatororassignable = function(ctx) {
};


// Enter a parse tree produced by LnParser#withoperators.
LnListener.prototype.enterWithoperators = function(ctx) {
};

// Exit a parse tree produced by LnParser#withoperators.
LnListener.prototype.exitWithoperators = function(ctx) {
};


// Enter a parse tree produced by LnParser#groups.
LnListener.prototype.enterGroups = function(ctx) {
};

// Exit a parse tree produced by LnParser#groups.
LnListener.prototype.exitGroups = function(ctx) {
};


// Enter a parse tree produced by LnParser#typeofn.
LnListener.prototype.enterTypeofn = function(ctx) {
};

// Exit a parse tree produced by LnParser#typeofn.
LnListener.prototype.exitTypeofn = function(ctx) {
};


// Enter a parse tree produced by LnParser#objectliterals.
LnListener.prototype.enterObjectliterals = function(ctx) {
};

// Exit a parse tree produced by LnParser#objectliterals.
LnListener.prototype.exitObjectliterals = function(ctx) {
};


// Enter a parse tree produced by LnParser#arrayliteral.
LnListener.prototype.enterArrayliteral = function(ctx) {
};

// Exit a parse tree produced by LnParser#arrayliteral.
LnListener.prototype.exitArrayliteral = function(ctx) {
};


// Enter a parse tree produced by LnParser#typeliteral.
LnListener.prototype.enterTypeliteral = function(ctx) {
};

// Exit a parse tree produced by LnParser#typeliteral.
LnListener.prototype.exitTypeliteral = function(ctx) {
};


// Enter a parse tree produced by LnParser#mapliteral.
LnListener.prototype.enterMapliteral = function(ctx) {
};

// Exit a parse tree produced by LnParser#mapliteral.
LnListener.prototype.exitMapliteral = function(ctx) {
};


// Enter a parse tree produced by LnParser#mapline.
LnListener.prototype.enterMapline = function(ctx) {
};

// Exit a parse tree produced by LnParser#mapline.
LnListener.prototype.exitMapline = function(ctx) {
};


// Enter a parse tree produced by LnParser#assignablelist.
LnListener.prototype.enterAssignablelist = function(ctx) {
};

// Exit a parse tree produced by LnParser#assignablelist.
LnListener.prototype.exitAssignablelist = function(ctx) {
};


// Enter a parse tree produced by LnParser#fncall.
LnListener.prototype.enterFncall = function(ctx) {
};

// Exit a parse tree produced by LnParser#fncall.
LnListener.prototype.exitFncall = function(ctx) {
};


// Enter a parse tree produced by LnParser#calls.
LnListener.prototype.enterCalls = function(ctx) {
};

// Exit a parse tree produced by LnParser#calls.
LnListener.prototype.exitCalls = function(ctx) {
};


// Enter a parse tree produced by LnParser#exits.
LnListener.prototype.enterExits = function(ctx) {
};

// Exit a parse tree produced by LnParser#exits.
LnListener.prototype.exitExits = function(ctx) {
};


// Enter a parse tree produced by LnParser#emits.
LnListener.prototype.enterEmits = function(ctx) {
};

// Exit a parse tree produced by LnParser#emits.
LnListener.prototype.exitEmits = function(ctx) {
};


// Enter a parse tree produced by LnParser#conditionals.
LnListener.prototype.enterConditionals = function(ctx) {
};

// Exit a parse tree produced by LnParser#conditionals.
LnListener.prototype.exitConditionals = function(ctx) {
};


// Enter a parse tree produced by LnParser#blocklikes.
LnListener.prototype.enterBlocklikes = function(ctx) {
};

// Exit a parse tree produced by LnParser#blocklikes.
LnListener.prototype.exitBlocklikes = function(ctx) {
};


// Enter a parse tree produced by LnParser#constants.
LnListener.prototype.enterConstants = function(ctx) {
};

// Exit a parse tree produced by LnParser#constants.
LnListener.prototype.exitConstants = function(ctx) {
};


// Enter a parse tree produced by LnParser#operators.
LnListener.prototype.enterOperators = function(ctx) {
};

// Exit a parse tree produced by LnParser#operators.
LnListener.prototype.exitOperators = function(ctx) {
};


// Enter a parse tree produced by LnParser#operatormapping.
LnListener.prototype.enterOperatormapping = function(ctx) {
};

// Exit a parse tree produced by LnParser#operatormapping.
LnListener.prototype.exitOperatormapping = function(ctx) {
};


// Enter a parse tree produced by LnParser#infix.
LnListener.prototype.enterInfix = function(ctx) {
};

// Exit a parse tree produced by LnParser#infix.
LnListener.prototype.exitInfix = function(ctx) {
};


// Enter a parse tree produced by LnParser#events.
LnListener.prototype.enterEvents = function(ctx) {
};

// Exit a parse tree produced by LnParser#events.
LnListener.prototype.exitEvents = function(ctx) {
};


// Enter a parse tree produced by LnParser#handlers.
LnListener.prototype.enterHandlers = function(ctx) {
};

// Exit a parse tree produced by LnParser#handlers.
LnListener.prototype.exitHandlers = function(ctx) {
};


// Enter a parse tree produced by LnParser#eventref.
LnListener.prototype.enterEventref = function(ctx) {
};

// Exit a parse tree produced by LnParser#eventref.
LnListener.prototype.exitEventref = function(ctx) {
};


// Enter a parse tree produced by LnParser#interfaces.
LnListener.prototype.enterInterfaces = function(ctx) {
};

// Exit a parse tree produced by LnParser#interfaces.
LnListener.prototype.exitInterfaces = function(ctx) {
};


// Enter a parse tree produced by LnParser#interfaceline.
LnListener.prototype.enterInterfaceline = function(ctx) {
};

// Exit a parse tree produced by LnParser#interfaceline.
LnListener.prototype.exitInterfaceline = function(ctx) {
};


// Enter a parse tree produced by LnParser#functiontypeline.
LnListener.prototype.enterFunctiontypeline = function(ctx) {
};

// Exit a parse tree produced by LnParser#functiontypeline.
LnListener.prototype.exitFunctiontypeline = function(ctx) {
};


// Enter a parse tree produced by LnParser#functiontype.
LnListener.prototype.enterFunctiontype = function(ctx) {
};

// Exit a parse tree produced by LnParser#functiontype.
LnListener.prototype.exitFunctiontype = function(ctx) {
};


// Enter a parse tree produced by LnParser#operatortypeline.
LnListener.prototype.enterOperatortypeline = function(ctx) {
};

// Exit a parse tree produced by LnParser#operatortypeline.
LnListener.prototype.exitOperatortypeline = function(ctx) {
};


// Enter a parse tree produced by LnParser#leftarg.
LnListener.prototype.enterLeftarg = function(ctx) {
};

// Exit a parse tree produced by LnParser#leftarg.
LnListener.prototype.exitLeftarg = function(ctx) {
};


// Enter a parse tree produced by LnParser#rightarg.
LnListener.prototype.enterRightarg = function(ctx) {
};

// Exit a parse tree produced by LnParser#rightarg.
LnListener.prototype.exitRightarg = function(ctx) {
};


// Enter a parse tree produced by LnParser#propertytypeline.
LnListener.prototype.enterPropertytypeline = function(ctx) {
};

// Exit a parse tree produced by LnParser#propertytypeline.
LnListener.prototype.exitPropertytypeline = function(ctx) {
};


// Enter a parse tree produced by LnParser#argtype.
LnListener.prototype.enterArgtype = function(ctx) {
};

// Exit a parse tree produced by LnParser#argtype.
LnListener.prototype.exitArgtype = function(ctx) {
};


// Enter a parse tree produced by LnParser#arglist.
LnListener.prototype.enterArglist = function(ctx) {
};

// Exit a parse tree produced by LnParser#arglist.
LnListener.prototype.exitArglist = function(ctx) {
};


// Enter a parse tree produced by LnParser#exports.
LnListener.prototype.enterExports = function(ctx) {
};

// Exit a parse tree produced by LnParser#exports.
LnListener.prototype.exitExports = function(ctx) {
};


// Enter a parse tree produced by LnParser#varlist.
LnListener.prototype.enterVarlist = function(ctx) {
};

// Exit a parse tree produced by LnParser#varlist.
LnListener.prototype.exitVarlist = function(ctx) {
};


// Enter a parse tree produced by LnParser#renameablevar.
LnListener.prototype.enterRenameablevar = function(ctx) {
};

// Exit a parse tree produced by LnParser#renameablevar.
LnListener.prototype.exitRenameablevar = function(ctx) {
};


// Enter a parse tree produced by LnParser#varop.
LnListener.prototype.enterVarop = function(ctx) {
};

// Exit a parse tree produced by LnParser#varop.
LnListener.prototype.exitVarop = function(ctx) {
};


// Enter a parse tree produced by LnParser#varn.
LnListener.prototype.enterVarn = function(ctx) {
};

// Exit a parse tree produced by LnParser#varn.
LnListener.prototype.exitVarn = function(ctx) {
};


// Enter a parse tree produced by LnParser#varsegment.
LnListener.prototype.enterVarsegment = function(ctx) {
};

// Exit a parse tree produced by LnParser#varsegment.
LnListener.prototype.exitVarsegment = function(ctx) {
};


// Enter a parse tree produced by LnParser#arrayaccess.
LnListener.prototype.enterArrayaccess = function(ctx) {
};

// Exit a parse tree produced by LnParser#arrayaccess.
LnListener.prototype.exitArrayaccess = function(ctx) {
};



exports.LnListener = LnListener;
},{"antlr4/index":76}],11:[function(require,module,exports){
// Generated from Ln.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var LnListener = require('./LnListener').LnListener;
var grammarFileName = "Ln.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u00030\u0498\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0003\u0002\u0007\u0002\u0086\n\u0002\f\u0002\u000e\u0002",
    "\u0089\u000b\u0002\u0003\u0002\u0007\u0002\u008c\n\u0002\f\u0002\u000e",
    "\u0002\u008f\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0006\u0002",
    "\u009a\n\u0002\r\u0002\u000e\u0002\u009b\u0006\u0002\u009e\n\u0002\r",
    "\u0002\u000e\u0002\u009f\u0003\u0002\u0005\u0002\u00a3\n\u0002\u0003",
    "\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u00a9\n\u0004",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00b2\n\u0005\u0003\u0005\u0006\u0005\u00b5",
    "\n\u0005\r\u0005\u000e\u0005\u00b6\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0006\u0006",
    "\u00c1\n\u0006\r\u0006\u000e\u0006\u00c2\u0003\u0007\u0003\u0007\u0005",
    "\u0007\u00c7\n\u0007\u0003\b\u0003\b\u0006\b\u00cb\n\b\r\b\u000e\b\u00cc",
    "\u0003\b\u0003\b\u0006\b\u00d1\n\b\r\b\u000e\b\u00d2\u0005\b\u00d5\n",
    "\b\u0003\t\u0003\t\u0006\t\u00d9\n\t\r\t\u000e\t\u00da\u0003\n\u0003",
    "\n\u0006\n\u00df\n\n\r\n\u000e\n\u00e0\u0003\n\u0003\n\u0007\n\u00e5",
    "\n\n\f\n\u000e\n\u00e8\u000b\n\u0003\n\u0005\n\u00eb\n\n\u0003\n\u0006",
    "\n\u00ee\n\n\r\n\u000e\n\u00ef\u0003\n\u0003\n\u0003\n\u0007\n\u00f5",
    "\n\n\f\n\u000e\n\u00f8\u000b\n\u0003\n\u0003\n\u0007\n\u00fc\n\n\f\n",
    "\u000e\n\u00ff\u000b\n\u0003\n\u0003\n\u0007\n\u0103\n\n\f\n\u000e\n",
    "\u0106\u000b\n\u0003\n\u0007\n\u0109\n\n\f\n\u000e\n\u010c\u000b\n\u0005",
    "\n\u010e\n\n\u0003\u000b\u0003\u000b\u0007\u000b\u0112\n\u000b\f\u000b",
    "\u000e\u000b\u0115\u000b\u000b\u0003\u000b\u0005\u000b\u0118\n\u000b",
    "\u0003\f\u0003\f\u0003\r\u0003\r\u0007\r\u011e\n\r\f\r\u000e\r\u0121",
    "\u000b\r\u0003\r\u0003\r\u0007\r\u0125\n\r\f\r\u000e\r\u0128\u000b\r",
    "\u0003\r\u0003\r\u0007\r\u012c\n\r\f\r\u000e\r\u012f\u000b\r\u0003\r",
    "\u0003\r\u0007\r\u0133\n\r\f\r\u000e\r\u0136\u000b\r\u0007\r\u0138\n",
    "\r\f\r\u000e\r\u013b\u000b\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e",
    "\u0007\u000e\u0141\n\u000e\f\u000e\u000e\u000e\u0144\u000b\u000e\u0003",
    "\u000e\u0005\u000e\u0147\n\u000e\u0003\u000f\u0003\u000f\u0007\u000f",
    "\u014b\n\u000f\f\u000f\u000e\u000f\u014e\u000b\u000f\u0003\u000f\u0007",
    "\u000f\u0151\n\u000f\f\u000f\u000e\u000f\u0154\u000b\u000f\u0003\u000f",
    "\u0006\u000f\u0157\n\u000f\r\u000f\u000e\u000f\u0158\u0003\u000f\u0005",
    "\u000f\u015c\n\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0007\u0010\u0164\n\u0010\f\u0010\u000e\u0010",
    "\u0167\u000b\u0010\u0003\u0011\u0003\u0011\u0006\u0011\u016b\n\u0011",
    "\r\u0011\u000e\u0011\u016c\u0003\u0011\u0003\u0011\u0007\u0011\u0171",
    "\n\u0011\f\u0011\u000e\u0011\u0174\u000b\u0011\u0005\u0011\u0176\n\u0011",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u017a\n\u0011\u0003\u0011\u0003",
    "\u0011\u0007\u0011\u017e\n\u0011\f\u0011\u000e\u0011\u0181\u000b\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0186\n\u0011\f\u0011",
    "\u000e\u0011\u0189\u000b\u0011\u0005\u0011\u018b\n\u0011\u0005\u0011",
    "\u018d\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0007\u0012\u0194\n\u0012\f\u0012\u000e\u0012\u0197\u000b\u0012",
    "\u0003\u0012\u0005\u0012\u019a\n\u0012\u0003\u0013\u0003\u0013\u0007",
    "\u0013\u019e\n\u0013\f\u0013\u000e\u0013\u01a1\u000b\u0013\u0003\u0013",
    "\u0006\u0013\u01a4\n\u0013\r\u0013\u000e\u0013\u01a5\u0003\u0013\u0007",
    "\u0013\u01a9\n\u0013\f\u0013\u000e\u0013\u01ac\u000b\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u01b6\n\u0014\u0003\u0014\u0006\u0014\u01b9",
    "\n\u0014\r\u0014\u000e\u0014\u01ba\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u01bf\n\u0015\u0003\u0016\u0003\u0016\u0007\u0016\u01c3\n\u0016\f\u0016",
    "\u000e\u0016\u01c6\u000b\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u01ca",
    "\n\u0016\f\u0016\u000e\u0016\u01cd\u000b\u0016\u0003\u0016\u0005\u0016",
    "\u01d0\n\u0016\u0003\u0016\u0007\u0016\u01d3\n\u0016\f\u0016\u000e\u0016",
    "\u01d6\u000b\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0007",
    "\u0017\u01dc\n\u0017\f\u0017\u000e\u0017\u01df\u000b\u0017\u0003\u0017",
    "\u0003\u0017\u0007\u0017\u01e3\n\u0017\f\u0017\u000e\u0017\u01e6\u000b",
    "\u0017\u0003\u0017\u0005\u0017\u01e9\n\u0017\u0003\u0017\u0007\u0017",
    "\u01ec\n\u0017\f\u0017\u000e\u0017\u01ef\u000b\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0018\u0003\u0018\u0007\u0018\u01f5\n\u0018\f\u0018\u000e",
    "\u0018\u01f8\u000b\u0018\u0003\u0018\u0005\u0018\u01fb\n\u0018\u0003",
    "\u0018\u0007\u0018\u01fe\n\u0018\f\u0018\u000e\u0018\u0201\u000b\u0018",
    "\u0003\u0018\u0003\u0018\u0007\u0018\u0205\n\u0018\f\u0018\u000e\u0018",
    "\u0208\u000b\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u020c\n\u0018",
    "\u0005\u0018\u020e\n\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u0212",
    "\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u021b\n\u001a\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u021f\n\u001b\u0003\u001c\u0003\u001c\u0007\u001c",
    "\u0223\n\u001c\f\u001c\u000e\u001c\u0226\u000b\u001c\u0006\u001c\u0228",
    "\n\u001c\r\u001c\u000e\u001c\u0229\u0003\u001d\u0003\u001d\u0007\u001d",
    "\u022e\n\u001d\f\u001d\u000e\u001d\u0231\u000b\u001d\u0003\u001d\u0003",
    "\u001d\u0007\u001d\u0235\n\u001d\f\u001d\u000e\u001d\u0238\u000b\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0007\u001e\u023e\n",
    "\u001e\f\u001e\u000e\u001e\u0241\u000b\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001f\u0003\u001f\u0007\u001f\u0247\n\u001f\f\u001f\u000e\u001f",
    "\u024a\u000b\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u024e\n\u001f",
    "\f\u001f\u000e\u001f\u0251\u000b\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u0256\n\u001f\u0003 \u0003 \u0007 \u025a\n \f \u000e",
    " \u025d\u000b \u0003 \u0003 \u0007 \u0261\n \f \u000e \u0264\u000b ",
    "\u0003 \u0003 \u0003!\u0003!\u0007!\u026a\n!\f!\u000e!\u026d\u000b!",
    "\u0003!\u0003!\u0006!\u0271\n!\r!\u000e!\u0272\u0006!\u0275\n!\r!\u000e",
    "!\u0276\u0003!\u0003!\u0003\"\u0003\"\u0007\"\u027d\n\"\f\"\u000e\"",
    "\u0280\u000b\"\u0003\"\u0003\"\u0006\"\u0284\n\"\r\"\u000e\"\u0285\u0007",
    "\"\u0288\n\"\f\"\u000e\"\u028b\u000b\"\u0003\"\u0003\"\u0003#\u0003",
    "#\u0007#\u0291\n#\f#\u000e#\u0294\u000b#\u0003#\u0003#\u0007#\u0298",
    "\n#\f#\u000e#\u029b\u000b#\u0003#\u0003#\u0003$\u0007$\u02a0\n$\f$\u000e",
    "$\u02a3\u000b$\u0003$\u0003$\u0003$\u0007$\u02a8\n$\f$\u000e$\u02ab",
    "\u000b$\u0003$\u0007$\u02ae\n$\f$\u000e$\u02b1\u000b$\u0003$\u0007$",
    "\u02b4\n$\f$\u000e$\u02b7\u000b$\u0003%\u0003%\u0005%\u02bb\n%\u0003",
    "%\u0003%\u0003&\u0003&\u0007&\u02c1\n&\f&\u000e&\u02c4\u000b&\u0003",
    "&\u0003&\u0003&\u0003&\u0007&\u02ca\n&\f&\u000e&\u02cd\u000b&\u0003",
    "&\u0003&\u0007&\u02d1\n&\f&\u000e&\u02d4\u000b&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0005&\u02db\n&\u0003&\u0003&\u0003&\u0007&\u02e0\n",
    "&\f&\u000e&\u02e3\u000b&\u0003&\u0003&\u0006&\u02e7\n&\r&\u000e&\u02e8",
    "\u0005&\u02eb\n&\u0003\'\u0003\'\u0007\'\u02ef\n\'\f\'\u000e\'\u02f2",
    "\u000b\'\u0003\'\u0005\'\u02f5\n\'\u0003(\u0003(\u0007(\u02f9\n(\f(",
    "\u000e(\u02fc\u000b(\u0003(\u0003(\u0007(\u0300\n(\f(\u000e(\u0303\u000b",
    "(\u0003(\u0005(\u0306\n(\u0003)\u0003)\u0007)\u030a\n)\f)\u000e)\u030d",
    "\u000b)\u0003)\u0003)\u0007)\u0311\n)\f)\u000e)\u0314\u000b)\u0003)",
    "\u0003)\u0007)\u0318\n)\f)\u000e)\u031b\u000b)\u0003)\u0003)\u0007)",
    "\u031f\n)\f)\u000e)\u0322\u000b)\u0003)\u0003)\u0005)\u0326\n)\u0005",
    ")\u0328\n)\u0003*\u0003*\u0003*\u0005*\u032d\n*\u0003+\u0003+\u0003",
    ",\u0007,\u0332\n,\f,\u000e,\u0335\u000b,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0006,\u033c\n,\r,\u000e,\u033d\u0003,\u0006,\u0341\n,\r,\u000e",
    ",\u0342\u0003,\u0007,\u0346\n,\f,\u000e,\u0349\u000b,\u0003,\u0006,",
    "\u034c\n,\r,\u000e,\u034d\u0005,\u0350\n,\u0003,\u0003,\u0005,\u0354",
    "\n,\u0003-\u0003-\u0005-\u0358\n-\u0003-\u0003-\u0007-\u035c\n-\f-\u000e",
    "-\u035f\u000b-\u0003-\u0003-\u0006-\u0363\n-\r-\u000e-\u0364\u0003-",
    "\u0003-\u0003.\u0003.\u0007.\u036b\n.\f.\u000e.\u036e\u000b.\u0003.",
    "\u0005.\u0371\n.\u0003.\u0007.\u0374\n.\f.\u000e.\u0377\u000b.\u0003",
    ".\u0005.\u037a\n.\u0003/\u0003/\u0003/\u0003/\u0007/\u0380\n/\f/\u000e",
    "/\u0383\u000b/\u0003/\u0003/\u0003/\u00030\u00030\u00060\u038a\n0\r",
    "0\u000e0\u038b\u00030\u00030\u00060\u0390\n0\r0\u000e0\u0391\u00030",
    "\u00030\u00030\u00050\u0397\n0\u00031\u00031\u00051\u039b\n1\u00032",
    "\u00032\u00072\u039f\n2\f2\u000e2\u03a2\u000b2\u00032\u00032\u00072",
    "\u03a6\n2\f2\u000e2\u03a9\u000b2\u00032\u00032\u00072\u03ad\n2\f2\u000e",
    "2\u03b0\u000b2\u00032\u00032\u00062\u03b4\n2\r2\u000e2\u03b5\u00072",
    "\u03b8\n2\f2\u000e2\u03bb\u000b2\u00032\u00032\u00033\u00033\u00033",
    "\u00053\u03c2\n3\u00034\u00034\u00074\u03c6\n4\f4\u000e4\u03c9\u000b",
    "4\u00034\u00034\u00035\u00035\u00075\u03cf\n5\f5\u000e5\u03d2\u000b",
    "5\u00035\u00035\u00075\u03d6\n5\f5\u000e5\u03d9\u000b5\u00035\u0003",
    "5\u00075\u03dd\n5\f5\u000e5\u03e0\u000b5\u00035\u00035\u00075\u03e4",
    "\n5\f5\u000e5\u03e7\u000b5\u00075\u03e9\n5\f5\u000e5\u03ec\u000b5\u0003",
    "5\u00035\u00035\u00075\u03f1\n5\f5\u000e5\u03f4\u000b5\u00035\u0003",
    "5\u00036\u00036\u00066\u03fa\n6\r6\u000e6\u03fb\u00056\u03fe\n6\u0003",
    "6\u00036\u00066\u0402\n6\r6\u000e6\u0403\u00056\u0406\n6\u00036\u0003",
    "6\u00076\u040a\n6\f6\u000e6\u040d\u000b6\u00056\u040f\n6\u00036\u0003",
    "6\u00076\u0413\n6\f6\u000e6\u0416\u000b6\u00036\u00036\u00076\u041a",
    "\n6\f6\u000e6\u041d\u000b6\u00036\u00036\u00076\u0421\n6\f6\u000e6\u0424",
    "\u000b6\u00036\u00036\u00037\u00037\u00038\u00038\u00039\u00039\u0007",
    "9\u042e\n9\f9\u000e9\u0431\u000b9\u00039\u00039\u00079\u0435\n9\f9\u000e",
    "9\u0438\u000b9\u00039\u00039\u0003:\u0003:\u0007:\u043e\n:\f:\u000e",
    ":\u0441\u000b:\u0003:\u0003:\u0007:\u0445\n:\f:\u000e:\u0448\u000b:",
    "\u0003:\u0007:\u044b\n:\f:\u000e:\u044e\u000b:\u0003;\u0003;\u0003;",
    "\u0003;\u0003;\u0003;\u0003;\u0007;\u0457\n;\f;\u000e;\u045a\u000b;",
    "\u0003<\u0003<\u0006<\u045e\n<\r<\u000e<\u045f\u0003<\u0003<\u0003<",
    "\u0003<\u0003<\u0003<\u0003<\u0005<\u0469\n<\u0003=\u0003=\u0003=\u0007",
    "=\u046e\n=\f=\u000e=\u0471\u000b=\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0005>\u0478\n>\u0003?\u0003?\u0005?\u047c\n?\u0003@\u0006@\u047f",
    "\n@\r@\u000e@\u0480\u0003A\u0003A\u0003A\u0005A\u0486\nA\u0003B\u0003",
    "B\u0007B\u048a\nB\fB\u000eB\u048d\u000bB\u0003B\u0003B\u0007B\u0491",
    "\nB\fB\u000eB\u0494\u000bB\u0003B\u0003B\u0003B\u0002\u0002C\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0002",
    "\u0006\u0003\u0002*+\u0004\u0002&&00\u0004\u0002\u000f\u000f./\u0004",
    "\u0002\u0006\u000600\u0002\u051f\u0002\u00a2\u0003\u0002\u0002\u0002",
    "\u0004\u00a4\u0003\u0002\u0002\u0002\u0006\u00a8\u0003\u0002\u0002\u0002",
    "\b\u00aa\u0003\u0002\u0002\u0002\n\u00b8\u0003\u0002\u0002\u0002\f\u00c6",
    "\u0003\u0002\u0002\u0002\u000e\u00d4\u0003\u0002\u0002\u0002\u0010\u00d6",
    "\u0003\u0002\u0002\u0002\u0012\u00dc\u0003\u0002\u0002\u0002\u0014\u010f",
    "\u0003\u0002\u0002\u0002\u0016\u0119\u0003\u0002\u0002\u0002\u0018\u011b",
    "\u0003\u0002\u0002\u0002\u001a\u013e\u0003\u0002\u0002\u0002\u001c\u0148",
    "\u0003\u0002\u0002\u0002\u001e\u015f\u0003\u0002\u0002\u0002 \u0168",
    "\u0003\u0002\u0002\u0002\"\u0199\u0003\u0002\u0002\u0002$\u019b\u0003",
    "\u0002\u0002\u0002&\u01b5\u0003\u0002\u0002\u0002(\u01be\u0003\u0002",
    "\u0002\u0002*\u01c0\u0003\u0002\u0002\u0002,\u01d9\u0003\u0002\u0002",
    "\u0002.\u01f2\u0003\u0002\u0002\u00020\u0211\u0003\u0002\u0002\u0002",
    "2\u021a\u0003\u0002\u0002\u00024\u021e\u0003\u0002\u0002\u00026\u0227",
    "\u0003\u0002\u0002\u00028\u022b\u0003\u0002\u0002\u0002:\u023b\u0003",
    "\u0002\u0002\u0002<\u0244\u0003\u0002\u0002\u0002>\u0257\u0003\u0002",
    "\u0002\u0002@\u0267\u0003\u0002\u0002\u0002B\u027a\u0003\u0002\u0002",
    "\u0002D\u028e\u0003\u0002\u0002\u0002F\u02a1\u0003\u0002\u0002\u0002",
    "H\u02b8\u0003\u0002\u0002\u0002J\u02ea\u0003\u0002\u0002\u0002L\u02ec",
    "\u0003\u0002\u0002\u0002N\u02f6\u0003\u0002\u0002\u0002P\u0307\u0003",
    "\u0002\u0002\u0002R\u032c\u0003\u0002\u0002\u0002T\u032e\u0003\u0002",
    "\u0002\u0002V\u0333\u0003\u0002\u0002\u0002X\u0357\u0003\u0002\u0002",
    "\u0002Z\u0368\u0003\u0002\u0002\u0002\\\u037b\u0003\u0002\u0002\u0002",
    "^\u0387\u0003\u0002\u0002\u0002`\u039a\u0003\u0002\u0002\u0002b\u039c",
    "\u0003\u0002\u0002\u0002d\u03c1\u0003\u0002\u0002\u0002f\u03c3\u0003",
    "\u0002\u0002\u0002h\u03cc\u0003\u0002\u0002\u0002j\u040e\u0003\u0002",
    "\u0002\u0002l\u0427\u0003\u0002\u0002\u0002n\u0429\u0003\u0002\u0002",
    "\u0002p\u042b\u0003\u0002\u0002\u0002r\u043b\u0003\u0002\u0002\u0002",
    "t\u044f\u0003\u0002\u0002\u0002v\u045b\u0003\u0002\u0002\u0002x\u046a",
    "\u0003\u0002\u0002\u0002z\u0472\u0003\u0002\u0002\u0002|\u047b\u0003",
    "\u0002\u0002\u0002~\u047e\u0003\u0002\u0002\u0002\u0080\u0485\u0003",
    "\u0002\u0002\u0002\u0082\u0487\u0003\u0002\u0002\u0002\u0084\u0086\u0005",
    "\u0004\u0003\u0002\u0085\u0084\u0003\u0002\u0002\u0002\u0086\u0089\u0003",
    "\u0002\u0002\u0002\u0087\u0085\u0003\u0002\u0002\u0002\u0087\u0088\u0003",
    "\u0002\u0002\u0002\u0088\u008d\u0003\u0002\u0002\u0002\u0089\u0087\u0003",
    "\u0002\u0002\u0002\u008a\u008c\u0005\u0006\u0004\u0002\u008b\u008a\u0003",
    "\u0002\u0002\u0002\u008c\u008f\u0003\u0002\u0002\u0002\u008d\u008b\u0003",
    "\u0002\u0002\u0002\u008d\u008e\u0003\u0002\u0002\u0002\u008e\u009d\u0003",
    "\u0002\u0002\u0002\u008f\u008d\u0003\u0002\u0002\u0002\u0090\u009e\u0005",
    "\u0012\n\u0002\u0091\u009e\u0005*\u0016\u0002\u0092\u009e\u0005 \u0011",
    "\u0002\u0093\u009e\u0005X-\u0002\u0094\u009e\u0005\\/\u0002\u0095\u009e",
    "\u0005^0\u0002\u0096\u009e\u0005b2\u0002\u0097\u009e\u0005v<\u0002\u0098",
    "\u009a\u0005\u0004\u0003\u0002\u0099\u0098\u0003\u0002\u0002\u0002\u009a",
    "\u009b\u0003\u0002\u0002\u0002\u009b\u0099\u0003\u0002\u0002\u0002\u009b",
    "\u009c\u0003\u0002\u0002\u0002\u009c\u009e\u0003\u0002\u0002\u0002\u009d",
    "\u0090\u0003\u0002\u0002\u0002\u009d\u0091\u0003\u0002\u0002\u0002\u009d",
    "\u0092\u0003\u0002\u0002\u0002\u009d\u0093\u0003\u0002\u0002\u0002\u009d",
    "\u0094\u0003\u0002\u0002\u0002\u009d\u0095\u0003\u0002\u0002\u0002\u009d",
    "\u0096\u0003\u0002\u0002\u0002\u009d\u0097\u0003\u0002\u0002\u0002\u009d",
    "\u0099\u0003\u0002\u0002\u0002\u009e\u009f\u0003\u0002\u0002\u0002\u009f",
    "\u009d\u0003\u0002\u0002\u0002\u009f\u00a0\u0003\u0002\u0002\u0002\u00a0",
    "\u00a3\u0003\u0002\u0002\u0002\u00a1\u00a3\u0007\u0002\u0002\u0003\u00a2",
    "\u0087\u0003\u0002\u0002\u0002\u00a2\u00a1\u0003\u0002\u0002\u0002\u00a3",
    "\u0003\u0003\u0002\u0002\u0002\u00a4\u00a5\t\u0002\u0002\u0002\u00a5",
    "\u0005\u0003\u0002\u0002\u0002\u00a6\u00a9\u0005\b\u0005\u0002\u00a7",
    "\u00a9\u0005\n\u0006\u0002\u00a8\u00a6\u0003\u0002\u0002\u0002\u00a8",
    "\u00a7\u0003\u0002\u0002\u0002\u00a9\u0007\u0003\u0002\u0002\u0002\u00aa",
    "\u00ab\u0007\u0003\u0002\u0002\u00ab\u00ac\u0007+\u0002\u0002\u00ac",
    "\u00b1\u0005\f\u0007\u0002\u00ad\u00ae\u0007+\u0002\u0002\u00ae\u00af",
    "\u0007\u000e\u0002\u0002\u00af\u00b0\u0007+\u0002\u0002\u00b0\u00b2",
    "\u00070\u0002\u0002\u00b1\u00ad\u0003\u0002\u0002\u0002\u00b1\u00b2",
    "\u0003\u0002\u0002\u0002\u00b2\u00b4\u0003\u0002\u0002\u0002\u00b3\u00b5",
    "\u0007*\u0002\u0002\u00b4\u00b3\u0003\u0002\u0002\u0002\u00b5\u00b6",
    "\u0003\u0002\u0002\u0002\u00b6\u00b4\u0003\u0002\u0002\u0002\u00b6\u00b7",
    "\u0003\u0002\u0002\u0002\u00b7\t\u0003\u0002\u0002\u0002\u00b8\u00b9",
    "\u0007\u0004\u0002\u0002\u00b9\u00ba\u0007+\u0002\u0002\u00ba\u00bb",
    "\u0005\f\u0007\u0002\u00bb\u00bc\u0007+\u0002\u0002\u00bc\u00bd\u0007",
    "\u0003\u0002\u0002\u00bd\u00be\u0007+\u0002\u0002\u00be\u00c0\u0005",
    "x=\u0002\u00bf\u00c1\u0007*\u0002\u0002\u00c0\u00bf\u0003\u0002\u0002",
    "\u0002\u00c1\u00c2\u0003\u0002\u0002\u0002\u00c2\u00c0\u0003\u0002\u0002",
    "\u0002\u00c2\u00c3\u0003\u0002\u0002\u0002\u00c3\u000b\u0003\u0002\u0002",
    "\u0002\u00c4\u00c7\u0005\u000e\b\u0002\u00c5\u00c7\u0005\u0010\t\u0002",
    "\u00c6\u00c4\u0003\u0002\u0002\u0002\u00c6\u00c5\u0003\u0002\u0002\u0002",
    "\u00c7\r\u0003\u0002\u0002\u0002\u00c8\u00ca\u0007$\u0002\u0002\u00c9",
    "\u00cb\t\u0003\u0002\u0002\u00ca\u00c9\u0003\u0002\u0002\u0002\u00cb",
    "\u00cc\u0003\u0002\u0002\u0002\u00cc\u00ca\u0003\u0002\u0002\u0002\u00cc",
    "\u00cd\u0003\u0002\u0002\u0002\u00cd\u00d5\u0003\u0002\u0002\u0002\u00ce",
    "\u00d0\u0007%\u0002\u0002\u00cf\u00d1\t\u0003\u0002\u0002\u00d0\u00cf",
    "\u0003\u0002\u0002\u0002\u00d1\u00d2\u0003\u0002\u0002\u0002\u00d2\u00d0",
    "\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003\u0002\u0002\u0002\u00d3\u00d5",
    "\u0003\u0002\u0002\u0002\u00d4\u00c8\u0003\u0002\u0002\u0002\u00d4\u00ce",
    "\u0003\u0002\u0002\u0002\u00d5\u000f\u0003\u0002\u0002\u0002\u00d6\u00d8",
    "\u0007#\u0002\u0002\u00d7\u00d9\t\u0003\u0002\u0002\u00d8\u00d7\u0003",
    "\u0002\u0002\u0002\u00d9\u00da\u0003\u0002\u0002\u0002\u00da\u00d8\u0003",
    "\u0002\u0002\u0002\u00da\u00db\u0003\u0002\u0002\u0002\u00db\u0011\u0003",
    "\u0002\u0002\u0002\u00dc\u00de\u0007\u0005\u0002\u0002\u00dd\u00df\u0005",
    "\u0004\u0003\u0002\u00de\u00dd\u0003\u0002\u0002\u0002\u00df\u00e0\u0003",
    "\u0002\u0002\u0002\u00e0\u00de\u0003\u0002\u0002\u0002\u00e0\u00e1\u0003",
    "\u0002\u0002\u0002\u00e1\u00e2\u0003\u0002\u0002\u0002\u00e2\u00e6\u0005",
    "\u0016\f\u0002\u00e3\u00e5\u0005\u0004\u0003\u0002\u00e4\u00e3\u0003",
    "\u0002\u0002\u0002\u00e5\u00e8\u0003\u0002\u0002\u0002\u00e6\u00e4\u0003",
    "\u0002\u0002\u0002\u00e6\u00e7\u0003\u0002\u0002\u0002\u00e7\u00ea\u0003",
    "\u0002\u0002\u0002\u00e8\u00e6\u0003\u0002\u0002\u0002\u00e9\u00eb\u0005",
    "\u0018\r\u0002\u00ea\u00e9\u0003\u0002\u0002\u0002\u00ea\u00eb\u0003",
    "\u0002\u0002\u0002\u00eb\u00ed\u0003\u0002\u0002\u0002\u00ec\u00ee\u0005",
    "\u0004\u0003\u0002\u00ed\u00ec\u0003\u0002\u0002\u0002\u00ee\u00ef\u0003",
    "\u0002\u0002\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003",
    "\u0002\u0002\u0002\u00f0\u010d\u0003\u0002\u0002\u0002\u00f1\u010e\u0005",
    "\u001c\u000f\u0002\u00f2\u00f6\u0007\"\u0002\u0002\u00f3\u00f5\u0005",
    "\u0004\u0003\u0002\u00f4\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f8\u0003",
    "\u0002\u0002\u0002\u00f6\u00f4\u0003\u0002\u0002\u0002\u00f6\u00f7\u0003",
    "\u0002\u0002\u0002\u00f7\u00f9\u0003\u0002\u0002\u0002\u00f8\u00f6\u0003",
    "\u0002\u0002\u0002\u00f9\u010a\u0005\u0014\u000b\u0002\u00fa\u00fc\u0005",
    "\u0004\u0003\u0002\u00fb\u00fa\u0003\u0002\u0002\u0002\u00fc\u00ff\u0003",
    "\u0002\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fd\u00fe\u0003",
    "\u0002\u0002\u0002\u00fe\u0100\u0003\u0002\u0002\u0002\u00ff\u00fd\u0003",
    "\u0002\u0002\u0002\u0100\u0104\u0007\'\u0002\u0002\u0101\u0103\u0005",
    "\u0004\u0003\u0002\u0102\u0101\u0003\u0002\u0002\u0002\u0103\u0106\u0003",
    "\u0002\u0002\u0002\u0104\u0102\u0003\u0002\u0002\u0002\u0104\u0105\u0003",
    "\u0002\u0002\u0002\u0105\u0107\u0003\u0002\u0002\u0002\u0106\u0104\u0003",
    "\u0002\u0002\u0002\u0107\u0109\u0005\u0014\u000b\u0002\u0108\u00fd\u0003",
    "\u0002\u0002\u0002\u0109\u010c\u0003\u0002\u0002\u0002\u010a\u0108\u0003",
    "\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b\u010e\u0003",
    "\u0002\u0002\u0002\u010c\u010a\u0003\u0002\u0002\u0002\u010d\u00f1\u0003",
    "\u0002\u0002\u0002\u010d\u00f2\u0003\u0002\u0002\u0002\u010e\u0013\u0003",
    "\u0002\u0002\u0002\u010f\u0113\u0005\u0016\f\u0002\u0110\u0112\u0005",
    "\u0004\u0003\u0002\u0111\u0110\u0003\u0002\u0002\u0002\u0112\u0115\u0003",
    "\u0002\u0002\u0002\u0113\u0111\u0003\u0002\u0002\u0002\u0113\u0114\u0003",
    "\u0002\u0002\u0002\u0114\u0117\u0003\u0002\u0002\u0002\u0115\u0113\u0003",
    "\u0002\u0002\u0002\u0116\u0118\u0005\u0018\r\u0002\u0117\u0116\u0003",
    "\u0002\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u0015\u0003",
    "\u0002\u0002\u0002\u0119\u011a\u0005~@\u0002\u011a\u0017\u0003\u0002",
    "\u0002\u0002\u011b\u011f\u0007\u001d\u0002\u0002\u011c\u011e\u0005\u0004",
    "\u0003\u0002\u011d\u011c\u0003\u0002\u0002\u0002\u011e\u0121\u0003\u0002",
    "\u0002\u0002\u011f\u011d\u0003\u0002\u0002\u0002\u011f\u0120\u0003\u0002",
    "\u0002\u0002\u0120\u0122\u0003\u0002\u0002\u0002\u0121\u011f\u0003\u0002",
    "\u0002\u0002\u0122\u0126\u0005\u001a\u000e\u0002\u0123\u0125\u0005\u0004",
    "\u0003\u0002\u0124\u0123\u0003\u0002\u0002\u0002\u0125\u0128\u0003\u0002",
    "\u0002\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0126\u0127\u0003\u0002",
    "\u0002\u0002\u0127\u0139\u0003\u0002\u0002\u0002\u0128\u0126\u0003\u0002",
    "\u0002\u0002\u0129\u012d\u0007\u0018\u0002\u0002\u012a\u012c\u0005\u0004",
    "\u0003\u0002\u012b\u012a\u0003\u0002\u0002\u0002\u012c\u012f\u0003\u0002",
    "\u0002\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d\u012e\u0003\u0002",
    "\u0002\u0002\u012e\u0130\u0003\u0002\u0002\u0002\u012f\u012d\u0003\u0002",
    "\u0002\u0002\u0130\u0134\u0005\u001a\u000e\u0002\u0131\u0133\u0005\u0004",
    "\u0003\u0002\u0132\u0131\u0003\u0002\u0002\u0002\u0133\u0136\u0003\u0002",
    "\u0002\u0002\u0134\u0132\u0003\u0002\u0002\u0002\u0134\u0135\u0003\u0002",
    "\u0002\u0002\u0135\u0138\u0003\u0002\u0002\u0002\u0136\u0134\u0003\u0002",
    "\u0002\u0002\u0137\u0129\u0003\u0002\u0002\u0002\u0138\u013b\u0003\u0002",
    "\u0002\u0002\u0139\u0137\u0003\u0002\u0002\u0002\u0139\u013a\u0003\u0002",
    "\u0002\u0002\u013a\u013c\u0003\u0002\u0002\u0002\u013b\u0139\u0003\u0002",
    "\u0002\u0002\u013c\u013d\u0007\u001e\u0002\u0002\u013d\u0019\u0003\u0002",
    "\u0002\u0002\u013e\u0142\u0005~@\u0002\u013f\u0141\u0005\u0004\u0003",
    "\u0002\u0140\u013f\u0003\u0002\u0002\u0002\u0141\u0144\u0003\u0002\u0002",
    "\u0002\u0142\u0140\u0003\u0002\u0002\u0002\u0142\u0143\u0003\u0002\u0002",
    "\u0002\u0143\u0146\u0003\u0002\u0002\u0002\u0144\u0142\u0003\u0002\u0002",
    "\u0002\u0145\u0147\u0005\u0018\r\u0002\u0146\u0145\u0003\u0002\u0002",
    "\u0002\u0146\u0147\u0003\u0002\u0002\u0002\u0147\u001b\u0003\u0002\u0002",
    "\u0002\u0148\u014c\u0007\u0019\u0002\u0002\u0149\u014b\u0005\u0004\u0003",
    "\u0002\u014a\u0149\u0003\u0002\u0002\u0002\u014b\u014e\u0003\u0002\u0002",
    "\u0002\u014c\u014a\u0003\u0002\u0002\u0002\u014c\u014d\u0003\u0002\u0002",
    "\u0002\u014d\u0156\u0003\u0002\u0002\u0002\u014e\u014c\u0003\u0002\u0002",
    "\u0002\u014f\u0151\u0007+\u0002\u0002\u0150\u014f\u0003\u0002\u0002",
    "\u0002\u0151\u0154\u0003\u0002\u0002\u0002\u0152\u0150\u0003\u0002\u0002",
    "\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0155\u0003\u0002\u0002",
    "\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0155\u0157\u0005\u001e\u0010",
    "\u0002\u0156\u0152\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002",
    "\u0002\u0158\u0156\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002\u0002",
    "\u0002\u0159\u015b\u0003\u0002\u0002\u0002\u015a\u015c\u0005\u0004\u0003",
    "\u0002\u015b\u015a\u0003\u0002\u0002\u0002\u015b\u015c\u0003\u0002\u0002",
    "\u0002\u015c\u015d\u0003\u0002\u0002\u0002\u015d\u015e\u0007\u001a\u0002",
    "\u0002\u015e\u001d\u0003\u0002\u0002\u0002\u015f\u0160\u00070\u0002",
    "\u0002\u0160\u0161\u0007)\u0002\u0002\u0161\u0165\u0005~@\u0002\u0162",
    "\u0164\u0007*\u0002\u0002\u0163\u0162\u0003\u0002\u0002\u0002\u0164",
    "\u0167\u0003\u0002\u0002\u0002\u0165\u0163\u0003\u0002\u0002\u0002\u0165",
    "\u0166\u0003\u0002\u0002\u0002\u0166\u001f\u0003\u0002\u0002\u0002\u0167",
    "\u0165\u0003\u0002\u0002\u0002\u0168\u016a\u0007\u0006\u0002\u0002\u0169",
    "\u016b\u0005\u0004\u0003\u0002\u016a\u0169\u0003\u0002\u0002\u0002\u016b",
    "\u016c\u0003\u0002\u0002\u0002\u016c\u016a\u0003\u0002\u0002\u0002\u016c",
    "\u016d\u0003\u0002\u0002\u0002\u016d\u018c\u0003\u0002\u0002\u0002\u016e",
    "\u0172\u00070\u0002\u0002\u016f\u0171\u0005\u0004\u0003\u0002\u0170",
    "\u016f\u0003\u0002\u0002\u0002\u0171\u0174\u0003\u0002\u0002\u0002\u0172",
    "\u0170\u0003\u0002\u0002\u0002\u0172\u0173\u0003\u0002\u0002\u0002\u0173",
    "\u0176\u0003\u0002\u0002\u0002\u0174\u0172\u0003\u0002\u0002\u0002\u0175",
    "\u016e\u0003\u0002\u0002\u0002\u0175\u0176\u0003\u0002\u0002\u0002\u0176",
    "\u0177\u0003\u0002\u0002\u0002\u0177\u0179\u0007\u001b\u0002\u0002\u0178",
    "\u017a\u0005t;\u0002\u0179\u0178\u0003\u0002\u0002\u0002\u0179\u017a",
    "\u0003\u0002\u0002\u0002\u017a\u017b\u0003\u0002\u0002\u0002\u017b\u017f",
    "\u0007\u001c\u0002\u0002\u017c\u017e\u0005\u0004\u0003\u0002\u017d\u017c",
    "\u0003\u0002\u0002\u0002\u017e\u0181\u0003\u0002\u0002\u0002\u017f\u017d",
    "\u0003\u0002\u0002\u0002\u017f\u0180\u0003\u0002\u0002\u0002\u0180\u018a",
    "\u0003\u0002\u0002\u0002\u0181\u017f\u0003\u0002\u0002\u0002\u0182\u0183",
    "\u0007)\u0002\u0002\u0183\u0187\u0005r:\u0002\u0184\u0186\u0005\u0004",
    "\u0003\u0002\u0185\u0184\u0003\u0002\u0002\u0002\u0186\u0189\u0003\u0002",
    "\u0002\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0187\u0188\u0003\u0002",
    "\u0002\u0002\u0188\u018b\u0003\u0002\u0002\u0002\u0189\u0187\u0003\u0002",
    "\u0002\u0002\u018a\u0182\u0003\u0002\u0002\u0002\u018a\u018b\u0003\u0002",
    "\u0002\u0002\u018b\u018d\u0003\u0002\u0002\u0002\u018c\u0175\u0003\u0002",
    "\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018e\u0003\u0002",
    "\u0002\u0002\u018e\u018f\u0005\"\u0012\u0002\u018f!\u0003\u0002\u0002",
    "\u0002\u0190\u019a\u0005$\u0013\u0002\u0191\u0195\u0007\"\u0002\u0002",
    "\u0192\u0194\u0005\u0004\u0003\u0002\u0193\u0192\u0003\u0002\u0002\u0002",
    "\u0194\u0197\u0003\u0002\u0002\u0002\u0195\u0193\u0003\u0002\u0002\u0002",
    "\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0198\u0003\u0002\u0002\u0002",
    "\u0197\u0195\u0003\u0002\u0002\u0002\u0198\u019a\u00050\u0019\u0002",
    "\u0199\u0190\u0003\u0002\u0002\u0002\u0199\u0191\u0003\u0002\u0002\u0002",
    "\u019a#\u0003\u0002\u0002\u0002\u019b\u019f\u0007\u0019\u0002\u0002",
    "\u019c\u019e\u0005\u0004\u0003\u0002\u019d\u019c\u0003\u0002\u0002\u0002",
    "\u019e\u01a1\u0003\u0002\u0002\u0002\u019f\u019d\u0003\u0002\u0002\u0002",
    "\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a3\u0003\u0002\u0002\u0002",
    "\u01a1\u019f\u0003\u0002\u0002\u0002\u01a2\u01a4\u0005&\u0014\u0002",
    "\u01a3\u01a2\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002",
    "\u01a5\u01a3\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002",
    "\u01a6\u01aa\u0003\u0002\u0002\u0002\u01a7\u01a9\u0005\u0004\u0003\u0002",
    "\u01a8\u01a7\u0003\u0002\u0002\u0002\u01a9\u01ac\u0003\u0002\u0002\u0002",
    "\u01aa\u01a8\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002",
    "\u01ab\u01ad\u0003\u0002\u0002\u0002\u01ac\u01aa\u0003\u0002\u0002\u0002",
    "\u01ad\u01ae\u0007\u001a\u0002\u0002\u01ae%\u0003\u0002\u0002\u0002",
    "\u01af\u01b6\u0005(\u0015\u0002\u01b0\u01b6\u0005.\u0018\u0002\u01b1",
    "\u01b6\u0005J&\u0002\u01b2\u01b6\u0005L\'\u0002\u01b3\u01b6\u0005N(",
    "\u0002\u01b4\u01b6\u0005P)\u0002\u01b5\u01af\u0003\u0002\u0002\u0002",
    "\u01b5\u01b0\u0003\u0002\u0002\u0002\u01b5\u01b1\u0003\u0002\u0002\u0002",
    "\u01b5\u01b2\u0003\u0002\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002",
    "\u01b5\u01b4\u0003\u0002\u0002\u0002\u01b6\u01b8\u0003\u0002\u0002\u0002",
    "\u01b7\u01b9\u0005\u0004\u0003\u0002\u01b8\u01b7\u0003\u0002\u0002\u0002",
    "\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002\u0002",
    "\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bb\'\u0003\u0002\u0002\u0002",
    "\u01bc\u01bf\u0005*\u0016\u0002\u01bd\u01bf\u0005,\u0017\u0002\u01be",
    "\u01bc\u0003\u0002\u0002\u0002\u01be\u01bd\u0003\u0002\u0002\u0002\u01bf",
    ")\u0003\u0002\u0002\u0002\u01c0\u01c4\u0007\n\u0002\u0002\u01c1\u01c3",
    "\u0005\u0004\u0003\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c3\u01c6",
    "\u0003\u0002\u0002\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002\u01c4\u01c5",
    "\u0003\u0002\u0002\u0002\u01c5\u01cf\u0003\u0002\u0002\u0002\u01c6\u01c4",
    "\u0003\u0002\u0002\u0002\u01c7\u01cb\u00070\u0002\u0002\u01c8\u01ca",
    "\u0005\u0004\u0003\u0002\u01c9\u01c8\u0003\u0002\u0002\u0002\u01ca\u01cd",
    "\u0003\u0002\u0002\u0002\u01cb\u01c9\u0003\u0002\u0002\u0002\u01cb\u01cc",
    "\u0003\u0002\u0002\u0002\u01cc\u01ce\u0003\u0002\u0002\u0002\u01cd\u01cb",
    "\u0003\u0002\u0002\u0002\u01ce\u01d0\u0007)\u0002\u0002\u01cf\u01c7",
    "\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d4",
    "\u0003\u0002\u0002\u0002\u01d1\u01d3\u0005\u0004\u0003\u0002\u01d2\u01d1",
    "\u0003\u0002\u0002\u0002\u01d3\u01d6\u0003\u0002\u0002\u0002\u01d4\u01d2",
    "\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d7",
    "\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d7\u01d8",
    "\u0005.\u0018\u0002\u01d8+\u0003\u0002\u0002\u0002\u01d9\u01dd\u0007",
    "\u000b\u0002\u0002\u01da\u01dc\u0005\u0004\u0003\u0002\u01db\u01da\u0003",
    "\u0002\u0002\u0002\u01dc\u01df\u0003\u0002\u0002\u0002\u01dd\u01db\u0003",
    "\u0002\u0002\u0002\u01dd\u01de\u0003\u0002\u0002\u0002\u01de\u01e8\u0003",
    "\u0002\u0002\u0002\u01df\u01dd\u0003\u0002\u0002\u0002\u01e0\u01e4\u0007",
    "0\u0002\u0002\u01e1\u01e3\u0005\u0004\u0003\u0002\u01e2\u01e1\u0003",
    "\u0002\u0002\u0002\u01e3\u01e6\u0003\u0002\u0002\u0002\u01e4\u01e2\u0003",
    "\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5\u01e7\u0003",
    "\u0002\u0002\u0002\u01e6\u01e4\u0003\u0002\u0002\u0002\u01e7\u01e9\u0007",
    ")\u0002\u0002\u01e8\u01e0\u0003\u0002\u0002\u0002\u01e8\u01e9\u0003",
    "\u0002\u0002\u0002\u01e9\u01ed\u0003\u0002\u0002\u0002\u01ea\u01ec\u0005",
    "\u0004\u0003\u0002\u01eb\u01ea\u0003\u0002\u0002\u0002\u01ec\u01ef\u0003",
    "\u0002\u0002\u0002\u01ed\u01eb\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003",
    "\u0002\u0002\u0002\u01ee\u01f0\u0003\u0002\u0002\u0002\u01ef\u01ed\u0003",
    "\u0002\u0002\u0002\u01f0\u01f1\u0005.\u0018\u0002\u01f1-\u0003\u0002",
    "\u0002\u0002\u01f2\u01f6\u0005~@\u0002\u01f3\u01f5\u0005\u0004\u0003",
    "\u0002\u01f4\u01f3\u0003\u0002\u0002\u0002\u01f5\u01f8\u0003\u0002\u0002",
    "\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002\u0002",
    "\u0002\u01f7\u020d\u0003\u0002\u0002\u0002\u01f8\u01f6\u0003\u0002\u0002",
    "\u0002\u01f9\u01fb\u0005\u0018\r\u0002\u01fa\u01f9\u0003\u0002\u0002",
    "\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb\u01ff\u0003\u0002\u0002",
    "\u0002\u01fc\u01fe\u0005\u0004\u0003\u0002\u01fd\u01fc\u0003\u0002\u0002",
    "\u0002\u01fe\u0201\u0003\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002",
    "\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0202\u0003\u0002\u0002",
    "\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0202\u0206\u0007\"\u0002",
    "\u0002\u0203\u0205\u0005\u0004\u0003\u0002\u0204\u0203\u0003\u0002\u0002",
    "\u0002\u0205\u0208\u0003\u0002\u0002\u0002\u0206\u0204\u0003\u0002\u0002",
    "\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207\u0209\u0003\u0002\u0002",
    "\u0002\u0208\u0206\u0003\u0002\u0002\u0002\u0209\u020e\u00050\u0019",
    "\u0002\u020a\u020c\u0005\u0018\r\u0002\u020b\u020a\u0003\u0002\u0002",
    "\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c\u020e\u0003\u0002\u0002",
    "\u0002\u020d\u01fa\u0003\u0002\u0002\u0002\u020d\u020b\u0003\u0002\u0002",
    "\u0002\u020e/\u0003\u0002\u0002\u0002\u020f\u0212\u00052\u001a\u0002",
    "\u0210\u0212\u00056\u001c\u0002\u0211\u020f\u0003\u0002\u0002\u0002",
    "\u0211\u0210\u0003\u0002\u0002\u0002\u02121\u0003\u0002\u0002\u0002",
    "\u0213\u021b\u0005 \u0011\u0002\u0214\u021b\u0005J&\u0002\u0215\u021b",
    "\u0005~@\u0002\u0216\u021b\u0005T+\u0002\u0217\u021b\u00058\u001d\u0002",
    "\u0218\u021b\u0005:\u001e\u0002\u0219\u021b\u0005<\u001f\u0002\u021a",
    "\u0213\u0003\u0002\u0002\u0002\u021a\u0214\u0003\u0002\u0002\u0002\u021a",
    "\u0215\u0003\u0002\u0002\u0002\u021a\u0216\u0003\u0002\u0002\u0002\u021a",
    "\u0217\u0003\u0002\u0002\u0002\u021a\u0218\u0003\u0002\u0002\u0002\u021a",
    "\u0219\u0003\u0002\u0002\u0002\u021b3\u0003\u0002\u0002\u0002\u021c",
    "\u021f\u0005V,\u0002\u021d\u021f\u00052\u001a\u0002\u021e\u021c\u0003",
    "\u0002\u0002\u0002\u021e\u021d\u0003\u0002\u0002\u0002\u021f5\u0003",
    "\u0002\u0002\u0002\u0220\u0224\u00054\u001b\u0002\u0221\u0223\u0007",
    "+\u0002\u0002\u0222\u0221\u0003\u0002\u0002\u0002\u0223\u0226\u0003",
    "\u0002\u0002\u0002\u0224\u0222\u0003\u0002\u0002\u0002\u0224\u0225\u0003",
    "\u0002\u0002\u0002\u0225\u0228\u0003\u0002\u0002\u0002\u0226\u0224\u0003",
    "\u0002\u0002\u0002\u0227\u0220\u0003\u0002\u0002\u0002\u0228\u0229\u0003",
    "\u0002\u0002\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u0229\u022a\u0003",
    "\u0002\u0002\u0002\u022a7\u0003\u0002\u0002\u0002\u022b\u022f\u0007",
    "\u001b\u0002\u0002\u022c\u022e\u0007+\u0002\u0002\u022d\u022c\u0003",
    "\u0002\u0002\u0002\u022e\u0231\u0003\u0002\u0002\u0002\u022f\u022d\u0003",
    "\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230\u0232\u0003",
    "\u0002\u0002\u0002\u0231\u022f\u0003\u0002\u0002\u0002\u0232\u0236\u0005",
    "6\u001c\u0002\u0233\u0235\u0007+\u0002\u0002\u0234\u0233\u0003\u0002",
    "\u0002\u0002\u0235\u0238\u0003\u0002\u0002\u0002\u0236\u0234\u0003\u0002",
    "\u0002\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237\u0239\u0003\u0002",
    "\u0002\u0002\u0238\u0236\u0003\u0002\u0002\u0002\u0239\u023a\u0007\u001c",
    "\u0002\u0002\u023a9\u0003\u0002\u0002\u0002\u023b\u023f\u0007\u0005",
    "\u0002\u0002\u023c\u023e\u0007+\u0002\u0002\u023d\u023c\u0003\u0002",
    "\u0002\u0002\u023e\u0241\u0003\u0002\u0002\u0002\u023f\u023d\u0003\u0002",
    "\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002\u0240\u0242\u0003\u0002",
    "\u0002\u0002\u0241\u023f\u0003\u0002\u0002\u0002\u0242\u0243\u00052",
    "\u001a\u0002\u0243;\u0003\u0002\u0002\u0002\u0244\u0248\u0007\u0016",
    "\u0002\u0002\u0245\u0247\u0007+\u0002\u0002\u0246\u0245\u0003\u0002",
    "\u0002\u0002\u0247\u024a\u0003\u0002\u0002\u0002\u0248\u0246\u0003\u0002",
    "\u0002\u0002\u0248\u0249\u0003\u0002\u0002\u0002\u0249\u024b\u0003\u0002",
    "\u0002\u0002\u024a\u0248\u0003\u0002\u0002\u0002\u024b\u024f\u0005\u0014",
    "\u000b\u0002\u024c\u024e\u0007+\u0002\u0002\u024d\u024c\u0003\u0002",
    "\u0002\u0002\u024e\u0251\u0003\u0002\u0002\u0002\u024f\u024d\u0003\u0002",
    "\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250\u0255\u0003\u0002",
    "\u0002\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0252\u0256\u0005>",
    " \u0002\u0253\u0256\u0005@!\u0002\u0254\u0256\u0005B\"\u0002\u0255\u0252",
    "\u0003\u0002\u0002\u0002\u0255\u0253\u0003\u0002\u0002\u0002\u0255\u0254",
    "\u0003\u0002\u0002\u0002\u0256=\u0003\u0002\u0002\u0002\u0257\u025b",
    "\u0007\u001f\u0002\u0002\u0258\u025a\u0005\u0004\u0003\u0002\u0259\u0258",
    "\u0003\u0002\u0002\u0002\u025a\u025d\u0003\u0002\u0002\u0002\u025b\u0259",
    "\u0003\u0002\u0002\u0002\u025b\u025c\u0003\u0002\u0002\u0002\u025c\u025e",
    "\u0003\u0002\u0002\u0002\u025d\u025b\u0003\u0002\u0002\u0002\u025e\u0262",
    "\u0005F$\u0002\u025f\u0261\u0005\u0004\u0003\u0002\u0260\u025f\u0003",
    "\u0002\u0002\u0002\u0261\u0264\u0003\u0002\u0002\u0002\u0262\u0260\u0003",
    "\u0002\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002\u0263\u0265\u0003",
    "\u0002\u0002\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0265\u0266\u0007",
    " \u0002\u0002\u0266?\u0003\u0002\u0002\u0002\u0267\u026b\u0007\u0019",
    "\u0002\u0002\u0268\u026a\u0005\u0004\u0003\u0002\u0269\u0268\u0003\u0002",
    "\u0002\u0002\u026a\u026d\u0003\u0002\u0002\u0002\u026b\u0269\u0003\u0002",
    "\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u0274\u0003\u0002",
    "\u0002\u0002\u026d\u026b\u0003\u0002\u0002\u0002\u026e\u0270\u0005.",
    "\u0018\u0002\u026f\u0271\u0005\u0004\u0003\u0002\u0270\u026f\u0003\u0002",
    "\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002\u0272\u0270\u0003\u0002",
    "\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273\u0275\u0003\u0002",
    "\u0002\u0002\u0274\u026e\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002",
    "\u0002\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0276\u0277\u0003\u0002",
    "\u0002\u0002\u0277\u0278\u0003\u0002\u0002\u0002\u0278\u0279\u0007\u001a",
    "\u0002\u0002\u0279A\u0003\u0002\u0002\u0002\u027a\u027e\u0007\u0019",
    "\u0002\u0002\u027b\u027d\u0005\u0004\u0003\u0002\u027c\u027b\u0003\u0002",
    "\u0002\u0002\u027d\u0280\u0003\u0002\u0002\u0002\u027e\u027c\u0003\u0002",
    "\u0002\u0002\u027e\u027f\u0003\u0002\u0002\u0002\u027f\u0289\u0003\u0002",
    "\u0002\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0281\u0283\u0005D",
    "#\u0002\u0282\u0284\u0005\u0004\u0003\u0002\u0283\u0282\u0003\u0002",
    "\u0002\u0002\u0284\u0285\u0003\u0002\u0002\u0002\u0285\u0283\u0003\u0002",
    "\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0288\u0003\u0002",
    "\u0002\u0002\u0287\u0281\u0003\u0002\u0002\u0002\u0288\u028b\u0003\u0002",
    "\u0002\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002",
    "\u0002\u0002\u028a\u028c\u0003\u0002\u0002\u0002\u028b\u0289\u0003\u0002",
    "\u0002\u0002\u028c\u028d\u0007\u001a\u0002\u0002\u028dC\u0003\u0002",
    "\u0002\u0002\u028e\u0292\u00050\u0019\u0002\u028f\u0291\u0007+\u0002",
    "\u0002\u0290\u028f\u0003\u0002\u0002\u0002\u0291\u0294\u0003\u0002\u0002",
    "\u0002\u0292\u0290\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002\u0002",
    "\u0002\u0293\u0295\u0003\u0002\u0002\u0002\u0294\u0292\u0003\u0002\u0002",
    "\u0002\u0295\u0299\u0007)\u0002\u0002\u0296\u0298\u0007+\u0002\u0002",
    "\u0297\u0296\u0003\u0002\u0002\u0002\u0298\u029b\u0003\u0002\u0002\u0002",
    "\u0299\u0297\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002\u0002",
    "\u029a\u029c\u0003\u0002\u0002\u0002\u029b\u0299\u0003\u0002\u0002\u0002",
    "\u029c\u029d\u00050\u0019\u0002\u029dE\u0003\u0002\u0002\u0002\u029e",
    "\u02a0\u0005\u0004\u0003\u0002\u029f\u029e\u0003\u0002\u0002\u0002\u02a0",
    "\u02a3\u0003\u0002\u0002\u0002\u02a1\u029f\u0003\u0002\u0002\u0002\u02a1",
    "\u02a2\u0003\u0002\u0002\u0002\u02a2\u02a4\u0003\u0002\u0002\u0002\u02a3",
    "\u02a1\u0003\u0002\u0002\u0002\u02a4\u02af\u00050\u0019\u0002\u02a5",
    "\u02a9\u0007\u0018\u0002\u0002\u02a6\u02a8\u0005\u0004\u0003\u0002\u02a7",
    "\u02a6\u0003\u0002\u0002\u0002\u02a8\u02ab\u0003\u0002\u0002\u0002\u02a9",
    "\u02a7\u0003\u0002\u0002\u0002\u02a9\u02aa\u0003\u0002\u0002\u0002\u02aa",
    "\u02ac\u0003\u0002\u0002\u0002\u02ab\u02a9\u0003\u0002\u0002\u0002\u02ac",
    "\u02ae\u00050\u0019\u0002\u02ad\u02a5\u0003\u0002\u0002\u0002\u02ae",
    "\u02b1\u0003\u0002\u0002\u0002\u02af\u02ad\u0003\u0002\u0002\u0002\u02af",
    "\u02b0\u0003\u0002\u0002\u0002\u02b0\u02b5\u0003\u0002\u0002\u0002\u02b1",
    "\u02af\u0003\u0002\u0002\u0002\u02b2\u02b4\u0005\u0004\u0003\u0002\u02b3",
    "\u02b2\u0003\u0002\u0002\u0002\u02b4\u02b7\u0003\u0002\u0002\u0002\u02b5",
    "\u02b3\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6",
    "G\u0003\u0002\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b8",
    "\u02ba\u0007\u001b\u0002\u0002\u02b9\u02bb\u0005F$\u0002\u02ba\u02b9",
    "\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bc",
    "\u0003\u0002\u0002\u0002\u02bc\u02bd\u0007\u001c\u0002\u0002\u02bdI",
    "\u0003\u0002\u0002\u0002\u02be\u02c2\u0005~@\u0002\u02bf\u02c1\u0007",
    "+\u0002\u0002\u02c0\u02bf\u0003\u0002\u0002\u0002\u02c1\u02c4\u0003",
    "\u0002\u0002\u0002\u02c2\u02c0\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003",
    "\u0002\u0002\u0002\u02c3\u02c5\u0003\u0002\u0002\u0002\u02c4\u02c2\u0003",
    "\u0002\u0002\u0002\u02c5\u02d2\u0005H%\u0002\u02c6\u02c7\u0007!\u0002",
    "\u0002\u02c7\u02cb\u0005~@\u0002\u02c8\u02ca\u0007+\u0002\u0002\u02c9",
    "\u02c8\u0003\u0002\u0002\u0002\u02ca\u02cd\u0003\u0002\u0002\u0002\u02cb",
    "\u02c9\u0003\u0002\u0002\u0002\u02cb\u02cc\u0003\u0002\u0002\u0002\u02cc",
    "\u02ce\u0003\u0002\u0002\u0002\u02cd\u02cb\u0003\u0002\u0002\u0002\u02ce",
    "\u02cf\u0005H%\u0002\u02cf\u02d1\u0003\u0002\u0002\u0002\u02d0\u02c6",
    "\u0003\u0002\u0002\u0002\u02d1\u02d4\u0003\u0002\u0002\u0002\u02d2\u02d0",
    "\u0003\u0002\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3\u02eb",
    "\u0003\u0002\u0002\u0002\u02d4\u02d2\u0003\u0002\u0002\u0002\u02d5\u02db",
    "\u0005T+\u0002\u02d6\u02d7\u0007\u001b\u0002\u0002\u02d7\u02d8\u0005",
    "0\u0019\u0002\u02d8\u02d9\u0007\u001c\u0002\u0002\u02d9\u02db\u0003",
    "\u0002\u0002\u0002\u02da\u02d5\u0003\u0002\u0002\u0002\u02da\u02d6\u0003",
    "\u0002\u0002\u0002\u02db\u02e6\u0003\u0002\u0002\u0002\u02dc\u02dd\u0007",
    "!\u0002\u0002\u02dd\u02e1\u0005~@\u0002\u02de\u02e0\u0007+\u0002\u0002",
    "\u02df\u02de\u0003\u0002\u0002\u0002\u02e0\u02e3\u0003\u0002\u0002\u0002",
    "\u02e1\u02df\u0003\u0002\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002\u0002",
    "\u02e2\u02e4\u0003\u0002\u0002\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002",
    "\u02e4\u02e5\u0005H%\u0002\u02e5\u02e7\u0003\u0002\u0002\u0002\u02e6",
    "\u02dc\u0003\u0002\u0002\u0002\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8",
    "\u02e6\u0003\u0002\u0002\u0002\u02e8\u02e9\u0003\u0002\u0002\u0002\u02e9",
    "\u02eb\u0003\u0002\u0002\u0002\u02ea\u02be\u0003\u0002\u0002\u0002\u02ea",
    "\u02da\u0003\u0002\u0002\u0002\u02ebK\u0003\u0002\u0002\u0002\u02ec",
    "\u02f4\u0007\f\u0002\u0002\u02ed\u02ef\u0005\u0004\u0003\u0002\u02ee",
    "\u02ed\u0003\u0002\u0002\u0002\u02ef\u02f2\u0003\u0002\u0002\u0002\u02f0",
    "\u02ee\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002\u0002\u0002\u02f1",
    "\u02f3\u0003\u0002\u0002\u0002\u02f2\u02f0\u0003\u0002\u0002\u0002\u02f3",
    "\u02f5\u00050\u0019\u0002\u02f4\u02f0\u0003\u0002\u0002\u0002\u02f4",
    "\u02f5\u0003\u0002\u0002\u0002\u02f5M\u0003\u0002\u0002\u0002\u02f6",
    "\u02fa\u0007\r\u0002\u0002\u02f7\u02f9\u0005\u0004\u0003\u0002\u02f8",
    "\u02f7\u0003\u0002\u0002\u0002\u02f9\u02fc\u0003\u0002\u0002\u0002\u02fa",
    "\u02f8\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002\u02fb",
    "\u02fd\u0003\u0002\u0002\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fd",
    "\u0305\u0005~@\u0002\u02fe\u0300\u0005\u0004\u0003\u0002\u02ff\u02fe",
    "\u0003\u0002\u0002\u0002\u0300\u0303\u0003\u0002\u0002\u0002\u0301\u02ff",
    "\u0003\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302\u0304",
    "\u0003\u0002\u0002\u0002\u0303\u0301\u0003\u0002\u0002\u0002\u0304\u0306",
    "\u00050\u0019\u0002\u0305\u0301\u0003\u0002\u0002\u0002\u0305\u0306",
    "\u0003\u0002\u0002\u0002\u0306O\u0003\u0002\u0002\u0002\u0307\u030b",
    "\u0007\u0014\u0002\u0002\u0308\u030a\u0005\u0004\u0003\u0002\u0309\u0308",
    "\u0003\u0002\u0002\u0002\u030a\u030d\u0003\u0002\u0002\u0002\u030b\u0309",
    "\u0003\u0002\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030c\u030e",
    "\u0003\u0002\u0002\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030e\u0312",
    "\u00056\u001c\u0002\u030f\u0311\u0005\u0004\u0003\u0002\u0310\u030f",
    "\u0003\u0002\u0002\u0002\u0311\u0314\u0003\u0002\u0002\u0002\u0312\u0310",
    "\u0003\u0002\u0002\u0002\u0312\u0313\u0003\u0002\u0002\u0002\u0313\u0315",
    "\u0003\u0002\u0002\u0002\u0314\u0312\u0003\u0002\u0002\u0002\u0315\u0327",
    "\u0005R*\u0002\u0316\u0318\u0005\u0004\u0003\u0002\u0317\u0316\u0003",
    "\u0002\u0002\u0002\u0318\u031b\u0003\u0002\u0002\u0002\u0319\u0317\u0003",
    "\u0002\u0002\u0002\u0319\u031a\u0003\u0002\u0002\u0002\u031a\u031c\u0003",
    "\u0002\u0002\u0002\u031b\u0319\u0003\u0002\u0002\u0002\u031c\u0320\u0007",
    "\u0015\u0002\u0002\u031d\u031f\u0005\u0004\u0003\u0002\u031e\u031d\u0003",
    "\u0002\u0002\u0002\u031f\u0322\u0003\u0002\u0002\u0002\u0320\u031e\u0003",
    "\u0002\u0002\u0002\u0320\u0321\u0003\u0002\u0002\u0002\u0321\u0325\u0003",
    "\u0002\u0002\u0002\u0322\u0320\u0003\u0002\u0002\u0002\u0323\u0326\u0005",
    "P)\u0002\u0324\u0326\u0005R*\u0002\u0325\u0323\u0003\u0002\u0002\u0002",
    "\u0325\u0324\u0003\u0002\u0002\u0002\u0326\u0328\u0003\u0002\u0002\u0002",
    "\u0327\u0319\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002",
    "\u0328Q\u0003\u0002\u0002\u0002\u0329\u032d\u0005 \u0011\u0002\u032a",
    "\u032d\u0005$\u0013\u0002\u032b\u032d\u0005~@\u0002\u032c\u0329\u0003",
    "\u0002\u0002\u0002\u032c\u032a\u0003\u0002\u0002\u0002\u032c\u032b\u0003",
    "\u0002\u0002\u0002\u032dS\u0003\u0002\u0002\u0002\u032e\u032f\t\u0004",
    "\u0002\u0002\u032fU\u0003\u0002\u0002\u0002\u0330\u0332\u0007+\u0002",
    "\u0002\u0331\u0330\u0003\u0002\u0002\u0002\u0332\u0335\u0003\u0002\u0002",
    "\u0002\u0333\u0331\u0003\u0002\u0002\u0002\u0333\u0334\u0003\u0002\u0002",
    "\u0002\u0334\u0353\u0003\u0002\u0002\u0002\u0335\u0333\u0003\u0002\u0002",
    "\u0002\u0336\u0354\u0007(\u0002\u0002\u0337\u0354\u0007)\u0002\u0002",
    "\u0338\u0354\u0007\u001d\u0002\u0002\u0339\u0354\u0007\'\u0002\u0002",
    "\u033a\u033c\u0007\u001e\u0002\u0002\u033b\u033a\u0003\u0002\u0002\u0002",
    "\u033c\u033d\u0003\u0002\u0002\u0002\u033d\u033b\u0003\u0002\u0002\u0002",
    "\u033d\u033e\u0003\u0002\u0002\u0002\u033e\u034f\u0003\u0002\u0002\u0002",
    "\u033f\u0341\u0007\"\u0002\u0002\u0340\u033f\u0003\u0002\u0002\u0002",
    "\u0341\u0342\u0003\u0002\u0002\u0002\u0342\u0340\u0003\u0002\u0002\u0002",
    "\u0342\u0343\u0003\u0002\u0002\u0002\u0343\u0347\u0003\u0002\u0002\u0002",
    "\u0344\u0346\u0007(\u0002\u0002\u0345\u0344\u0003\u0002\u0002\u0002",
    "\u0346\u0349\u0003\u0002\u0002\u0002\u0347\u0345\u0003\u0002\u0002\u0002",
    "\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0350\u0003\u0002\u0002\u0002",
    "\u0349\u0347\u0003\u0002\u0002\u0002\u034a\u034c\u0007(\u0002\u0002",
    "\u034b\u034a\u0003\u0002\u0002\u0002\u034c\u034d\u0003\u0002\u0002\u0002",
    "\u034d\u034b\u0003\u0002\u0002\u0002\u034d\u034e\u0003\u0002\u0002\u0002",
    "\u034e\u0350\u0003\u0002\u0002\u0002\u034f\u0340\u0003\u0002\u0002\u0002",
    "\u034f\u034b\u0003\u0002\u0002\u0002\u034f\u0350\u0003\u0002\u0002\u0002",
    "\u0350\u0354\u0003\u0002\u0002\u0002\u0351\u0354\u0007#\u0002\u0002",
    "\u0352\u0354\u0007&\u0002\u0002\u0353\u0336\u0003\u0002\u0002\u0002",
    "\u0353\u0337\u0003\u0002\u0002\u0002\u0353\u0338\u0003\u0002\u0002\u0002",
    "\u0353\u0339\u0003\u0002\u0002\u0002\u0353\u033b\u0003\u0002\u0002\u0002",
    "\u0353\u0351\u0003\u0002\u0002\u0002\u0353\u0352\u0003\u0002\u0002\u0002",
    "\u0354W\u0003\u0002\u0002\u0002\u0355\u0358\u0007\u0010\u0002\u0002",
    "\u0356\u0358\u0005Z.\u0002\u0357\u0355\u0003\u0002\u0002\u0002\u0357",
    "\u0356\u0003\u0002\u0002\u0002\u0358\u0359\u0003\u0002\u0002\u0002\u0359",
    "\u035d\u0005V,\u0002\u035a\u035c\u0007+\u0002\u0002\u035b\u035a\u0003",
    "\u0002\u0002\u0002\u035c\u035f\u0003\u0002\u0002\u0002\u035d\u035b\u0003",
    "\u0002\u0002\u0002\u035d\u035e\u0003\u0002\u0002\u0002\u035e\u0360\u0003",
    "\u0002\u0002\u0002\u035f\u035d\u0003\u0002\u0002\u0002\u0360\u0362\u0007",
    "/\u0002\u0002\u0361\u0363\u0007+\u0002\u0002\u0362\u0361\u0003\u0002",
    "\u0002\u0002\u0363\u0364\u0003\u0002\u0002\u0002\u0364\u0362\u0003\u0002",
    "\u0002\u0002\u0364\u0365\u0003\u0002\u0002\u0002\u0365\u0366\u0003\u0002",
    "\u0002\u0002\u0366\u0367\u0005~@\u0002\u0367Y\u0003\u0002\u0002\u0002",
    "\u0368\u036c\u0007\u0011\u0002\u0002\u0369\u036b\u0007+\u0002\u0002",
    "\u036a\u0369\u0003\u0002\u0002\u0002\u036b\u036e\u0003\u0002\u0002\u0002",
    "\u036c\u036a\u0003\u0002\u0002\u0002\u036c\u036d\u0003\u0002\u0002\u0002",
    "\u036d\u0370\u0003\u0002\u0002\u0002\u036e\u036c\u0003\u0002\u0002\u0002",
    "\u036f\u0371\u0007\u0012\u0002\u0002\u0370\u036f\u0003\u0002\u0002\u0002",
    "\u0370\u0371\u0003\u0002\u0002\u0002\u0371\u0375\u0003\u0002\u0002\u0002",
    "\u0372\u0374\u0007+\u0002\u0002\u0373\u0372\u0003\u0002\u0002\u0002",
    "\u0374\u0377\u0003\u0002\u0002\u0002\u0375\u0373\u0003\u0002\u0002\u0002",
    "\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u0379\u0003\u0002\u0002\u0002",
    "\u0377\u0375\u0003\u0002\u0002\u0002\u0378\u037a\u0007\u0013\u0002\u0002",
    "\u0379\u0378\u0003\u0002\u0002\u0002\u0379\u037a\u0003\u0002\u0002\u0002",
    "\u037a[\u0003\u0002\u0002\u0002\u037b\u037c\u0007\u0007\u0002\u0002",
    "\u037c\u037d\u0005\u0004\u0003\u0002\u037d\u0381\u00070\u0002\u0002",
    "\u037e\u0380\u0005\u0004\u0003\u0002\u037f\u037e\u0003\u0002\u0002\u0002",
    "\u0380\u0383\u0003\u0002\u0002\u0002\u0381\u037f\u0003\u0002\u0002\u0002",
    "\u0381\u0382\u0003\u0002\u0002\u0002\u0382\u0384\u0003\u0002\u0002\u0002",
    "\u0383\u0381\u0003\u0002\u0002\u0002\u0384\u0385\u0007)\u0002\u0002",
    "\u0385\u0386\u0005~@\u0002\u0386]\u0003\u0002\u0002\u0002\u0387\u0389",
    "\u0007\b\u0002\u0002\u0388\u038a\u0005\u0004\u0003\u0002\u0389\u0388",
    "\u0003\u0002\u0002\u0002\u038a\u038b\u0003\u0002\u0002\u0002\u038b\u0389",
    "\u0003\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002\u038c\u038d",
    "\u0003\u0002\u0002\u0002\u038d\u038f\u0005`1\u0002\u038e\u0390\u0005",
    "\u0004\u0003\u0002\u038f\u038e\u0003\u0002\u0002\u0002\u0390\u0391\u0003",
    "\u0002\u0002\u0002\u0391\u038f\u0003\u0002\u0002\u0002\u0391\u0392\u0003",
    "\u0002\u0002\u0002\u0392\u0396\u0003\u0002\u0002\u0002\u0393\u0397\u0005",
    " \u0011\u0002\u0394\u0397\u0005~@\u0002\u0395\u0397\u0005$\u0013\u0002",
    "\u0396\u0393\u0003\u0002\u0002\u0002\u0396\u0394\u0003\u0002\u0002\u0002",
    "\u0396\u0395\u0003\u0002\u0002\u0002\u0397_\u0003\u0002\u0002\u0002",
    "\u0398\u039b\u0005~@\u0002\u0399\u039b\u0005J&\u0002\u039a\u0398\u0003",
    "\u0002\u0002\u0002\u039a\u0399\u0003\u0002\u0002\u0002\u039ba\u0003",
    "\u0002\u0002\u0002\u039c\u03a0\u0007\u0017\u0002\u0002\u039d\u039f\u0007",
    "+\u0002\u0002\u039e\u039d\u0003\u0002\u0002\u0002\u039f\u03a2\u0003",
    "\u0002\u0002\u0002\u03a0\u039e\u0003\u0002\u0002\u0002\u03a0\u03a1\u0003",
    "\u0002\u0002\u0002\u03a1\u03a3\u0003\u0002\u0002\u0002\u03a2\u03a0\u0003",
    "\u0002\u0002\u0002\u03a3\u03a7\u00070\u0002\u0002\u03a4\u03a6\u0007",
    "+\u0002\u0002\u03a5\u03a4\u0003\u0002\u0002\u0002\u03a6\u03a9\u0003",
    "\u0002\u0002\u0002\u03a7\u03a5\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003",
    "\u0002\u0002\u0002\u03a8\u03aa\u0003\u0002\u0002\u0002\u03a9\u03a7\u0003",
    "\u0002\u0002\u0002\u03aa\u03ae\u0007\u0019\u0002\u0002\u03ab\u03ad\u0005",
    "\u0004\u0003\u0002\u03ac\u03ab\u0003\u0002\u0002\u0002\u03ad\u03b0\u0003",
    "\u0002\u0002\u0002\u03ae\u03ac\u0003\u0002\u0002\u0002\u03ae\u03af\u0003",
    "\u0002\u0002\u0002\u03af\u03b9\u0003\u0002\u0002\u0002\u03b0\u03ae\u0003",
    "\u0002\u0002\u0002\u03b1\u03b3\u0005d3\u0002\u03b2\u03b4\u0005\u0004",
    "\u0003\u0002\u03b3\u03b2\u0003\u0002\u0002\u0002\u03b4\u03b5\u0003\u0002",
    "\u0002\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003\u0002",
    "\u0002\u0002\u03b6\u03b8\u0003\u0002\u0002\u0002\u03b7\u03b1\u0003\u0002",
    "\u0002\u0002\u03b8\u03bb\u0003\u0002\u0002\u0002\u03b9\u03b7\u0003\u0002",
    "\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u03bc\u0003\u0002",
    "\u0002\u0002\u03bb\u03b9\u0003\u0002\u0002\u0002\u03bc\u03bd\u0007\u001a",
    "\u0002\u0002\u03bdc\u0003\u0002\u0002\u0002\u03be\u03c2\u0005f4\u0002",
    "\u03bf\u03c2\u0005j6\u0002\u03c0\u03c2\u0005p9\u0002\u03c1\u03be\u0003",
    "\u0002\u0002\u0002\u03c1\u03bf\u0003\u0002\u0002\u0002\u03c1\u03c0\u0003",
    "\u0002\u0002\u0002\u03c2e\u0003\u0002\u0002\u0002\u03c3\u03c7\t\u0005",
    "\u0002\u0002\u03c4\u03c6\u0007+\u0002\u0002\u03c5\u03c4\u0003\u0002",
    "\u0002\u0002\u03c6\u03c9\u0003\u0002\u0002\u0002\u03c7\u03c5\u0003\u0002",
    "\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8\u03ca\u0003\u0002",
    "\u0002\u0002\u03c9\u03c7\u0003\u0002\u0002\u0002\u03ca\u03cb\u0005h",
    "5\u0002\u03cbg\u0003\u0002\u0002\u0002\u03cc\u03d0\u0007\u001b\u0002",
    "\u0002\u03cd\u03cf\u0005\u0004\u0003\u0002\u03ce\u03cd\u0003\u0002\u0002",
    "\u0002\u03cf\u03d2\u0003\u0002\u0002\u0002\u03d0\u03ce\u0003\u0002\u0002",
    "\u0002\u03d0\u03d1\u0003\u0002\u0002\u0002\u03d1\u03d3\u0003\u0002\u0002",
    "\u0002\u03d2\u03d0\u0003\u0002\u0002\u0002\u03d3\u03d7\u0005~@\u0002",
    "\u03d4\u03d6\u0005\u0004\u0003\u0002\u03d5\u03d4\u0003\u0002\u0002\u0002",
    "\u03d6\u03d9\u0003\u0002\u0002\u0002\u03d7\u03d5\u0003\u0002\u0002\u0002",
    "\u03d7\u03d8\u0003\u0002\u0002\u0002\u03d8\u03ea\u0003\u0002\u0002\u0002",
    "\u03d9\u03d7\u0003\u0002\u0002\u0002\u03da\u03de\u0007\u0018\u0002\u0002",
    "\u03db\u03dd\u0005\u0004\u0003\u0002\u03dc\u03db\u0003\u0002\u0002\u0002",
    "\u03dd\u03e0\u0003\u0002\u0002\u0002\u03de\u03dc\u0003\u0002\u0002\u0002",
    "\u03de\u03df\u0003\u0002\u0002\u0002\u03df\u03e1\u0003\u0002\u0002\u0002",
    "\u03e0\u03de\u0003\u0002\u0002\u0002\u03e1\u03e5\u0005~@\u0002\u03e2",
    "\u03e4\u0005\u0004\u0003\u0002\u03e3\u03e2\u0003\u0002\u0002\u0002\u03e4",
    "\u03e7\u0003\u0002\u0002\u0002\u03e5\u03e3\u0003\u0002\u0002\u0002\u03e5",
    "\u03e6\u0003\u0002\u0002\u0002\u03e6\u03e9\u0003\u0002\u0002\u0002\u03e7",
    "\u03e5\u0003\u0002\u0002\u0002\u03e8\u03da\u0003\u0002\u0002\u0002\u03e9",
    "\u03ec\u0003\u0002\u0002\u0002\u03ea\u03e8\u0003\u0002\u0002\u0002\u03ea",
    "\u03eb\u0003\u0002\u0002\u0002\u03eb\u03ed\u0003\u0002\u0002\u0002\u03ec",
    "\u03ea\u0003\u0002\u0002\u0002\u03ed\u03ee\u0007\u001c\u0002\u0002\u03ee",
    "\u03f2\u0007)\u0002\u0002\u03ef\u03f1\u0005\u0004\u0003\u0002\u03f0",
    "\u03ef\u0003\u0002\u0002\u0002\u03f1\u03f4\u0003\u0002\u0002\u0002\u03f2",
    "\u03f0\u0003\u0002\u0002\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3",
    "\u03f5\u0003\u0002\u0002\u0002\u03f4\u03f2\u0003\u0002\u0002\u0002\u03f5",
    "\u03f6\u0005~@\u0002\u03f6i\u0003\u0002\u0002\u0002\u03f7\u03f9\u0007",
    "\u0012\u0002\u0002\u03f8\u03fa\u0005\u0004\u0003\u0002\u03f9\u03f8\u0003",
    "\u0002\u0002\u0002\u03fa\u03fb\u0003\u0002\u0002\u0002\u03fb\u03f9\u0003",
    "\u0002\u0002\u0002\u03fb\u03fc\u0003\u0002\u0002\u0002\u03fc\u03fe\u0003",
    "\u0002\u0002\u0002\u03fd\u03f7\u0003\u0002\u0002\u0002\u03fd\u03fe\u0003",
    "\u0002\u0002\u0002\u03fe\u0405\u0003\u0002\u0002\u0002\u03ff\u0401\u0007",
    "\u0013\u0002\u0002\u0400\u0402\u0005\u0004\u0003\u0002\u0401\u0400\u0003",
    "\u0002\u0002\u0002\u0402\u0403\u0003\u0002\u0002\u0002\u0403\u0401\u0003",
    "\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002\u0404\u0406\u0003",
    "\u0002\u0002\u0002\u0405\u03ff\u0003\u0002\u0002\u0002\u0405\u0406\u0003",
    "\u0002\u0002\u0002\u0406\u0407\u0003\u0002\u0002\u0002\u0407\u040b\u0005",
    "l7\u0002\u0408\u040a\u0005\u0004\u0003\u0002\u0409\u0408\u0003\u0002",
    "\u0002\u0002\u040a\u040d\u0003\u0002\u0002\u0002\u040b\u0409\u0003\u0002",
    "\u0002\u0002\u040b\u040c\u0003\u0002\u0002\u0002\u040c\u040f\u0003\u0002",
    "\u0002\u0002\u040d\u040b\u0003\u0002\u0002\u0002\u040e\u03fd\u0003\u0002",
    "\u0002\u0002\u040e\u040f\u0003\u0002\u0002\u0002\u040f\u0410\u0003\u0002",
    "\u0002\u0002\u0410\u0414\u0005V,\u0002\u0411\u0413\u0005\u0004\u0003",
    "\u0002\u0412\u0411\u0003\u0002\u0002\u0002\u0413\u0416\u0003\u0002\u0002",
    "\u0002\u0414\u0412\u0003\u0002\u0002\u0002\u0414\u0415\u0003\u0002\u0002",
    "\u0002\u0415\u0417\u0003\u0002\u0002\u0002\u0416\u0414\u0003\u0002\u0002",
    "\u0002\u0417\u041b\u0005n8\u0002\u0418\u041a\u0005\u0004\u0003\u0002",
    "\u0419\u0418\u0003\u0002\u0002\u0002\u041a\u041d\u0003\u0002\u0002\u0002",
    "\u041b\u0419\u0003\u0002\u0002\u0002\u041b\u041c\u0003\u0002\u0002\u0002",
    "\u041c\u041e\u0003\u0002\u0002\u0002\u041d\u041b\u0003\u0002\u0002\u0002",
    "\u041e\u0422\u0007)\u0002\u0002\u041f\u0421\u0005\u0004\u0003\u0002",
    "\u0420\u041f\u0003\u0002\u0002\u0002\u0421\u0424\u0003\u0002\u0002\u0002",
    "\u0422\u0420\u0003\u0002\u0002\u0002\u0422\u0423\u0003\u0002\u0002\u0002",
    "\u0423\u0425\u0003\u0002\u0002\u0002\u0424\u0422\u0003\u0002\u0002\u0002",
    "\u0425\u0426\u0005~@\u0002\u0426k\u0003\u0002\u0002\u0002\u0427\u0428",
    "\u0005~@\u0002\u0428m\u0003\u0002\u0002\u0002\u0429\u042a\u0005~@\u0002",
    "\u042ao\u0003\u0002\u0002\u0002\u042b\u042f\u00070\u0002\u0002\u042c",
    "\u042e\u0007+\u0002\u0002\u042d\u042c\u0003\u0002\u0002\u0002\u042e",
    "\u0431\u0003\u0002\u0002\u0002\u042f\u042d\u0003\u0002\u0002\u0002\u042f",
    "\u0430\u0003\u0002\u0002\u0002\u0430\u0432\u0003\u0002\u0002\u0002\u0431",
    "\u042f\u0003\u0002\u0002\u0002\u0432\u0436\u0007)\u0002\u0002\u0433",
    "\u0435\u0007+\u0002\u0002\u0434\u0433\u0003\u0002\u0002\u0002\u0435",
    "\u0438\u0003\u0002\u0002\u0002\u0436\u0434\u0003\u0002\u0002\u0002\u0436",
    "\u0437\u0003\u0002\u0002\u0002\u0437\u0439\u0003\u0002\u0002\u0002\u0438",
    "\u0436\u0003\u0002\u0002\u0002\u0439\u043a\u0005~@\u0002\u043aq\u0003",
    "\u0002\u0002\u0002\u043b\u044c\u0005\u0014\u000b\u0002\u043c\u043e\u0005",
    "\u0004\u0003\u0002\u043d\u043c\u0003\u0002\u0002\u0002\u043e\u0441\u0003",
    "\u0002\u0002\u0002\u043f\u043d\u0003\u0002\u0002\u0002\u043f\u0440\u0003",
    "\u0002\u0002\u0002\u0440\u0442\u0003\u0002\u0002\u0002\u0441\u043f\u0003",
    "\u0002\u0002\u0002\u0442\u0446\u0007\'\u0002\u0002\u0443\u0445\u0005",
    "\u0004\u0003\u0002\u0444\u0443\u0003\u0002\u0002\u0002\u0445\u0448\u0003",
    "\u0002\u0002\u0002\u0446\u0444\u0003\u0002\u0002\u0002\u0446\u0447\u0003",
    "\u0002\u0002\u0002\u0447\u0449\u0003\u0002\u0002\u0002\u0448\u0446\u0003",
    "\u0002\u0002\u0002\u0449\u044b\u0005\u0014\u000b\u0002\u044a\u043f\u0003",
    "\u0002\u0002\u0002\u044b\u044e\u0003\u0002\u0002\u0002\u044c\u044a\u0003",
    "\u0002\u0002\u0002\u044c\u044d\u0003\u0002\u0002\u0002\u044ds\u0003",
    "\u0002\u0002\u0002\u044e\u044c\u0003\u0002\u0002\u0002\u044f\u0450\u0007",
    "0\u0002\u0002\u0450\u0451\u0007)\u0002\u0002\u0451\u0458\u0005r:\u0002",
    "\u0452\u0453\u0007\u0018\u0002\u0002\u0453\u0454\u00070\u0002\u0002",
    "\u0454\u0455\u0007)\u0002\u0002\u0455\u0457\u0005r:\u0002\u0456\u0452",
    "\u0003\u0002\u0002\u0002\u0457\u045a\u0003\u0002\u0002\u0002\u0458\u0456",
    "\u0003\u0002\u0002\u0002\u0458\u0459\u0003\u0002\u0002\u0002\u0459u",
    "\u0003\u0002\u0002\u0002\u045a\u0458\u0003\u0002\u0002\u0002\u045b\u045d",
    "\u0007\t\u0002\u0002\u045c\u045e\t\u0002\u0002\u0002\u045d\u045c\u0003",
    "\u0002\u0002\u0002\u045e\u045f\u0003\u0002\u0002\u0002\u045f\u045d\u0003",
    "\u0002\u0002\u0002\u045f\u0460\u0003\u0002\u0002\u0002\u0460\u0468\u0003",
    "\u0002\u0002\u0002\u0461\u0469\u0005~@\u0002\u0462\u0469\u0005\u0012",
    "\n\u0002\u0463\u0469\u0005*\u0016\u0002\u0464\u0469\u0005 \u0011\u0002",
    "\u0465\u0469\u0005X-\u0002\u0466\u0469\u0005\\/\u0002\u0467\u0469\u0005",
    "b2\u0002\u0468\u0461\u0003\u0002\u0002\u0002\u0468\u0462\u0003\u0002",
    "\u0002\u0002\u0468\u0463\u0003\u0002\u0002\u0002\u0468\u0464\u0003\u0002",
    "\u0002\u0002\u0468\u0465\u0003\u0002\u0002\u0002\u0468\u0466\u0003\u0002",
    "\u0002\u0002\u0468\u0467\u0003\u0002\u0002\u0002\u0469w\u0003\u0002",
    "\u0002\u0002\u046a\u046f\u0005z>\u0002\u046b\u046c\u0007\u0018\u0002",
    "\u0002\u046c\u046e\u0005z>\u0002\u046d\u046b\u0003\u0002\u0002\u0002",
    "\u046e\u0471\u0003\u0002\u0002\u0002\u046f\u046d\u0003\u0002\u0002\u0002",
    "\u046f\u0470\u0003\u0002\u0002\u0002\u0470y\u0003\u0002\u0002\u0002",
    "\u0471\u046f\u0003\u0002\u0002\u0002\u0472\u0477\u0005|?\u0002\u0473",
    "\u0474\u0007+\u0002\u0002\u0474\u0475\u0007\u000e\u0002\u0002\u0475",
    "\u0476\u0007+\u0002\u0002\u0476\u0478\u0005|?\u0002\u0477\u0473\u0003",
    "\u0002\u0002\u0002\u0477\u0478\u0003\u0002\u0002\u0002\u0478{\u0003",
    "\u0002\u0002\u0002\u0479\u047c\u00070\u0002\u0002\u047a\u047c\u0005",
    "V,\u0002\u047b\u0479\u0003\u0002\u0002\u0002\u047b\u047a\u0003\u0002",
    "\u0002\u0002\u047c}\u0003\u0002\u0002\u0002\u047d\u047f\u0005\u0080",
    "A\u0002\u047e\u047d\u0003\u0002\u0002\u0002\u047f\u0480\u0003\u0002",
    "\u0002\u0002\u0480\u047e\u0003\u0002\u0002\u0002\u0480\u0481\u0003\u0002",
    "\u0002\u0002\u0481\u007f\u0003\u0002\u0002\u0002\u0482\u0486\u00070",
    "\u0002\u0002\u0483\u0486\u0007!\u0002\u0002\u0484\u0486\u0005\u0082",
    "B\u0002\u0485\u0482\u0003\u0002\u0002\u0002\u0485\u0483\u0003\u0002",
    "\u0002\u0002\u0485\u0484\u0003\u0002\u0002\u0002\u0486\u0081\u0003\u0002",
    "\u0002\u0002\u0487\u048b\u0007\u001f\u0002\u0002\u0488\u048a\u0007+",
    "\u0002\u0002\u0489\u0488\u0003\u0002\u0002\u0002\u048a\u048d\u0003\u0002",
    "\u0002\u0002\u048b\u0489\u0003\u0002\u0002\u0002\u048b\u048c\u0003\u0002",
    "\u0002\u0002\u048c\u048e\u0003\u0002\u0002\u0002\u048d\u048b\u0003\u0002",
    "\u0002\u0002\u048e\u0492\u00050\u0019\u0002\u048f\u0491\u0007+\u0002",
    "\u0002\u0490\u048f\u0003\u0002\u0002\u0002\u0491\u0494\u0003\u0002\u0002",
    "\u0002\u0492\u0490\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002",
    "\u0002\u0493\u0495\u0003\u0002\u0002\u0002\u0494\u0492\u0003\u0002\u0002",
    "\u0002\u0495\u0496\u0007 \u0002\u0002\u0496\u0083\u0003\u0002\u0002",
    "\u0002\u00ab\u0087\u008d\u009b\u009d\u009f\u00a2\u00a8\u00b1\u00b6\u00c2",
    "\u00c6\u00cc\u00d2\u00d4\u00da\u00e0\u00e6\u00ea\u00ef\u00f6\u00fd\u0104",
    "\u010a\u010d\u0113\u0117\u011f\u0126\u012d\u0134\u0139\u0142\u0146\u014c",
    "\u0152\u0158\u015b\u0165\u016c\u0172\u0175\u0179\u017f\u0187\u018a\u018c",
    "\u0195\u0199\u019f\u01a5\u01aa\u01b5\u01ba\u01be\u01c4\u01cb\u01cf\u01d4",
    "\u01dd\u01e4\u01e8\u01ed\u01f6\u01fa\u01ff\u0206\u020b\u020d\u0211\u021a",
    "\u021e\u0224\u0229\u022f\u0236\u023f\u0248\u024f\u0255\u025b\u0262\u026b",
    "\u0272\u0276\u027e\u0285\u0289\u0292\u0299\u02a1\u02a9\u02af\u02b5\u02ba",
    "\u02c2\u02cb\u02d2\u02da\u02e1\u02e8\u02ea\u02f0\u02f4\u02fa\u0301\u0305",
    "\u030b\u0312\u0319\u0320\u0325\u0327\u032c\u0333\u033d\u0342\u0347\u034d",
    "\u034f\u0353\u0357\u035d\u0364\u036c\u0370\u0375\u0379\u0381\u038b\u0391",
    "\u0396\u039a\u03a0\u03a7\u03ae\u03b5\u03b9\u03c1\u03c7\u03d0\u03d7\u03de",
    "\u03e5\u03ea\u03f2\u03fb\u03fd\u0403\u0405\u040b\u040e\u0414\u041b\u0422",
    "\u042f\u0436\u043f\u0446\u044c\u0458\u045f\u0468\u046f\u0477\u047b\u0480",
    "\u0485\u048b\u0492"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'import'", "'from'", "'type'", "'fn'", "'event'", 
                     "'on'", "'export'", "'const'", "'let'", "'return'", 
                     "'emit'", "'as'", null, "'prefix'", "'infix'", "'commutative'", 
                     "'associative'", "'if'", "'else'", "'new'", "'interface'", 
                     null, "'{'", "'}'", "'('", "')'", "'<'", "'>'", "'['", 
                     "']'", "'.'", "'='", "'@'", "'./'", "'../'", "'/'", 
                     "'|'" ];

var symbolicNames = [ null, "IMPORT", "FROM", "TYPE", "FN", "EVENT", "ON", 
                      "EXPORT", "CONST", "LET", "RETURN", "EMIT", "AS", 
                      "BOOLCONSTANT", "PREFIX", "INFIX", "COMMUTATIVE", 
                      "ASSOCIATIVE", "IF", "ELSE", "NEW", "INTERFACE", "SEP", 
                      "OPENBODY", "CLOSEBODY", "OPENARGS", "CLOSEARGS", 
                      "OPENGENERIC", "CLOSEGENERIC", "OPENARRAY", "CLOSEARRAY", 
                      "METHODSEP", "EQUALS", "GLOBAL", "CURDIR", "PARDIR", 
                      "DIRSEP", "OR", "GENERALOPERATORS", "TYPESEP", "NEWLINE", 
                      "WS", "SINGLELINECOMMENT", "MULTILINECOMMENT", "STRINGCONSTANT", 
                      "NUMBERCONSTANT", "VARNAME" ];

var ruleNames =  [ "module", "blank", "imports", "standardImport", "fromImport", 
                   "dependency", "localdependency", "globaldependency", 
                   "types", "othertype", "typename", "typegenerics", "fulltypename", 
                   "typebody", "typeline", "functions", "fullfunctionbody", 
                   "functionbody", "statements", "declarations", "constdeclaration", 
                   "letdeclaration", "assignments", "assignables", "basicassignables", 
                   "operatororassignable", "withoperators", "groups", "typeofn", 
                   "objectliterals", "arrayliteral", "typeliteral", "mapliteral", 
                   "mapline", "assignablelist", "fncall", "calls", "exits", 
                   "emits", "conditionals", "blocklikes", "constants", "operators", 
                   "operatormapping", "infix", "events", "handlers", "eventref", 
                   "interfaces", "interfaceline", "functiontypeline", "functiontype", 
                   "operatortypeline", "leftarg", "rightarg", "propertytypeline", 
                   "argtype", "arglist", "exports", "varlist", "renameablevar", 
                   "varop", "varn", "varsegment", "arrayaccess" ];

function LnParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

LnParser.prototype = Object.create(antlr4.Parser.prototype);
LnParser.prototype.constructor = LnParser;

Object.defineProperty(LnParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

LnParser.EOF = antlr4.Token.EOF;
LnParser.IMPORT = 1;
LnParser.FROM = 2;
LnParser.TYPE = 3;
LnParser.FN = 4;
LnParser.EVENT = 5;
LnParser.ON = 6;
LnParser.EXPORT = 7;
LnParser.CONST = 8;
LnParser.LET = 9;
LnParser.RETURN = 10;
LnParser.EMIT = 11;
LnParser.AS = 12;
LnParser.BOOLCONSTANT = 13;
LnParser.PREFIX = 14;
LnParser.INFIX = 15;
LnParser.COMMUTATIVE = 16;
LnParser.ASSOCIATIVE = 17;
LnParser.IF = 18;
LnParser.ELSE = 19;
LnParser.NEW = 20;
LnParser.INTERFACE = 21;
LnParser.SEP = 22;
LnParser.OPENBODY = 23;
LnParser.CLOSEBODY = 24;
LnParser.OPENARGS = 25;
LnParser.CLOSEARGS = 26;
LnParser.OPENGENERIC = 27;
LnParser.CLOSEGENERIC = 28;
LnParser.OPENARRAY = 29;
LnParser.CLOSEARRAY = 30;
LnParser.METHODSEP = 31;
LnParser.EQUALS = 32;
LnParser.GLOBAL = 33;
LnParser.CURDIR = 34;
LnParser.PARDIR = 35;
LnParser.DIRSEP = 36;
LnParser.OR = 37;
LnParser.GENERALOPERATORS = 38;
LnParser.TYPESEP = 39;
LnParser.NEWLINE = 40;
LnParser.WS = 41;
LnParser.SINGLELINECOMMENT = 42;
LnParser.MULTILINECOMMENT = 43;
LnParser.STRINGCONSTANT = 44;
LnParser.NUMBERCONSTANT = 45;
LnParser.VARNAME = 46;

LnParser.RULE_module = 0;
LnParser.RULE_blank = 1;
LnParser.RULE_imports = 2;
LnParser.RULE_standardImport = 3;
LnParser.RULE_fromImport = 4;
LnParser.RULE_dependency = 5;
LnParser.RULE_localdependency = 6;
LnParser.RULE_globaldependency = 7;
LnParser.RULE_types = 8;
LnParser.RULE_othertype = 9;
LnParser.RULE_typename = 10;
LnParser.RULE_typegenerics = 11;
LnParser.RULE_fulltypename = 12;
LnParser.RULE_typebody = 13;
LnParser.RULE_typeline = 14;
LnParser.RULE_functions = 15;
LnParser.RULE_fullfunctionbody = 16;
LnParser.RULE_functionbody = 17;
LnParser.RULE_statements = 18;
LnParser.RULE_declarations = 19;
LnParser.RULE_constdeclaration = 20;
LnParser.RULE_letdeclaration = 21;
LnParser.RULE_assignments = 22;
LnParser.RULE_assignables = 23;
LnParser.RULE_basicassignables = 24;
LnParser.RULE_operatororassignable = 25;
LnParser.RULE_withoperators = 26;
LnParser.RULE_groups = 27;
LnParser.RULE_typeofn = 28;
LnParser.RULE_objectliterals = 29;
LnParser.RULE_arrayliteral = 30;
LnParser.RULE_typeliteral = 31;
LnParser.RULE_mapliteral = 32;
LnParser.RULE_mapline = 33;
LnParser.RULE_assignablelist = 34;
LnParser.RULE_fncall = 35;
LnParser.RULE_calls = 36;
LnParser.RULE_exits = 37;
LnParser.RULE_emits = 38;
LnParser.RULE_conditionals = 39;
LnParser.RULE_blocklikes = 40;
LnParser.RULE_constants = 41;
LnParser.RULE_operators = 42;
LnParser.RULE_operatormapping = 43;
LnParser.RULE_infix = 44;
LnParser.RULE_events = 45;
LnParser.RULE_handlers = 46;
LnParser.RULE_eventref = 47;
LnParser.RULE_interfaces = 48;
LnParser.RULE_interfaceline = 49;
LnParser.RULE_functiontypeline = 50;
LnParser.RULE_functiontype = 51;
LnParser.RULE_operatortypeline = 52;
LnParser.RULE_leftarg = 53;
LnParser.RULE_rightarg = 54;
LnParser.RULE_propertytypeline = 55;
LnParser.RULE_argtype = 56;
LnParser.RULE_arglist = 57;
LnParser.RULE_exports = 58;
LnParser.RULE_varlist = 59;
LnParser.RULE_renameablevar = 60;
LnParser.RULE_varop = 61;
LnParser.RULE_varn = 62;
LnParser.RULE_varsegment = 63;
LnParser.RULE_arrayaccess = 64;

function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ModuleContext.prototype.imports = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportsContext);
    } else {
        return this.getTypedRuleContext(ImportsContext,i);
    }
};

ModuleContext.prototype.types = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypesContext);
    } else {
        return this.getTypedRuleContext(TypesContext,i);
    }
};

ModuleContext.prototype.constdeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstdeclarationContext);
    } else {
        return this.getTypedRuleContext(ConstdeclarationContext,i);
    }
};

ModuleContext.prototype.functions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionsContext);
    } else {
        return this.getTypedRuleContext(FunctionsContext,i);
    }
};

ModuleContext.prototype.operatormapping = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OperatormappingContext);
    } else {
        return this.getTypedRuleContext(OperatormappingContext,i);
    }
};

ModuleContext.prototype.events = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EventsContext);
    } else {
        return this.getTypedRuleContext(EventsContext,i);
    }
};

ModuleContext.prototype.handlers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HandlersContext);
    } else {
        return this.getTypedRuleContext(HandlersContext,i);
    }
};

ModuleContext.prototype.interfaces = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfacesContext);
    } else {
        return this.getTypedRuleContext(InterfacesContext,i);
    }
};

ModuleContext.prototype.exports = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExportsContext);
    } else {
        return this.getTypedRuleContext(ExportsContext,i);
    }
};

ModuleContext.prototype.EOF = function() {
    return this.getToken(LnParser.EOF, 0);
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitModule(this);
	}
};




LnParser.ModuleContext = ModuleContext;

LnParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, LnParser.RULE_module);
    var _la = 0; // Token type
    try {
        this.state = 160;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.IMPORT:
        case LnParser.FROM:
        case LnParser.TYPE:
        case LnParser.FN:
        case LnParser.EVENT:
        case LnParser.ON:
        case LnParser.EXPORT:
        case LnParser.CONST:
        case LnParser.PREFIX:
        case LnParser.INFIX:
        case LnParser.INTERFACE:
        case LnParser.NEWLINE:
        case LnParser.WS:
            this.enterOuterAlt(localctx, 1);
            this.state = 133;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 130;
                    this.blank(); 
                }
                this.state = 135;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            this.state = 139;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.IMPORT || _la===LnParser.FROM) {
                this.state = 136;
                this.imports();
                this.state = 141;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 155; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 155;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case LnParser.TYPE:
                    this.state = 142;
                    this.types();
                    break;
                case LnParser.CONST:
                    this.state = 143;
                    this.constdeclaration();
                    break;
                case LnParser.FN:
                    this.state = 144;
                    this.functions();
                    break;
                case LnParser.PREFIX:
                case LnParser.INFIX:
                    this.state = 145;
                    this.operatormapping();
                    break;
                case LnParser.EVENT:
                    this.state = 146;
                    this.events();
                    break;
                case LnParser.ON:
                    this.state = 147;
                    this.handlers();
                    break;
                case LnParser.INTERFACE:
                    this.state = 148;
                    this.interfaces();
                    break;
                case LnParser.EXPORT:
                    this.state = 149;
                    this.exports();
                    break;
                case LnParser.NEWLINE:
                case LnParser.WS:
                    this.state = 151; 
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                    	switch (_alt) {
                    	case 1:
                    		this.state = 150;
                    		this.blank();
                    		break;
                    	default:
                    		throw new antlr4.error.NoViableAltException(this);
                    	}
                    	this.state = 153; 
                    	this._errHandler.sync(this);
                    	_alt = this._interp.adaptivePredict(this._input,2, this._ctx);
                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 157; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.TYPE) | (1 << LnParser.FN) | (1 << LnParser.EVENT) | (1 << LnParser.ON) | (1 << LnParser.EXPORT) | (1 << LnParser.CONST) | (1 << LnParser.PREFIX) | (1 << LnParser.INFIX) | (1 << LnParser.INTERFACE))) !== 0) || _la===LnParser.NEWLINE || _la===LnParser.WS);
            break;
        case LnParser.EOF:
            this.enterOuterAlt(localctx, 2);
            this.state = 159;
            this.match(LnParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_blank;
    return this;
}

BlankContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankContext.prototype.constructor = BlankContext;

BlankContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

BlankContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

BlankContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterBlank(this);
	}
};

BlankContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitBlank(this);
	}
};




LnParser.BlankContext = BlankContext;

LnParser.prototype.blank = function() {

    var localctx = new BlankContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, LnParser.RULE_blank);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 162;
        _la = this._input.LA(1);
        if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_imports;
    return this;
}

ImportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportsContext.prototype.constructor = ImportsContext;

ImportsContext.prototype.standardImport = function() {
    return this.getTypedRuleContext(StandardImportContext,0);
};

ImportsContext.prototype.fromImport = function() {
    return this.getTypedRuleContext(FromImportContext,0);
};

ImportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterImports(this);
	}
};

ImportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitImports(this);
	}
};




LnParser.ImportsContext = ImportsContext;

LnParser.prototype.imports = function() {

    var localctx = new ImportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, LnParser.RULE_imports);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 166;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.IMPORT:
            this.state = 164;
            this.standardImport();
            break;
        case LnParser.FROM:
            this.state = 165;
            this.fromImport();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StandardImportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_standardImport;
    return this;
}

StandardImportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StandardImportContext.prototype.constructor = StandardImportContext;

StandardImportContext.prototype.IMPORT = function() {
    return this.getToken(LnParser.IMPORT, 0);
};

StandardImportContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


StandardImportContext.prototype.dependency = function() {
    return this.getTypedRuleContext(DependencyContext,0);
};

StandardImportContext.prototype.AS = function() {
    return this.getToken(LnParser.AS, 0);
};

StandardImportContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

StandardImportContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


StandardImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterStandardImport(this);
	}
};

StandardImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitStandardImport(this);
	}
};




LnParser.StandardImportContext = StandardImportContext;

LnParser.prototype.standardImport = function() {

    var localctx = new StandardImportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, LnParser.RULE_standardImport);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 168;
        this.match(LnParser.IMPORT);
        this.state = 169;
        this.match(LnParser.WS);
        this.state = 170;
        this.dependency();
        this.state = 175;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.WS) {
            this.state = 171;
            this.match(LnParser.WS);
            this.state = 172;
            this.match(LnParser.AS);
            this.state = 173;
            this.match(LnParser.WS);
            this.state = 174;
            this.match(LnParser.VARNAME);
        }

        this.state = 178; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 177;
        		this.match(LnParser.NEWLINE);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 180; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,8, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromImportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fromImport;
    return this;
}

FromImportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromImportContext.prototype.constructor = FromImportContext;

FromImportContext.prototype.FROM = function() {
    return this.getToken(LnParser.FROM, 0);
};

FromImportContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


FromImportContext.prototype.dependency = function() {
    return this.getTypedRuleContext(DependencyContext,0);
};

FromImportContext.prototype.IMPORT = function() {
    return this.getToken(LnParser.IMPORT, 0);
};

FromImportContext.prototype.varlist = function() {
    return this.getTypedRuleContext(VarlistContext,0);
};

FromImportContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


FromImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFromImport(this);
	}
};

FromImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFromImport(this);
	}
};




LnParser.FromImportContext = FromImportContext;

LnParser.prototype.fromImport = function() {

    var localctx = new FromImportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, LnParser.RULE_fromImport);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 182;
        this.match(LnParser.FROM);
        this.state = 183;
        this.match(LnParser.WS);
        this.state = 184;
        this.dependency();
        this.state = 185;
        this.match(LnParser.WS);
        this.state = 186;
        this.match(LnParser.IMPORT);
        this.state = 187;
        this.match(LnParser.WS);
        this.state = 188;
        this.varlist();
        this.state = 190; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 189;
        		this.match(LnParser.NEWLINE);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 192; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,9, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DependencyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_dependency;
    return this;
}

DependencyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DependencyContext.prototype.constructor = DependencyContext;

DependencyContext.prototype.localdependency = function() {
    return this.getTypedRuleContext(LocaldependencyContext,0);
};

DependencyContext.prototype.globaldependency = function() {
    return this.getTypedRuleContext(GlobaldependencyContext,0);
};

DependencyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterDependency(this);
	}
};

DependencyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitDependency(this);
	}
};




LnParser.DependencyContext = DependencyContext;

LnParser.prototype.dependency = function() {

    var localctx = new DependencyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, LnParser.RULE_dependency);
    try {
        this.state = 196;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.CURDIR:
        case LnParser.PARDIR:
            this.enterOuterAlt(localctx, 1);
            this.state = 194;
            this.localdependency();
            break;
        case LnParser.GLOBAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 195;
            this.globaldependency();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocaldependencyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_localdependency;
    return this;
}

LocaldependencyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocaldependencyContext.prototype.constructor = LocaldependencyContext;

LocaldependencyContext.prototype.CURDIR = function() {
    return this.getToken(LnParser.CURDIR, 0);
};

LocaldependencyContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.VARNAME);
    } else {
        return this.getToken(LnParser.VARNAME, i);
    }
};


LocaldependencyContext.prototype.DIRSEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.DIRSEP);
    } else {
        return this.getToken(LnParser.DIRSEP, i);
    }
};


LocaldependencyContext.prototype.PARDIR = function() {
    return this.getToken(LnParser.PARDIR, 0);
};

LocaldependencyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterLocaldependency(this);
	}
};

LocaldependencyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitLocaldependency(this);
	}
};




LnParser.LocaldependencyContext = LocaldependencyContext;

LnParser.prototype.localdependency = function() {

    var localctx = new LocaldependencyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, LnParser.RULE_localdependency);
    var _la = 0; // Token type
    try {
        this.state = 210;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.CURDIR:
            this.enterOuterAlt(localctx, 1);
            this.state = 198;
            this.match(LnParser.CURDIR);
            this.state = 200; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 199;
                _la = this._input.LA(1);
                if(!(_la===LnParser.DIRSEP || _la===LnParser.VARNAME)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 202; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.DIRSEP || _la===LnParser.VARNAME);
            break;
        case LnParser.PARDIR:
            this.enterOuterAlt(localctx, 2);
            this.state = 204;
            this.match(LnParser.PARDIR);
            this.state = 206; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 205;
                _la = this._input.LA(1);
                if(!(_la===LnParser.DIRSEP || _la===LnParser.VARNAME)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 208; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.DIRSEP || _la===LnParser.VARNAME);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GlobaldependencyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_globaldependency;
    return this;
}

GlobaldependencyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobaldependencyContext.prototype.constructor = GlobaldependencyContext;

GlobaldependencyContext.prototype.GLOBAL = function() {
    return this.getToken(LnParser.GLOBAL, 0);
};

GlobaldependencyContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.VARNAME);
    } else {
        return this.getToken(LnParser.VARNAME, i);
    }
};


GlobaldependencyContext.prototype.DIRSEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.DIRSEP);
    } else {
        return this.getToken(LnParser.DIRSEP, i);
    }
};


GlobaldependencyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterGlobaldependency(this);
	}
};

GlobaldependencyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitGlobaldependency(this);
	}
};




LnParser.GlobaldependencyContext = GlobaldependencyContext;

LnParser.prototype.globaldependency = function() {

    var localctx = new GlobaldependencyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, LnParser.RULE_globaldependency);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 212;
        this.match(LnParser.GLOBAL);
        this.state = 214; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 213;
            _la = this._input.LA(1);
            if(!(_la===LnParser.DIRSEP || _la===LnParser.VARNAME)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 216; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.DIRSEP || _la===LnParser.VARNAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_types;
    return this;
}

TypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypesContext.prototype.constructor = TypesContext;

TypesContext.prototype.TYPE = function() {
    return this.getToken(LnParser.TYPE, 0);
};

TypesContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

TypesContext.prototype.typebody = function() {
    return this.getTypedRuleContext(TypebodyContext,0);
};

TypesContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

TypesContext.prototype.othertype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OthertypeContext);
    } else {
        return this.getTypedRuleContext(OthertypeContext,i);
    }
};

TypesContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypesContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

TypesContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.OR);
    } else {
        return this.getToken(LnParser.OR, i);
    }
};


TypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypes(this);
	}
};

TypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypes(this);
	}
};




LnParser.TypesContext = TypesContext;

LnParser.prototype.types = function() {

    var localctx = new TypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, LnParser.RULE_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 218;
        this.match(LnParser.TYPE);
        this.state = 220; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 219;
            this.blank();
            this.state = 222; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 224;
        this.typename();
        this.state = 228;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 225;
                this.blank(); 
            }
            this.state = 230;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
        }

        this.state = 232;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENGENERIC) {
            this.state = 231;
            this.typegenerics();
        }

        this.state = 235; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 234;
            this.blank();
            this.state = 237; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 267;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENBODY:
            this.state = 239;
            this.typebody();
            break;
        case LnParser.EQUALS:
            this.state = 240;
            this.match(LnParser.EQUALS);
            this.state = 244;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 241;
                this.blank();
                this.state = 246;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 247;
            this.othertype();
            this.state = 264;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 251;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                        this.state = 248;
                        this.blank();
                        this.state = 253;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 254;
                    this.match(LnParser.OR);
                    this.state = 258;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                        this.state = 255;
                        this.blank();
                        this.state = 260;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 261;
                    this.othertype(); 
                }
                this.state = 266;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OthertypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_othertype;
    return this;
}

OthertypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OthertypeContext.prototype.constructor = OthertypeContext;

OthertypeContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

OthertypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

OthertypeContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

OthertypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOthertype(this);
	}
};

OthertypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOthertype(this);
	}
};




LnParser.OthertypeContext = OthertypeContext;

LnParser.prototype.othertype = function() {

    var localctx = new OthertypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, LnParser.RULE_othertype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 269;
        this.typename();
        this.state = 273;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 270;
                this.blank(); 
            }
            this.state = 275;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
        }

        this.state = 277;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENGENERIC) {
            this.state = 276;
            this.typegenerics();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typename;
    return this;
}

TypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypenameContext.prototype.constructor = TypenameContext;

TypenameContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

TypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypename(this);
	}
};

TypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypename(this);
	}
};




LnParser.TypenameContext = TypenameContext;

LnParser.prototype.typename = function() {

    var localctx = new TypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, LnParser.RULE_typename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 279;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypegenericsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typegenerics;
    return this;
}

TypegenericsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypegenericsContext.prototype.constructor = TypegenericsContext;

TypegenericsContext.prototype.OPENGENERIC = function() {
    return this.getToken(LnParser.OPENGENERIC, 0);
};

TypegenericsContext.prototype.fulltypename = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FulltypenameContext);
    } else {
        return this.getTypedRuleContext(FulltypenameContext,i);
    }
};

TypegenericsContext.prototype.CLOSEGENERIC = function() {
    return this.getToken(LnParser.CLOSEGENERIC, 0);
};

TypegenericsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypegenericsContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


TypegenericsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypegenerics(this);
	}
};

TypegenericsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypegenerics(this);
	}
};




LnParser.TypegenericsContext = TypegenericsContext;

LnParser.prototype.typegenerics = function() {

    var localctx = new TypegenericsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, LnParser.RULE_typegenerics);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 281;
        this.match(LnParser.OPENGENERIC);
        this.state = 285;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 282;
            this.blank();
            this.state = 287;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 288;
        this.fulltypename();
        this.state = 292;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 289;
            this.blank();
            this.state = 294;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 295;
            this.match(LnParser.SEP);
            this.state = 299;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 296;
                this.blank();
                this.state = 301;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 302;
            this.fulltypename();
            this.state = 306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 303;
                this.blank();
                this.state = 308;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 313;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 314;
        this.match(LnParser.CLOSEGENERIC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FulltypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fulltypename;
    return this;
}

FulltypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FulltypenameContext.prototype.constructor = FulltypenameContext;

FulltypenameContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

FulltypenameContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FulltypenameContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

FulltypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFulltypename(this);
	}
};

FulltypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFulltypename(this);
	}
};




LnParser.FulltypenameContext = FulltypenameContext;

LnParser.prototype.fulltypename = function() {

    var localctx = new FulltypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, LnParser.RULE_fulltypename);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 316;
        this.varn();
        this.state = 320;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 317;
                this.blank(); 
            }
            this.state = 322;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

        this.state = 324;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENGENERIC) {
            this.state = 323;
            this.typegenerics();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypebodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typebody;
    return this;
}

TypebodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypebodyContext.prototype.constructor = TypebodyContext;

TypebodyContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

TypebodyContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

TypebodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypebodyContext.prototype.typeline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypelineContext);
    } else {
        return this.getTypedRuleContext(TypelineContext,i);
    }
};

TypebodyContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


TypebodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypebody(this);
	}
};

TypebodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypebody(this);
	}
};




LnParser.TypebodyContext = TypebodyContext;

LnParser.prototype.typebody = function() {

    var localctx = new TypebodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, LnParser.RULE_typebody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.match(LnParser.OPENBODY);
        this.state = 330;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 327;
                this.blank(); 
            }
            this.state = 332;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
        }

        this.state = 340; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 336;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(_la===LnParser.WS) {
        		    this.state = 333;
        		    this.match(LnParser.WS);
        		    this.state = 338;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		this.state = 339;
        		this.typeline();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 342; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,35, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 344;
            this.blank();
        }

        this.state = 347;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typeline;
    return this;
}

TypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypelineContext.prototype.constructor = TypelineContext;

TypelineContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

TypelineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

TypelineContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

TypelineContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


TypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypeline(this);
	}
};

TypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypeline(this);
	}
};




LnParser.TypelineContext = TypelineContext;

LnParser.prototype.typeline = function() {

    var localctx = new TypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, LnParser.RULE_typeline);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.match(LnParser.VARNAME);
        this.state = 350;
        this.match(LnParser.TYPESEP);
        this.state = 351;
        this.varn();
        this.state = 355;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 352;
                this.match(LnParser.NEWLINE); 
            }
            this.state = 357;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.FN = function() {
    return this.getToken(LnParser.FN, 0);
};

FunctionsContext.prototype.fullfunctionbody = function() {
    return this.getTypedRuleContext(FullfunctionbodyContext,0);
};

FunctionsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctionsContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

FunctionsContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

FunctionsContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

FunctionsContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

FunctionsContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

FunctionsContext.prototype.argtype = function() {
    return this.getTypedRuleContext(ArgtypeContext,0);
};

FunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctions(this);
	}
};

FunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctions(this);
	}
};




LnParser.FunctionsContext = FunctionsContext;

LnParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, LnParser.RULE_functions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.match(LnParser.FN);
        this.state = 360; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 359;
            this.blank();
            this.state = 362; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENARGS || _la===LnParser.VARNAME) {
            this.state = 371;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.VARNAME) {
                this.state = 364;
                this.match(LnParser.VARNAME);
                this.state = 368;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 365;
                    this.blank();
                    this.state = 370;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 373;
            this.match(LnParser.OPENARGS);
            this.state = 375;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.VARNAME) {
                this.state = 374;
                this.arglist();
            }

            this.state = 377;
            this.match(LnParser.CLOSEARGS);
            this.state = 381;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 378;
                this.blank();
                this.state = 383;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 392;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.TYPESEP) {
                this.state = 384;
                this.match(LnParser.TYPESEP);
                this.state = 385;
                this.argtype();
                this.state = 389;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 386;
                    this.blank();
                    this.state = 391;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

        }

        this.state = 396;
        this.fullfunctionbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FullfunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fullfunctionbody;
    return this;
}

FullfunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullfunctionbodyContext.prototype.constructor = FullfunctionbodyContext;

FullfunctionbodyContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

FullfunctionbodyContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

FullfunctionbodyContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

FullfunctionbodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FullfunctionbodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFullfunctionbody(this);
	}
};

FullfunctionbodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFullfunctionbody(this);
	}
};




LnParser.FullfunctionbodyContext = FullfunctionbodyContext;

LnParser.prototype.fullfunctionbody = function() {

    var localctx = new FullfunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, LnParser.RULE_fullfunctionbody);
    try {
        this.state = 407;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENBODY:
            this.enterOuterAlt(localctx, 1);
            this.state = 398;
            this.functionbody();
            break;
        case LnParser.EQUALS:
            this.enterOuterAlt(localctx, 2);
            this.state = 399;
            this.match(LnParser.EQUALS);
            this.state = 403;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 400;
                    this.blank(); 
                }
                this.state = 405;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
            }

            this.state = 406;
            this.assignables();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functionbody;
    return this;
}

FunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionbodyContext.prototype.constructor = FunctionbodyContext;

FunctionbodyContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

FunctionbodyContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

FunctionbodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctionbodyContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

FunctionbodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctionbody(this);
	}
};

FunctionbodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctionbody(this);
	}
};




LnParser.FunctionbodyContext = FunctionbodyContext;

LnParser.prototype.functionbody = function() {

    var localctx = new FunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, LnParser.RULE_functionbody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 409;
        this.match(LnParser.OPENBODY);
        this.state = 413;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 410;
            this.blank();
            this.state = 415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 417; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 416;
            this.statements();
            this.state = 419; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.CONST) | (1 << LnParser.LET) | (1 << LnParser.RETURN) | (1 << LnParser.EMIT) | (1 << LnParser.BOOLCONSTANT) | (1 << LnParser.IF) | (1 << LnParser.OPENARGS) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (LnParser.STRINGCONSTANT - 44)) | (1 << (LnParser.NUMBERCONSTANT - 44)) | (1 << (LnParser.VARNAME - 44)))) !== 0));
        this.state = 424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 421;
            this.blank();
            this.state = 426;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 427;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};

StatementsContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

StatementsContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

StatementsContext.prototype.exits = function() {
    return this.getTypedRuleContext(ExitsContext,0);
};

StatementsContext.prototype.emits = function() {
    return this.getTypedRuleContext(EmitsContext,0);
};

StatementsContext.prototype.conditionals = function() {
    return this.getTypedRuleContext(ConditionalsContext,0);
};

StatementsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitStatements(this);
	}
};




LnParser.StatementsContext = StatementsContext;

LnParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, LnParser.RULE_statements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 435;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            this.state = 429;
            this.declarations();
            break;

        case 2:
            this.state = 430;
            this.assignments();
            break;

        case 3:
            this.state = 431;
            this.calls();
            break;

        case 4:
            this.state = 432;
            this.exits();
            break;

        case 5:
            this.state = 433;
            this.emits();
            break;

        case 6:
            this.state = 434;
            this.conditionals();
            break;

        }
        this.state = 438; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 437;
        		this.blank();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 440; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,52, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;

DeclarationsContext.prototype.constdeclaration = function() {
    return this.getTypedRuleContext(ConstdeclarationContext,0);
};

DeclarationsContext.prototype.letdeclaration = function() {
    return this.getTypedRuleContext(LetdeclarationContext,0);
};

DeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterDeclarations(this);
	}
};

DeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitDeclarations(this);
	}
};




LnParser.DeclarationsContext = DeclarationsContext;

LnParser.prototype.declarations = function() {

    var localctx = new DeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, LnParser.RULE_declarations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 444;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.CONST:
            this.state = 442;
            this.constdeclaration();
            break;
        case LnParser.LET:
            this.state = 443;
            this.letdeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_constdeclaration;
    return this;
}

ConstdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstdeclarationContext.prototype.constructor = ConstdeclarationContext;

ConstdeclarationContext.prototype.CONST = function() {
    return this.getToken(LnParser.CONST, 0);
};

ConstdeclarationContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

ConstdeclarationContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ConstdeclarationContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

ConstdeclarationContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

ConstdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterConstdeclaration(this);
	}
};

ConstdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitConstdeclaration(this);
	}
};




LnParser.ConstdeclarationContext = ConstdeclarationContext;

LnParser.prototype.constdeclaration = function() {

    var localctx = new ConstdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, LnParser.RULE_constdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 446;
        this.match(LnParser.CONST);
        this.state = 450;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 447;
                this.blank(); 
            }
            this.state = 452;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

        this.state = 461;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        if(la_===1) {
            this.state = 453;
            this.match(LnParser.VARNAME);
            this.state = 457;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 454;
                this.blank();
                this.state = 459;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 460;
            this.match(LnParser.TYPESEP);

        }
        this.state = 466;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 463;
            this.blank();
            this.state = 468;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 469;
        this.assignments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LetdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_letdeclaration;
    return this;
}

LetdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetdeclarationContext.prototype.constructor = LetdeclarationContext;

LetdeclarationContext.prototype.LET = function() {
    return this.getToken(LnParser.LET, 0);
};

LetdeclarationContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

LetdeclarationContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

LetdeclarationContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

LetdeclarationContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

LetdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterLetdeclaration(this);
	}
};

LetdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitLetdeclaration(this);
	}
};




LnParser.LetdeclarationContext = LetdeclarationContext;

LnParser.prototype.letdeclaration = function() {

    var localctx = new LetdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, LnParser.RULE_letdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 471;
        this.match(LnParser.LET);
        this.state = 475;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 472;
                this.blank(); 
            }
            this.state = 477;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

        this.state = 486;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        if(la_===1) {
            this.state = 478;
            this.match(LnParser.VARNAME);
            this.state = 482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 479;
                this.blank();
                this.state = 484;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 485;
            this.match(LnParser.TYPESEP);

        }
        this.state = 491;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 488;
            this.blank();
            this.state = 493;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 494;
        this.assignments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_assignments;
    return this;
}

AssignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentsContext.prototype.constructor = AssignmentsContext;

AssignmentsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

AssignmentsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

AssignmentsContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

AssignmentsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

AssignmentsContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

AssignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterAssignments(this);
	}
};

AssignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitAssignments(this);
	}
};




LnParser.AssignmentsContext = AssignmentsContext;

LnParser.prototype.assignments = function() {

    var localctx = new AssignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, LnParser.RULE_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 496;
        this.varn();
        this.state = 500;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 497;
                this.blank(); 
            }
            this.state = 502;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

        this.state = 523;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.state = 504;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.OPENGENERIC) {
                this.state = 503;
                this.typegenerics();
            }

            this.state = 509;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 506;
                this.blank();
                this.state = 511;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 512;
            this.match(LnParser.EQUALS);
            this.state = 516;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 513;
                    this.blank(); 
                }
                this.state = 518;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
            }

            this.state = 519;
            this.assignables();
            break;

        case 2:
            this.state = 521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.OPENGENERIC) {
                this.state = 520;
                this.typegenerics();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_assignables;
    return this;
}

AssignablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignablesContext.prototype.constructor = AssignablesContext;

AssignablesContext.prototype.basicassignables = function() {
    return this.getTypedRuleContext(BasicassignablesContext,0);
};

AssignablesContext.prototype.withoperators = function() {
    return this.getTypedRuleContext(WithoperatorsContext,0);
};

AssignablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterAssignables(this);
	}
};

AssignablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitAssignables(this);
	}
};




LnParser.AssignablesContext = AssignablesContext;

LnParser.prototype.assignables = function() {

    var localctx = new AssignablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, LnParser.RULE_assignables);
    try {
        this.state = 527;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 525;
            this.basicassignables();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 526;
            this.withoperators();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BasicassignablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_basicassignables;
    return this;
}

BasicassignablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasicassignablesContext.prototype.constructor = BasicassignablesContext;

BasicassignablesContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

BasicassignablesContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

BasicassignablesContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

BasicassignablesContext.prototype.constants = function() {
    return this.getTypedRuleContext(ConstantsContext,0);
};

BasicassignablesContext.prototype.groups = function() {
    return this.getTypedRuleContext(GroupsContext,0);
};

BasicassignablesContext.prototype.typeofn = function() {
    return this.getTypedRuleContext(TypeofnContext,0);
};

BasicassignablesContext.prototype.objectliterals = function() {
    return this.getTypedRuleContext(ObjectliteralsContext,0);
};

BasicassignablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterBasicassignables(this);
	}
};

BasicassignablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitBasicassignables(this);
	}
};




LnParser.BasicassignablesContext = BasicassignablesContext;

LnParser.prototype.basicassignables = function() {

    var localctx = new BasicassignablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, LnParser.RULE_basicassignables);
    try {
        this.state = 536;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 529;
            this.functions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 530;
            this.calls();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 531;
            this.varn();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 532;
            this.constants();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 533;
            this.groups();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 534;
            this.typeofn();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 535;
            this.objectliterals();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatororassignableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operatororassignable;
    return this;
}

OperatororassignableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatororassignableContext.prototype.constructor = OperatororassignableContext;

OperatororassignableContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

OperatororassignableContext.prototype.basicassignables = function() {
    return this.getTypedRuleContext(BasicassignablesContext,0);
};

OperatororassignableContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperatororassignable(this);
	}
};

OperatororassignableContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperatororassignable(this);
	}
};




LnParser.OperatororassignableContext = OperatororassignableContext;

LnParser.prototype.operatororassignable = function() {

    var localctx = new OperatororassignableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, LnParser.RULE_operatororassignable);
    try {
        this.state = 540;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENGENERIC:
        case LnParser.CLOSEGENERIC:
        case LnParser.GLOBAL:
        case LnParser.DIRSEP:
        case LnParser.OR:
        case LnParser.GENERALOPERATORS:
        case LnParser.TYPESEP:
        case LnParser.WS:
            this.enterOuterAlt(localctx, 1);
            this.state = 538;
            this.operators();
            break;
        case LnParser.TYPE:
        case LnParser.FN:
        case LnParser.BOOLCONSTANT:
        case LnParser.NEW:
        case LnParser.OPENARGS:
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.STRINGCONSTANT:
        case LnParser.NUMBERCONSTANT:
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 2);
            this.state = 539;
            this.basicassignables();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithoperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_withoperators;
    return this;
}

WithoperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithoperatorsContext.prototype.constructor = WithoperatorsContext;

WithoperatorsContext.prototype.operatororassignable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OperatororassignableContext);
    } else {
        return this.getTypedRuleContext(OperatororassignableContext,i);
    }
};

WithoperatorsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


WithoperatorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterWithoperators(this);
	}
};

WithoperatorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitWithoperators(this);
	}
};




LnParser.WithoperatorsContext = WithoperatorsContext;

LnParser.prototype.withoperators = function() {

    var localctx = new WithoperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, LnParser.RULE_withoperators);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 549; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 542;
        		this.operatororassignable();
        		this.state = 546;
        		this._errHandler.sync(this);
        		var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		    if(_alt===1) {
        		        this.state = 543;
        		        this.match(LnParser.WS); 
        		    }
        		    this.state = 548;
        		    this._errHandler.sync(this);
        		    _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 551; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,72, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_groups;
    return this;
}

GroupsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupsContext.prototype.constructor = GroupsContext;

GroupsContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

GroupsContext.prototype.withoperators = function() {
    return this.getTypedRuleContext(WithoperatorsContext,0);
};

GroupsContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

GroupsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


GroupsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterGroups(this);
	}
};

GroupsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitGroups(this);
	}
};




LnParser.GroupsContext = GroupsContext;

LnParser.prototype.groups = function() {

    var localctx = new GroupsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, LnParser.RULE_groups);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.match(LnParser.OPENARGS);
        this.state = 557;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 554;
                this.match(LnParser.WS); 
            }
            this.state = 559;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
        }

        this.state = 560;
        this.withoperators();
        this.state = 564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 561;
            this.match(LnParser.WS);
            this.state = 566;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 567;
        this.match(LnParser.CLOSEARGS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeofnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typeofn;
    return this;
}

TypeofnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeofnContext.prototype.constructor = TypeofnContext;

TypeofnContext.prototype.TYPE = function() {
    return this.getToken(LnParser.TYPE, 0);
};

TypeofnContext.prototype.basicassignables = function() {
    return this.getTypedRuleContext(BasicassignablesContext,0);
};

TypeofnContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


TypeofnContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypeofn(this);
	}
};

TypeofnContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypeofn(this);
	}
};




LnParser.TypeofnContext = TypeofnContext;

LnParser.prototype.typeofn = function() {

    var localctx = new TypeofnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, LnParser.RULE_typeofn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.match(LnParser.TYPE);
        this.state = 573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 570;
            this.match(LnParser.WS);
            this.state = 575;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 576;
        this.basicassignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectliteralsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_objectliterals;
    return this;
}

ObjectliteralsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectliteralsContext.prototype.constructor = ObjectliteralsContext;

ObjectliteralsContext.prototype.NEW = function() {
    return this.getToken(LnParser.NEW, 0);
};

ObjectliteralsContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

ObjectliteralsContext.prototype.arrayliteral = function() {
    return this.getTypedRuleContext(ArrayliteralContext,0);
};

ObjectliteralsContext.prototype.typeliteral = function() {
    return this.getTypedRuleContext(TypeliteralContext,0);
};

ObjectliteralsContext.prototype.mapliteral = function() {
    return this.getTypedRuleContext(MapliteralContext,0);
};

ObjectliteralsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ObjectliteralsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterObjectliterals(this);
	}
};

ObjectliteralsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitObjectliterals(this);
	}
};




LnParser.ObjectliteralsContext = ObjectliteralsContext;

LnParser.prototype.objectliterals = function() {

    var localctx = new ObjectliteralsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, LnParser.RULE_objectliterals);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        this.match(LnParser.NEW);
        this.state = 582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 579;
            this.match(LnParser.WS);
            this.state = 584;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 585;
        this.othertype();
        this.state = 589;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 586;
            this.match(LnParser.WS);
            this.state = 591;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 595;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.state = 592;
            this.arrayliteral();
            break;

        case 2:
            this.state = 593;
            this.typeliteral();
            break;

        case 3:
            this.state = 594;
            this.mapliteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_arrayliteral;
    return this;
}

ArrayliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayliteralContext.prototype.constructor = ArrayliteralContext;

ArrayliteralContext.prototype.OPENARRAY = function() {
    return this.getToken(LnParser.OPENARRAY, 0);
};

ArrayliteralContext.prototype.assignablelist = function() {
    return this.getTypedRuleContext(AssignablelistContext,0);
};

ArrayliteralContext.prototype.CLOSEARRAY = function() {
    return this.getToken(LnParser.CLOSEARRAY, 0);
};

ArrayliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ArrayliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArrayliteral(this);
	}
};

ArrayliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArrayliteral(this);
	}
};




LnParser.ArrayliteralContext = ArrayliteralContext;

LnParser.prototype.arrayliteral = function() {

    var localctx = new ArrayliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, LnParser.RULE_arrayliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 597;
        this.match(LnParser.OPENARRAY);
        this.state = 601;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 598;
                this.blank(); 
            }
            this.state = 603;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
        }

        this.state = 604;
        this.assignablelist();
        this.state = 608;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 605;
            this.blank();
            this.state = 610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 611;
        this.match(LnParser.CLOSEARRAY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typeliteral;
    return this;
}

TypeliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeliteralContext.prototype.constructor = TypeliteralContext;

TypeliteralContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

TypeliteralContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

TypeliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypeliteralContext.prototype.assignments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentsContext);
    } else {
        return this.getTypedRuleContext(AssignmentsContext,i);
    }
};

TypeliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypeliteral(this);
	}
};

TypeliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypeliteral(this);
	}
};




LnParser.TypeliteralContext = TypeliteralContext;

LnParser.prototype.typeliteral = function() {

    var localctx = new TypeliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, LnParser.RULE_typeliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 613;
        this.match(LnParser.OPENBODY);
        this.state = 617;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 614;
            this.blank();
            this.state = 619;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 626; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 620;
            this.assignments();
            this.state = 622; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 621;
                this.blank();
                this.state = 624; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
            this.state = 628; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (LnParser.OPENARRAY - 29)) | (1 << (LnParser.METHODSEP - 29)) | (1 << (LnParser.VARNAME - 29)))) !== 0));
        this.state = 630;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_mapliteral;
    return this;
}

MapliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapliteralContext.prototype.constructor = MapliteralContext;

MapliteralContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

MapliteralContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

MapliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

MapliteralContext.prototype.mapline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MaplineContext);
    } else {
        return this.getTypedRuleContext(MaplineContext,i);
    }
};

MapliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterMapliteral(this);
	}
};

MapliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitMapliteral(this);
	}
};




LnParser.MapliteralContext = MapliteralContext;

LnParser.prototype.mapliteral = function() {

    var localctx = new MapliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, LnParser.RULE_mapliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 632;
        this.match(LnParser.OPENBODY);
        this.state = 636;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 633;
                this.blank(); 
            }
            this.state = 638;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
        }

        this.state = 647;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.TYPE) | (1 << LnParser.FN) | (1 << LnParser.BOOLCONSTANT) | (1 << LnParser.NEW) | (1 << LnParser.OPENARGS) | (1 << LnParser.OPENGENERIC) | (1 << LnParser.CLOSEGENERIC) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (LnParser.GLOBAL - 33)) | (1 << (LnParser.DIRSEP - 33)) | (1 << (LnParser.OR - 33)) | (1 << (LnParser.GENERALOPERATORS - 33)) | (1 << (LnParser.TYPESEP - 33)) | (1 << (LnParser.WS - 33)) | (1 << (LnParser.STRINGCONSTANT - 33)) | (1 << (LnParser.NUMBERCONSTANT - 33)) | (1 << (LnParser.VARNAME - 33)))) !== 0)) {
            this.state = 639;
            this.mapline();
            this.state = 641; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 640;
            		this.blank();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 643; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,85, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 649;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 650;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaplineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_mapline;
    return this;
}

MaplineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaplineContext.prototype.constructor = MaplineContext;

MaplineContext.prototype.assignables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignablesContext);
    } else {
        return this.getTypedRuleContext(AssignablesContext,i);
    }
};

MaplineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

MaplineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


MaplineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterMapline(this);
	}
};

MaplineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitMapline(this);
	}
};




LnParser.MaplineContext = MaplineContext;

LnParser.prototype.mapline = function() {

    var localctx = new MaplineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, LnParser.RULE_mapline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this.assignables();
        this.state = 656;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 653;
            this.match(LnParser.WS);
            this.state = 658;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 659;
        this.match(LnParser.TYPESEP);
        this.state = 663;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 660;
                this.match(LnParser.WS); 
            }
            this.state = 665;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
        }

        this.state = 666;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignablelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_assignablelist;
    return this;
}

AssignablelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignablelistContext.prototype.constructor = AssignablelistContext;

AssignablelistContext.prototype.assignables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignablesContext);
    } else {
        return this.getTypedRuleContext(AssignablesContext,i);
    }
};

AssignablelistContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

AssignablelistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


AssignablelistContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterAssignablelist(this);
	}
};

AssignablelistContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitAssignablelist(this);
	}
};




LnParser.AssignablelistContext = AssignablelistContext;

LnParser.prototype.assignablelist = function() {

    var localctx = new AssignablelistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, LnParser.RULE_assignablelist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 671;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 668;
                this.blank(); 
            }
            this.state = 673;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
        }

        this.state = 674;
        this.assignables();
        this.state = 685;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 675;
            this.match(LnParser.SEP);
            this.state = 679;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 676;
                    this.blank(); 
                }
                this.state = 681;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
            }

            this.state = 682;
            this.assignables();
            this.state = 687;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 691;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 688;
                this.blank(); 
            }
            this.state = 693;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FncallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fncall;
    return this;
}

FncallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FncallContext.prototype.constructor = FncallContext;

FncallContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

FncallContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

FncallContext.prototype.assignablelist = function() {
    return this.getTypedRuleContext(AssignablelistContext,0);
};

FncallContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFncall(this);
	}
};

FncallContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFncall(this);
	}
};




LnParser.FncallContext = FncallContext;

LnParser.prototype.fncall = function() {

    var localctx = new FncallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, LnParser.RULE_fncall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 694;
        this.match(LnParser.OPENARGS);
        this.state = 696;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.TYPE) | (1 << LnParser.FN) | (1 << LnParser.BOOLCONSTANT) | (1 << LnParser.NEW) | (1 << LnParser.OPENARGS) | (1 << LnParser.OPENGENERIC) | (1 << LnParser.CLOSEGENERIC) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (LnParser.GLOBAL - 33)) | (1 << (LnParser.DIRSEP - 33)) | (1 << (LnParser.OR - 33)) | (1 << (LnParser.GENERALOPERATORS - 33)) | (1 << (LnParser.TYPESEP - 33)) | (1 << (LnParser.NEWLINE - 33)) | (1 << (LnParser.WS - 33)) | (1 << (LnParser.STRINGCONSTANT - 33)) | (1 << (LnParser.NUMBERCONSTANT - 33)) | (1 << (LnParser.VARNAME - 33)))) !== 0)) {
            this.state = 695;
            this.assignablelist();
        }

        this.state = 698;
        this.match(LnParser.CLOSEARGS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_calls;
    return this;
}

CallsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallsContext.prototype.constructor = CallsContext;

CallsContext.prototype.varn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarnContext);
    } else {
        return this.getTypedRuleContext(VarnContext,i);
    }
};

CallsContext.prototype.fncall = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FncallContext);
    } else {
        return this.getTypedRuleContext(FncallContext,i);
    }
};

CallsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


CallsContext.prototype.METHODSEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.METHODSEP);
    } else {
        return this.getToken(LnParser.METHODSEP, i);
    }
};


CallsContext.prototype.constants = function() {
    return this.getTypedRuleContext(ConstantsContext,0);
};

CallsContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

CallsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

CallsContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

CallsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterCalls(this);
	}
};

CallsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitCalls(this);
	}
};




LnParser.CallsContext = CallsContext;

LnParser.prototype.calls = function() {

    var localctx = new CallsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, LnParser.RULE_calls);
    var _la = 0; // Token type
    try {
        this.state = 744;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 700;
            this.varn();
            this.state = 704;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.WS) {
                this.state = 701;
                this.match(LnParser.WS);
                this.state = 706;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 707;
            this.fncall();
            this.state = 720;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,96,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 708;
                    this.match(LnParser.METHODSEP);
                    this.state = 709;
                    this.varn();
                    this.state = 713;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===LnParser.WS) {
                        this.state = 710;
                        this.match(LnParser.WS);
                        this.state = 715;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 716;
                    this.fncall(); 
                }
                this.state = 722;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,96,this._ctx);
            }

            break;
        case LnParser.BOOLCONSTANT:
        case LnParser.OPENARGS:
        case LnParser.STRINGCONSTANT:
        case LnParser.NUMBERCONSTANT:
            this.enterOuterAlt(localctx, 2);
            this.state = 728;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case LnParser.BOOLCONSTANT:
            case LnParser.STRINGCONSTANT:
            case LnParser.NUMBERCONSTANT:
                this.state = 723;
                this.constants();
                break;
            case LnParser.OPENARGS:
                this.state = 724;
                this.match(LnParser.OPENARGS);
                this.state = 725;
                this.assignables();
                this.state = 726;
                this.match(LnParser.CLOSEARGS);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 740; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 730;
            		this.match(LnParser.METHODSEP);
            		this.state = 731;
            		this.varn();
            		this.state = 735;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		while(_la===LnParser.WS) {
            		    this.state = 732;
            		    this.match(LnParser.WS);
            		    this.state = 737;
            		    this._errHandler.sync(this);
            		    _la = this._input.LA(1);
            		}
            		this.state = 738;
            		this.fncall();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 742; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,99, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_exits;
    return this;
}

ExitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExitsContext.prototype.constructor = ExitsContext;

ExitsContext.prototype.RETURN = function() {
    return this.getToken(LnParser.RETURN, 0);
};

ExitsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

ExitsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ExitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterExits(this);
	}
};

ExitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitExits(this);
	}
};




LnParser.ExitsContext = ExitsContext;

LnParser.prototype.exits = function() {

    var localctx = new ExitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, LnParser.RULE_exits);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 746;
        this.match(LnParser.RETURN);
        this.state = 754;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        if(la_===1) {
            this.state = 750;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 747;
                    this.blank(); 
                }
                this.state = 752;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
            }

            this.state = 753;
            this.assignables();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_emits;
    return this;
}

EmitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmitsContext.prototype.constructor = EmitsContext;

EmitsContext.prototype.EMIT = function() {
    return this.getToken(LnParser.EMIT, 0);
};

EmitsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

EmitsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

EmitsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

EmitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterEmits(this);
	}
};

EmitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitEmits(this);
	}
};




LnParser.EmitsContext = EmitsContext;

LnParser.prototype.emits = function() {

    var localctx = new EmitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, LnParser.RULE_emits);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 756;
        this.match(LnParser.EMIT);
        this.state = 760;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 757;
            this.blank();
            this.state = 762;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 763;
        this.varn();
        this.state = 771;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        if(la_===1) {
            this.state = 767;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 764;
                    this.blank(); 
                }
                this.state = 769;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
            }

            this.state = 770;
            this.assignables();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionalsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_conditionals;
    return this;
}

ConditionalsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalsContext.prototype.constructor = ConditionalsContext;

ConditionalsContext.prototype.IF = function() {
    return this.getToken(LnParser.IF, 0);
};

ConditionalsContext.prototype.withoperators = function() {
    return this.getTypedRuleContext(WithoperatorsContext,0);
};

ConditionalsContext.prototype.blocklikes = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlocklikesContext);
    } else {
        return this.getTypedRuleContext(BlocklikesContext,i);
    }
};

ConditionalsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ConditionalsContext.prototype.ELSE = function() {
    return this.getToken(LnParser.ELSE, 0);
};

ConditionalsContext.prototype.conditionals = function() {
    return this.getTypedRuleContext(ConditionalsContext,0);
};

ConditionalsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterConditionals(this);
	}
};

ConditionalsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitConditionals(this);
	}
};




LnParser.ConditionalsContext = ConditionalsContext;

LnParser.prototype.conditionals = function() {

    var localctx = new ConditionalsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, LnParser.RULE_conditionals);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 773;
        this.match(LnParser.IF);
        this.state = 777;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 774;
                this.blank(); 
            }
            this.state = 779;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
        }

        this.state = 780;
        this.withoperators();
        this.state = 784;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 781;
            this.blank();
            this.state = 786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 787;
        this.blocklikes();
        this.state = 805;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        if(la_===1) {
            this.state = 791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 788;
                this.blank();
                this.state = 793;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 794;
            this.match(LnParser.ELSE);
            this.state = 798;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 795;
                this.blank();
                this.state = 800;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 803;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case LnParser.IF:
                this.state = 801;
                this.conditionals();
                break;
            case LnParser.FN:
            case LnParser.OPENBODY:
            case LnParser.OPENARRAY:
            case LnParser.METHODSEP:
            case LnParser.VARNAME:
                this.state = 802;
                this.blocklikes();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlocklikesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_blocklikes;
    return this;
}

BlocklikesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlocklikesContext.prototype.constructor = BlocklikesContext;

BlocklikesContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

BlocklikesContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

BlocklikesContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

BlocklikesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterBlocklikes(this);
	}
};

BlocklikesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitBlocklikes(this);
	}
};




LnParser.BlocklikesContext = BlocklikesContext;

LnParser.prototype.blocklikes = function() {

    var localctx = new BlocklikesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, LnParser.RULE_blocklikes);
    try {
        this.state = 810;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.FN:
            this.enterOuterAlt(localctx, 1);
            this.state = 807;
            this.functions();
            break;
        case LnParser.OPENBODY:
            this.enterOuterAlt(localctx, 2);
            this.state = 808;
            this.functionbody();
            break;
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 3);
            this.state = 809;
            this.varn();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_constants;
    return this;
}

ConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantsContext.prototype.constructor = ConstantsContext;

ConstantsContext.prototype.NUMBERCONSTANT = function() {
    return this.getToken(LnParser.NUMBERCONSTANT, 0);
};

ConstantsContext.prototype.STRINGCONSTANT = function() {
    return this.getToken(LnParser.STRINGCONSTANT, 0);
};

ConstantsContext.prototype.BOOLCONSTANT = function() {
    return this.getToken(LnParser.BOOLCONSTANT, 0);
};

ConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterConstants(this);
	}
};

ConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitConstants(this);
	}
};




LnParser.ConstantsContext = ConstantsContext;

LnParser.prototype.constants = function() {

    var localctx = new ConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, LnParser.RULE_constants);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        _la = this._input.LA(1);
        if(!(_la===LnParser.BOOLCONSTANT || _la===LnParser.STRINGCONSTANT || _la===LnParser.NUMBERCONSTANT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operators;
    return this;
}

OperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorsContext.prototype.constructor = OperatorsContext;

OperatorsContext.prototype.GENERALOPERATORS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.GENERALOPERATORS);
    } else {
        return this.getToken(LnParser.GENERALOPERATORS, i);
    }
};


OperatorsContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

OperatorsContext.prototype.OPENGENERIC = function() {
    return this.getToken(LnParser.OPENGENERIC, 0);
};

OperatorsContext.prototype.OR = function() {
    return this.getToken(LnParser.OR, 0);
};

OperatorsContext.prototype.GLOBAL = function() {
    return this.getToken(LnParser.GLOBAL, 0);
};

OperatorsContext.prototype.DIRSEP = function() {
    return this.getToken(LnParser.DIRSEP, 0);
};

OperatorsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


OperatorsContext.prototype.CLOSEGENERIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.CLOSEGENERIC);
    } else {
        return this.getToken(LnParser.CLOSEGENERIC, i);
    }
};


OperatorsContext.prototype.EQUALS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.EQUALS);
    } else {
        return this.getToken(LnParser.EQUALS, i);
    }
};


OperatorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperators(this);
	}
};

OperatorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperators(this);
	}
};




LnParser.OperatorsContext = OperatorsContext;

LnParser.prototype.operators = function() {

    var localctx = new OperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, LnParser.RULE_operators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 817;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 814;
            this.match(LnParser.WS);
            this.state = 819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 849;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.GENERALOPERATORS:
            this.state = 820;
            this.match(LnParser.GENERALOPERATORS);
            break;
        case LnParser.TYPESEP:
            this.state = 821;
            this.match(LnParser.TYPESEP);
            break;
        case LnParser.OPENGENERIC:
            this.state = 822;
            this.match(LnParser.OPENGENERIC);
            break;
        case LnParser.OR:
            this.state = 823;
            this.match(LnParser.OR);
            break;
        case LnParser.CLOSEGENERIC:
            this.state = 825; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 824;
            		this.match(LnParser.CLOSEGENERIC);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 827; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,114, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 845;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
            if(la_===1) {
                this.state = 830; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 829;
                    this.match(LnParser.EQUALS);
                    this.state = 832; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===LnParser.EQUALS);
                this.state = 837;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 834;
                        this.match(LnParser.GENERALOPERATORS); 
                    }
                    this.state = 839;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
                }


            } else if(la_===2) {
                this.state = 841; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 840;
                		this.match(LnParser.GENERALOPERATORS);
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 843; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,117, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

            }
            break;
        case LnParser.GLOBAL:
            this.state = 847;
            this.match(LnParser.GLOBAL);
            break;
        case LnParser.DIRSEP:
            this.state = 848;
            this.match(LnParser.DIRSEP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatormappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operatormapping;
    return this;
}

OperatormappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatormappingContext.prototype.constructor = OperatormappingContext;

OperatormappingContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

OperatormappingContext.prototype.NUMBERCONSTANT = function() {
    return this.getToken(LnParser.NUMBERCONSTANT, 0);
};

OperatormappingContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

OperatormappingContext.prototype.PREFIX = function() {
    return this.getToken(LnParser.PREFIX, 0);
};

OperatormappingContext.prototype.infix = function() {
    return this.getTypedRuleContext(InfixContext,0);
};

OperatormappingContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


OperatormappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperatormapping(this);
	}
};

OperatormappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperatormapping(this);
	}
};




LnParser.OperatormappingContext = OperatormappingContext;

LnParser.prototype.operatormapping = function() {

    var localctx = new OperatormappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, LnParser.RULE_operatormapping);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 853;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.PREFIX:
            this.state = 851;
            this.match(LnParser.PREFIX);
            break;
        case LnParser.INFIX:
            this.state = 852;
            this.infix();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 855;
        this.operators();
        this.state = 859;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 856;
            this.match(LnParser.WS);
            this.state = 861;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 862;
        this.match(LnParser.NUMBERCONSTANT);
        this.state = 864; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 863;
            this.match(LnParser.WS);
            this.state = 866; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.WS);
        this.state = 868;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InfixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_infix;
    return this;
}

InfixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InfixContext.prototype.constructor = InfixContext;

InfixContext.prototype.INFIX = function() {
    return this.getToken(LnParser.INFIX, 0);
};

InfixContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


InfixContext.prototype.COMMUTATIVE = function() {
    return this.getToken(LnParser.COMMUTATIVE, 0);
};

InfixContext.prototype.ASSOCIATIVE = function() {
    return this.getToken(LnParser.ASSOCIATIVE, 0);
};

InfixContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterInfix(this);
	}
};

InfixContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitInfix(this);
	}
};




LnParser.InfixContext = InfixContext;

LnParser.prototype.infix = function() {

    var localctx = new InfixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, LnParser.RULE_infix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.match(LnParser.INFIX);
        this.state = 874;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,123,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 871;
                this.match(LnParser.WS); 
            }
            this.state = 876;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,123,this._ctx);
        }

        this.state = 878;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.COMMUTATIVE) {
            this.state = 877;
            this.match(LnParser.COMMUTATIVE);
        }

        this.state = 883;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 880;
                this.match(LnParser.WS); 
            }
            this.state = 885;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
        }

        this.state = 887;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.ASSOCIATIVE) {
            this.state = 886;
            this.match(LnParser.ASSOCIATIVE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_events;
    return this;
}

EventsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventsContext.prototype.constructor = EventsContext;

EventsContext.prototype.EVENT = function() {
    return this.getToken(LnParser.EVENT, 0);
};

EventsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

EventsContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

EventsContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

EventsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

EventsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterEvents(this);
	}
};

EventsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitEvents(this);
	}
};




LnParser.EventsContext = EventsContext;

LnParser.prototype.events = function() {

    var localctx = new EventsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, LnParser.RULE_events);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 889;
        this.match(LnParser.EVENT);
        this.state = 890;
        this.blank();
        this.state = 891;
        this.match(LnParser.VARNAME);
        this.state = 895;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 892;
            this.blank();
            this.state = 897;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 898;
        this.match(LnParser.TYPESEP);
        this.state = 899;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandlersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_handlers;
    return this;
}

HandlersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlersContext.prototype.constructor = HandlersContext;

HandlersContext.prototype.ON = function() {
    return this.getToken(LnParser.ON, 0);
};

HandlersContext.prototype.eventref = function() {
    return this.getTypedRuleContext(EventrefContext,0);
};

HandlersContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

HandlersContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

HandlersContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

HandlersContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

HandlersContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterHandlers(this);
	}
};

HandlersContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitHandlers(this);
	}
};




LnParser.HandlersContext = HandlersContext;

LnParser.prototype.handlers = function() {

    var localctx = new HandlersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, LnParser.RULE_handlers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 901;
        this.match(LnParser.ON);
        this.state = 903; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 902;
            this.blank();
            this.state = 905; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 907;
        this.eventref();
        this.state = 909; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 908;
            this.blank();
            this.state = 911; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 916;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.FN:
            this.state = 913;
            this.functions();
            break;
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.state = 914;
            this.varn();
            break;
        case LnParser.OPENBODY:
            this.state = 915;
            this.functionbody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventrefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_eventref;
    return this;
}

EventrefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventrefContext.prototype.constructor = EventrefContext;

EventrefContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

EventrefContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

EventrefContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterEventref(this);
	}
};

EventrefContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitEventref(this);
	}
};




LnParser.EventrefContext = EventrefContext;

LnParser.prototype.eventref = function() {

    var localctx = new EventrefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, LnParser.RULE_eventref);
    try {
        this.state = 920;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 918;
            this.varn();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 919;
            this.calls();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_interfaces;
    return this;
}

InterfacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfacesContext.prototype.constructor = InterfacesContext;

InterfacesContext.prototype.INTERFACE = function() {
    return this.getToken(LnParser.INTERFACE, 0);
};

InterfacesContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

InterfacesContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

InterfacesContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

InterfacesContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


InterfacesContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

InterfacesContext.prototype.interfaceline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfacelineContext);
    } else {
        return this.getTypedRuleContext(InterfacelineContext,i);
    }
};

InterfacesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterInterfaces(this);
	}
};

InterfacesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitInterfaces(this);
	}
};




LnParser.InterfacesContext = InterfacesContext;

LnParser.prototype.interfaces = function() {

    var localctx = new InterfacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, LnParser.RULE_interfaces);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 922;
        this.match(LnParser.INTERFACE);
        this.state = 926;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 923;
            this.match(LnParser.WS);
            this.state = 928;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 929;
        this.match(LnParser.VARNAME);
        this.state = 933;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 930;
            this.match(LnParser.WS);
            this.state = 935;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 936;
        this.match(LnParser.OPENBODY);
        this.state = 940;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 937;
                this.blank(); 
            }
            this.state = 942;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
        }

        this.state = 951;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.FN) | (1 << LnParser.COMMUTATIVE) | (1 << LnParser.ASSOCIATIVE) | (1 << LnParser.OPENGENERIC) | (1 << LnParser.CLOSEGENERIC) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (LnParser.GLOBAL - 33)) | (1 << (LnParser.DIRSEP - 33)) | (1 << (LnParser.OR - 33)) | (1 << (LnParser.GENERALOPERATORS - 33)) | (1 << (LnParser.TYPESEP - 33)) | (1 << (LnParser.WS - 33)) | (1 << (LnParser.VARNAME - 33)))) !== 0)) {
            this.state = 943;
            this.interfaceline();
            this.state = 945; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 944;
            		this.blank();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 947; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,135, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 954;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfacelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_interfaceline;
    return this;
}

InterfacelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfacelineContext.prototype.constructor = InterfacelineContext;

InterfacelineContext.prototype.functiontypeline = function() {
    return this.getTypedRuleContext(FunctiontypelineContext,0);
};

InterfacelineContext.prototype.operatortypeline = function() {
    return this.getTypedRuleContext(OperatortypelineContext,0);
};

InterfacelineContext.prototype.propertytypeline = function() {
    return this.getTypedRuleContext(PropertytypelineContext,0);
};

InterfacelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterInterfaceline(this);
	}
};

InterfacelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitInterfaceline(this);
	}
};




LnParser.InterfacelineContext = InterfacelineContext;

LnParser.prototype.interfaceline = function() {

    var localctx = new InterfacelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, LnParser.RULE_interfaceline);
    try {
        this.state = 959;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 956;
            this.functiontypeline();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 957;
            this.operatortypeline();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 958;
            this.propertytypeline();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiontypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functiontypeline;
    return this;
}

FunctiontypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiontypelineContext.prototype.constructor = FunctiontypelineContext;

FunctiontypelineContext.prototype.functiontype = function() {
    return this.getTypedRuleContext(FunctiontypeContext,0);
};

FunctiontypelineContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

FunctiontypelineContext.prototype.FN = function() {
    return this.getToken(LnParser.FN, 0);
};

FunctiontypelineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


FunctiontypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctiontypeline(this);
	}
};

FunctiontypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctiontypeline(this);
	}
};




LnParser.FunctiontypelineContext = FunctiontypelineContext;

LnParser.prototype.functiontypeline = function() {

    var localctx = new FunctiontypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, LnParser.RULE_functiontypeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        _la = this._input.LA(1);
        if(!(_la===LnParser.FN || _la===LnParser.VARNAME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 965;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 962;
            this.match(LnParser.WS);
            this.state = 967;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 968;
        this.functiontype();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiontypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functiontype;
    return this;
}

FunctiontypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiontypeContext.prototype.constructor = FunctiontypeContext;

FunctiontypeContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

FunctiontypeContext.prototype.varn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarnContext);
    } else {
        return this.getTypedRuleContext(VarnContext,i);
    }
};

FunctiontypeContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

FunctiontypeContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

FunctiontypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctiontypeContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


FunctiontypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctiontype(this);
	}
};

FunctiontypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctiontype(this);
	}
};




LnParser.FunctiontypeContext = FunctiontypeContext;

LnParser.prototype.functiontype = function() {

    var localctx = new FunctiontypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, LnParser.RULE_functiontype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 970;
        this.match(LnParser.OPENARGS);
        this.state = 974;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 971;
            this.blank();
            this.state = 976;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 977;
        this.varn();
        this.state = 981;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 978;
            this.blank();
            this.state = 983;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1000;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 984;
            this.match(LnParser.SEP);
            this.state = 988;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 985;
                this.blank();
                this.state = 990;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 991;
            this.varn();
            this.state = 995;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 992;
                this.blank();
                this.state = 997;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1003;
        this.match(LnParser.CLOSEARGS);
        this.state = 1004;
        this.match(LnParser.TYPESEP);
        this.state = 1008;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1005;
            this.blank();
            this.state = 1010;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1011;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatortypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operatortypeline;
    return this;
}

OperatortypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatortypelineContext.prototype.constructor = OperatortypelineContext;

OperatortypelineContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

OperatortypelineContext.prototype.rightarg = function() {
    return this.getTypedRuleContext(RightargContext,0);
};

OperatortypelineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

OperatortypelineContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

OperatortypelineContext.prototype.leftarg = function() {
    return this.getTypedRuleContext(LeftargContext,0);
};

OperatortypelineContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

OperatortypelineContext.prototype.COMMUTATIVE = function() {
    return this.getToken(LnParser.COMMUTATIVE, 0);
};

OperatortypelineContext.prototype.ASSOCIATIVE = function() {
    return this.getToken(LnParser.ASSOCIATIVE, 0);
};

OperatortypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperatortypeline(this);
	}
};

OperatortypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperatortypeline(this);
	}
};




LnParser.OperatortypelineContext = OperatortypelineContext;

LnParser.prototype.operatortypeline = function() {

    var localctx = new OperatortypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, LnParser.RULE_operatortypeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1036;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 16)) & ~0x1f) == 0 && ((1 << (_la - 16)) & ((1 << (LnParser.COMMUTATIVE - 16)) | (1 << (LnParser.ASSOCIATIVE - 16)) | (1 << (LnParser.OPENARRAY - 16)) | (1 << (LnParser.METHODSEP - 16)) | (1 << (LnParser.VARNAME - 16)))) !== 0)) {
            this.state = 1019;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.COMMUTATIVE) {
                this.state = 1013;
                this.match(LnParser.COMMUTATIVE);
                this.state = 1015; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 1014;
                    this.blank();
                    this.state = 1017; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
            }

            this.state = 1027;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.ASSOCIATIVE) {
                this.state = 1021;
                this.match(LnParser.ASSOCIATIVE);
                this.state = 1023; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 1022;
                    this.blank();
                    this.state = 1025; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
            }

            this.state = 1029;
            this.leftarg();
            this.state = 1033;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,149,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1030;
                    this.blank(); 
                }
                this.state = 1035;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,149,this._ctx);
            }

        }

        this.state = 1038;
        this.operators();
        this.state = 1042;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1039;
            this.blank();
            this.state = 1044;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1045;
        this.rightarg();
        this.state = 1049;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1046;
            this.blank();
            this.state = 1051;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1052;
        this.match(LnParser.TYPESEP);
        this.state = 1056;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1053;
            this.blank();
            this.state = 1058;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1059;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeftargContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_leftarg;
    return this;
}

LeftargContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeftargContext.prototype.constructor = LeftargContext;

LeftargContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

LeftargContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterLeftarg(this);
	}
};

LeftargContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitLeftarg(this);
	}
};




LnParser.LeftargContext = LeftargContext;

LnParser.prototype.leftarg = function() {

    var localctx = new LeftargContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, LnParser.RULE_leftarg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1061;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RightargContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_rightarg;
    return this;
}

RightargContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RightargContext.prototype.constructor = RightargContext;

RightargContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

RightargContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterRightarg(this);
	}
};

RightargContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitRightarg(this);
	}
};




LnParser.RightargContext = RightargContext;

LnParser.prototype.rightarg = function() {

    var localctx = new RightargContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, LnParser.RULE_rightarg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1063;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertytypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_propertytypeline;
    return this;
}

PropertytypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertytypelineContext.prototype.constructor = PropertytypelineContext;

PropertytypelineContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

PropertytypelineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

PropertytypelineContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

PropertytypelineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


PropertytypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterPropertytypeline(this);
	}
};

PropertytypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitPropertytypeline(this);
	}
};




LnParser.PropertytypelineContext = PropertytypelineContext;

LnParser.prototype.propertytypeline = function() {

    var localctx = new PropertytypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, LnParser.RULE_propertytypeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1065;
        this.match(LnParser.VARNAME);
        this.state = 1069;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1066;
            this.match(LnParser.WS);
            this.state = 1071;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1072;
        this.match(LnParser.TYPESEP);
        this.state = 1076;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1073;
            this.match(LnParser.WS);
            this.state = 1078;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1079;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgtypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_argtype;
    return this;
}

ArgtypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgtypeContext.prototype.constructor = ArgtypeContext;

ArgtypeContext.prototype.othertype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OthertypeContext);
    } else {
        return this.getTypedRuleContext(OthertypeContext,i);
    }
};

ArgtypeContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.OR);
    } else {
        return this.getToken(LnParser.OR, i);
    }
};


ArgtypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ArgtypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArgtype(this);
	}
};

ArgtypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArgtype(this);
	}
};




LnParser.ArgtypeContext = ArgtypeContext;

LnParser.prototype.argtype = function() {

    var localctx = new ArgtypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, LnParser.RULE_argtype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1081;
        this.othertype();
        this.state = 1098;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,158,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1085;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 1082;
                    this.blank();
                    this.state = 1087;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1088;
                this.match(LnParser.OR);
                this.state = 1092;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 1089;
                    this.blank();
                    this.state = 1094;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1095;
                this.othertype(); 
            }
            this.state = 1100;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,158,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArglistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_arglist;
    return this;
}

ArglistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArglistContext.prototype.constructor = ArglistContext;

ArglistContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.VARNAME);
    } else {
        return this.getToken(LnParser.VARNAME, i);
    }
};


ArglistContext.prototype.TYPESEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.TYPESEP);
    } else {
        return this.getToken(LnParser.TYPESEP, i);
    }
};


ArglistContext.prototype.argtype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgtypeContext);
    } else {
        return this.getTypedRuleContext(ArgtypeContext,i);
    }
};

ArglistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


ArglistContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArglist(this);
	}
};

ArglistContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArglist(this);
	}
};




LnParser.ArglistContext = ArglistContext;

LnParser.prototype.arglist = function() {

    var localctx = new ArglistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, LnParser.RULE_arglist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1101;
        this.match(LnParser.VARNAME);
        this.state = 1102;
        this.match(LnParser.TYPESEP);
        this.state = 1103;
        this.argtype();
        this.state = 1110;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 1104;
            this.match(LnParser.SEP);
            this.state = 1105;
            this.match(LnParser.VARNAME);
            this.state = 1106;
            this.match(LnParser.TYPESEP);
            this.state = 1107;
            this.argtype();
            this.state = 1112;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_exports;
    return this;
}

ExportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportsContext.prototype.constructor = ExportsContext;

ExportsContext.prototype.EXPORT = function() {
    return this.getToken(LnParser.EXPORT, 0);
};

ExportsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

ExportsContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

ExportsContext.prototype.constdeclaration = function() {
    return this.getTypedRuleContext(ConstdeclarationContext,0);
};

ExportsContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ExportsContext.prototype.operatormapping = function() {
    return this.getTypedRuleContext(OperatormappingContext,0);
};

ExportsContext.prototype.events = function() {
    return this.getTypedRuleContext(EventsContext,0);
};

ExportsContext.prototype.interfaces = function() {
    return this.getTypedRuleContext(InterfacesContext,0);
};

ExportsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ExportsContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


ExportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterExports(this);
	}
};

ExportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitExports(this);
	}
};




LnParser.ExportsContext = ExportsContext;

LnParser.prototype.exports = function() {

    var localctx = new ExportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, LnParser.RULE_exports);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1113;
        this.match(LnParser.EXPORT);
        this.state = 1115; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1114;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1117; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 1126;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.state = 1119;
            this.varn();
            break;
        case LnParser.TYPE:
            this.state = 1120;
            this.types();
            break;
        case LnParser.CONST:
            this.state = 1121;
            this.constdeclaration();
            break;
        case LnParser.FN:
            this.state = 1122;
            this.functions();
            break;
        case LnParser.PREFIX:
        case LnParser.INFIX:
            this.state = 1123;
            this.operatormapping();
            break;
        case LnParser.EVENT:
            this.state = 1124;
            this.events();
            break;
        case LnParser.INTERFACE:
            this.state = 1125;
            this.interfaces();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varlist;
    return this;
}

VarlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarlistContext.prototype.constructor = VarlistContext;

VarlistContext.prototype.renameablevar = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RenameablevarContext);
    } else {
        return this.getTypedRuleContext(RenameablevarContext,i);
    }
};

VarlistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


VarlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarlist(this);
	}
};

VarlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarlist(this);
	}
};




LnParser.VarlistContext = VarlistContext;

LnParser.prototype.varlist = function() {

    var localctx = new VarlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, LnParser.RULE_varlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1128;
        this.renameablevar();
        this.state = 1133;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 1129;
            this.match(LnParser.SEP);
            this.state = 1130;
            this.renameablevar();
            this.state = 1135;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RenameablevarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_renameablevar;
    return this;
}

RenameablevarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameablevarContext.prototype.constructor = RenameablevarContext;

RenameablevarContext.prototype.varop = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VaropContext);
    } else {
        return this.getTypedRuleContext(VaropContext,i);
    }
};

RenameablevarContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


RenameablevarContext.prototype.AS = function() {
    return this.getToken(LnParser.AS, 0);
};

RenameablevarContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterRenameablevar(this);
	}
};

RenameablevarContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitRenameablevar(this);
	}
};




LnParser.RenameablevarContext = RenameablevarContext;

LnParser.prototype.renameablevar = function() {

    var localctx = new RenameablevarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, LnParser.RULE_renameablevar);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1136;
        this.varop();
        this.state = 1141;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.WS) {
            this.state = 1137;
            this.match(LnParser.WS);
            this.state = 1138;
            this.match(LnParser.AS);
            this.state = 1139;
            this.match(LnParser.WS);
            this.state = 1140;
            this.varop();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VaropContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varop;
    return this;
}

VaropContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VaropContext.prototype.constructor = VaropContext;

VaropContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

VaropContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

VaropContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarop(this);
	}
};

VaropContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarop(this);
	}
};




LnParser.VaropContext = VaropContext;

LnParser.prototype.varop = function() {

    var localctx = new VaropContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, LnParser.RULE_varop);
    try {
        this.state = 1145;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1143;
            this.match(LnParser.VARNAME);
            break;
        case LnParser.OPENGENERIC:
        case LnParser.CLOSEGENERIC:
        case LnParser.GLOBAL:
        case LnParser.DIRSEP:
        case LnParser.OR:
        case LnParser.GENERALOPERATORS:
        case LnParser.TYPESEP:
        case LnParser.WS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1144;
            this.operators();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varn;
    return this;
}

VarnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarnContext.prototype.constructor = VarnContext;

VarnContext.prototype.varsegment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarsegmentContext);
    } else {
        return this.getTypedRuleContext(VarsegmentContext,i);
    }
};

VarnContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarn(this);
	}
};

VarnContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarn(this);
	}
};




LnParser.VarnContext = VarnContext;

LnParser.prototype.varn = function() {

    var localctx = new VarnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, LnParser.RULE_varn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1148; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1147;
        		this.varsegment();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1150; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,165, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarsegmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varsegment;
    return this;
}

VarsegmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarsegmentContext.prototype.constructor = VarsegmentContext;

VarsegmentContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

VarsegmentContext.prototype.METHODSEP = function() {
    return this.getToken(LnParser.METHODSEP, 0);
};

VarsegmentContext.prototype.arrayaccess = function() {
    return this.getTypedRuleContext(ArrayaccessContext,0);
};

VarsegmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarsegment(this);
	}
};

VarsegmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarsegment(this);
	}
};




LnParser.VarsegmentContext = VarsegmentContext;

LnParser.prototype.varsegment = function() {

    var localctx = new VarsegmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, LnParser.RULE_varsegment);
    try {
        this.state = 1155;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1152;
            this.match(LnParser.VARNAME);
            break;
        case LnParser.METHODSEP:
            this.enterOuterAlt(localctx, 2);
            this.state = 1153;
            this.match(LnParser.METHODSEP);
            break;
        case LnParser.OPENARRAY:
            this.enterOuterAlt(localctx, 3);
            this.state = 1154;
            this.arrayaccess();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayaccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_arrayaccess;
    return this;
}

ArrayaccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayaccessContext.prototype.constructor = ArrayaccessContext;

ArrayaccessContext.prototype.OPENARRAY = function() {
    return this.getToken(LnParser.OPENARRAY, 0);
};

ArrayaccessContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

ArrayaccessContext.prototype.CLOSEARRAY = function() {
    return this.getToken(LnParser.CLOSEARRAY, 0);
};

ArrayaccessContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ArrayaccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArrayaccess(this);
	}
};

ArrayaccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArrayaccess(this);
	}
};




LnParser.ArrayaccessContext = ArrayaccessContext;

LnParser.prototype.arrayaccess = function() {

    var localctx = new ArrayaccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, LnParser.RULE_arrayaccess);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1157;
        this.match(LnParser.OPENARRAY);
        this.state = 1161;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,167,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1158;
                this.match(LnParser.WS); 
            }
            this.state = 1163;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,167,this._ctx);
        }

        this.state = 1164;
        this.assignables();
        this.state = 1168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1165;
            this.match(LnParser.WS);
            this.state = 1170;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1171;
        this.match(LnParser.CLOSEARRAY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.LnParser = LnParser;

},{"./LnListener":10,"antlr4/index":76}],12:[function(require,module,exports){
module.exports = {
  LnLexer: require('./LnLexer').LnLexer,
  LnParser: require('./LnParser').LnParser,
}

},{"./LnLexer":9,"./LnParser":11}],13:[function(require,module,exports){
(function (process){
const fs = require('fs')
const path = require('path')

const { InputStream, CommonTokenStream, } = require('antlr4')

const { LnLexer, LnParser } = require('../ln')

const resolve = (path) => {
  try {
    return fs.realpathSync(path)
  } catch (e) {
    return null
  }
}

const Ast = {
  fromString: (str) => {
    const inputStream = new InputStream(str)
    const langLexer = new LnLexer(inputStream)
    const commonTokenStream = new CommonTokenStream(langLexer)
    const langParser = new LnParser(commonTokenStream)

    return langParser.module()
  },

  fromFile: (filename) => {
    return Ast.fromString(fs.readFileSync(filename, { encoding: 'utf8', }))
  },

  resolveDependency: (modulePath, dependency) => {
    let importPath = null;
    // If the dependency is a local dependency, there's little logic in determining
    // what is being imported. It's either the relative path to a file with the language
    // extension, or the relative path to a directory containing an "index.ln" file
    if (dependency.localdependency() != null) {
      const dirPath = resolve(path.join(
        path.dirname(modulePath),
        dependency.localdependency().getText().toString(),
        "index.ln",
      ))
      const filePath = resolve(path.join(
        path.dirname(modulePath),
        dependency.localdependency().getText().toString() + ".ln"
      ))
      // It's possible for both to exist. Prefer the directory-based one, but warn the user
      if (typeof dirPath === "string" && typeof filePath === "string") {
        System.err.println(dirPath + " and " + filePath + " both exist. Using " + dirPath)
      }
      if (typeof filePath === "string") {
        importPath = filePath
      }
      if (typeof dirPath === "string") {
        importPath = dirPath
      }
      if (importPath === null) {
        // Should I do anything else here?
        console.error(
          "The dependency " +
          dependency.localdependency().getText().toString() +
          " could not be found.")
        process.exit(-2)
      }
    }
    // If the dependency is a global dependency, there's a more complicated resolution to find it.
    // This is inspired by the Ruby and Node resolution mechanisms, but with some changes that
    // should hopefully make some improvements so dependency-injection is effectively first-class
    // and micro-libraries are discouraged (the latter will require a multi-pronged effort)
    //
    // Essentially, there are two recursively-found directories that global modules can be found,
    // the `modules` directory and the `dependencies` directory (TBD: are these the final names?)
    // The `modules` directory is recursively checked first (with a special check to make sure it
    // ignores self-resolutions) and the first one found in that check, if any, is used. If not,
    // there's a special check if the dependency is an `@std/...` dependency, and if so to return
    // that string as-is so the built-in dependency is used. Next the same recursive check is
    // performed on the `dependencies` directories until the dependency is found. If that also
    // fails, then there will be a complaint and the process will exit.
    //
    // The idea is that the package manager will install dependencies into the `dependencies`
    // directory at the root of the project (or maybe PWD, but that seems a bit too unwieldy).
    // Meanwhile the `modules` directory will only exist if the developer wants it, but it can be
    // useful for cross-cutting code in the same project that doesn't really need to be open-
    // sourced but is annoying to always reference slightly differently in each file, eg
    // `../../../util`. Instead the project can have a project-root-level `modules` directory and
    // then `modules/util.ln` can be referenced simply with `import @util` anywhere in the project.
    //
    // Since this is also recursive, it's should make dependency injection a first-class citizen
    // of the language. For instance you can put all of your models in `modules/models/`, and then
    // your unit test suite can have its model mocks in `tests/modules/models/` and the dependency
    // you intend to inject into can be symlinked in the `tests/` directory to cause that version
    // to pull the injected code, instead. And of course, if different tests need different
    // dependency injections, you can turn the test file into a directory of the same name and
    // rename the file to `index.ln` within it, and then have the specific mocks that test needs
    // stored in a `modules/` directory in parallel with it, which will not impact other mocks.
    //
    // Because these mocks also have a special exception to not import themselves, this can also
    // be used for instrumentation purposes, where they override the actual module but then also
    // import the real thing and add extra behavior to it.
    //
    // While there are certainly uses for splitting some logical piece of code into a tree of
    // files and directories, it is my hope that the standard application organization path is a
    // project with a root `index.ln` file and `modules` and `dependencies` directories, and little
    // else. At least things like `modules/logger`, `modules/config`, etc should belong there.
    if (dependency.globaldependency() != null) {
      // Get the two potential dependency types, file and directory-style.
      const fileModule = dependency.globaldependency().getText().toString().substring(1) + ".ln"
      const dirModule = dependency.globaldependency().getText().toString().substring(1) + "/index.ln"
      // Get the initial root to check
      let pathRoot = path.dirname(modulePath)
      // Search the recursively up the directory structure in the `modules` directories for the
      // specified dependency, and if found, return it.
      while (pathRoot != null) {
        const dirPath = resolve(path.join(pathRoot, "modules", dirModule))
        const filePath = resolve(path.join(pathRoot, "modules", fileModule))
        // It's possible for a module to accidentally resolve to itself when the module wraps the
        // actual dependency it is named for.
        if (dirPath === modulePath || filePath === modulePath) {
          pathRoot = path.dirname(pathRoot)
          continue
        }
        // It's possible for both to exist. Prefer the directory-based one, but warn the user
        if (typeof dirPath === "string" && typeof filePath === "string") {
          System.err.println(dirPath + " and " + filePath + " both exist. Using " + dirPath)
        }
        if (typeof filePath === "string") {
          importPath = filePath
          break
        }
        if (typeof dirPath === "string") {
          importPath = dirPath
          break
        }
        if (pathRoot === "/") {
          pathRoot = null
        } else {
          pathRoot = path.dirname(pathRoot)
        }
      }
      if (importPath == null) {
        // If we can't find it defined in a `modules` directory, check if it's an `@std/...`
        // module and abort here so the built-in standard library is used.
        if (dependency.globaldependency().getText().toString().substring(0, 5) === "@std/") {
          // Not a valid path (starting with '@') to be used as signal to use built-in library)
          importPath = dependency.globaldependency().getText().toString()
        } else {
          // Go back to the original point and search up the tree for `dependencies` directories
          pathRoot = path.dirname(modulePath)
          while (pathRoot != null) {
            const dirPath = resolve(path.join(pathRoot, "dependencies", dirModule))
            const filePath = resolve(path.join(pathRoot, "dependencies", fileModule))
            // It's possible for both to exist. Prefer the directory-based one, but warn the user
            if (typeof dirPath === "string" && typeof filePath === "string") {
              System.err.println(dirPath + " and " + filePath + " both exist. Using " + dirPath)
            }
            if (typeof filePath === "string") {
              importPath = filePath
              break
            }
            if (typeof dirPath === "string") {
              importPath = dirPath
              break
            }
            if (pathRoot === "/") {
              pathRoot = null
            } else {
              pathRoot = path.dirname(pathRoot)
            }
          }
        }
        if (importPath == null) {
          // Should I do anything else here?
          console.error(
            "The dependency " +
            dependency.globaldependency().getText().toString() +
            " could not be found.")
          process.exit(-2)
        }
      }
    }
    return importPath
  },

  resolveImports: (modulePath, ast) => {
    let resolvedImports = []
    let imports = ast.imports();
    for (let i = 0; i < imports.length; i++) {
      const standardImport = imports[i].standardImport()
      const fromImport = imports[i].fromImport()
      let dependency = null

      if (standardImport != null) {
        dependency = standardImport.dependency()
      }
      if (fromImport != null) {
        dependency = fromImport.dependency()
      }
      if (dependency == null) {
        // Should I do anything else here?
        console.error("Things are horribly broken!")
        process.exit(-2)
      }
      importPath = Ast.resolveDependency(modulePath, dependency)
      resolvedImports.push(importPath)
    }
    return resolvedImports
  },

  functionAstFromString: (fn) => {
    const inputStream = new InputStream(fn)
    const langLexer = new LnLexer(inputStream);
    const commonTokenStream = new CommonTokenStream(langLexer);
    const langParser = new LnParser(commonTokenStream);

    return langParser.functions();
  },
}
module.exports = Ast

}).call(this,require('_process'))
},{"../ln":12,"_process":85,"antlr4":76,"fs":82,"path":84}],14:[function(require,module,exports){
(function (process){
const Type = require('./Type')
const Int8 = require('./Int8')
const Int16 = require('./Int16')
const Int32 = require('./Int32')
const Int64 = require('./Int64')
const Float32 = require('./Float32')
const Float64 = require('./Float64')

class Box {
  constructor(...args) {
    // Work around circular deps in another way
    const Scope = require('./Scope')
    const Microstatement = require('./Microstatement')
    const Int8 = require('./Int8')
    const Int16 = require('./Int16')
    const Int32 = require('./Int32')
    const Int64 = require('./Int64')
    const Float32 = require('./Float32')
    const Float64 = require('./Float64')
    const Event = require('./Event')
    if (args.length === 0) {
      this.type = Box.builtinTypes.void
      this.readonly = true
    } else if (args.length === 1) {
      if (typeof args[0] === "boolean") {
        this.type = Box.builtinTypes.void
        this.readonly = args[0]
      } else if (args[0] instanceof Type) {
        this.type = Box.builtinTypes.type
        this.typeval = args[0]
        this.readonly = true // Type declarations are always read-only
      } else if (args[0] instanceof Scope) {
        this.type = Box.builtinTypes.scope
        this.scopeval = args[0]
        this.readonly = true // Boxed scopes are always read-only
      } else if (args[0] instanceof Microstatement) {
        this.type = Box.builtinTypes.microstatement
        this.microstatementval = args[0]
        this.readonly = true
      } else if (args[0] instanceof Array) {
        // This is only operator declarations right now
        this.type = Box.builtinTypes.operator
        this.operatorval = args[0]
        this.readonly = true
      }
    } else if (args.length === 2) {
      if (args[0] instanceof Int8) {
        this.type = Box.builtinTypes.int8
        this.int8val = args[0]
        this.readonly = args[1]
      } else if (args[0] instanceof Int16) {
        this.type = Box.builtinTypes.int16
        this.int16val = args[0]
        this.readonly = args[1]
      } else if (args[0] instanceof Int32) {
        this.type = Box.builtinTypes.int32
        this.int32val = args[0]
        this.readonly = args[1]
      } else if (args[0] instanceof Int64) {
        this.type = Box.builtinTypes.int64
        this.int64val = args[0]
        this.readonly = args[1]
      } else if (args[0] instanceof Float32) {
        this.type = Box.builtinTypes.float32
        this.float32val = args[0]
        this.readonly = args[1]
      } else if (args[0] instanceof Float64) {
        this.type = Box.builtinTypes.float64
        this.float64val = args[0]
        this.readonly = args[1]
      } else if (typeof args[0] === "boolean") {
        this.type = Box.builtinTypes.bool
        this.boolval = args[0]
        this.readonly = args[1]
      } else if (typeof args[0] === "string") {
        this.type = Box.builtinTypes.string
        this.stringval = args[0]
        this.readonly = args[1]
      } else if (args[0] instanceof Array) {
        // This is only function declarations right now
        this.type = Box.builtinTypes["function"]
        this.functionval = args[0]
        this.readonly = args[1]
      } else if (args[0] instanceof Event) {
        this.type = Box.builtinTypes.Event
        this.eventval = args[0]
        this.readonly = args[1]
      }
      // Technically there's also supposed to be something for an "Object blank" but I don't know
      // what that is supposed to be for
    } else if (args.length === 3) {
      if (args[0] instanceof Array) {
        // It's an array, like a real one
        this.type = args[1]
        this.arrayval = args[0]
        this.readonly = args[2]
      } else if (args[0] instanceof Map) {
        // It's a map, also a real one
        this.type = args[1]
        this.mapval = args[0]
        this.readonly = args[2]
      } else if (args[0] instanceof Object) {
        // It's an event or user-defined type
        if (args[1].originalType == Box.builtinTypes.Event) {
          let eventval = new Event(args[0].name.stringval, args[1].properties.type, false)
          this.eventval = eventval
          this.readonly = args[2]
        } else {
          this.type = args[1]
          this.typevalval = args[0]
          this.readonly = args[2]
        }
      }
    }
  }
  
  static fromConstantsAst(constantsAst, scope, expectedType, readonly) {
    if (constantsAst.BOOLCONSTANT() != null) {
      if (constantsAst.BOOLCONSTANT().getText() === "true") {
        return new Box(true, readonly);
      } else {
        return new Box(false, readonly);
      }
    }
    if (constantsAst.STRINGCONSTANT() != null) {
      return new Box(
        constantsAst
          .STRINGCONSTANT()
          .getText()
          .substring(1, constantsAst.STRINGCONSTANT().getText().length - 1)
          .replace("\\t", "\t")
          .replace("\\b", "\b")
          .replace("\\n", "\n")
          .replace("\\r", "\r")
          .replace("\\f", "\f")
          .replace("\\'", "'")
          .replace("\\\"", "\"")
          .replace("\\\\", "\\"),
        readonly
      );
    }
    if (constantsAst.NUMBERCONSTANT() != null) {
      // TODO: Add support for hex, octal, scientific, etc
      const numberConst = constantsAst.NUMBERCONSTANT().getText();
      const typename = expectedType != null ? expectedType.typename : null
      if (typename != null && typename.equals("void")) typename = null;
      if (numberConst.indexOf('.') > -1) { // It's a float
        // TODO: How to handle other float constants like NaN, Infinity, -0, etc
        if (typename == null) {
          return new Box(new Float64(numberConst), readonly)
        } else if (typename.equals("float32")) {
          return new Box(new Float32(numberConst), readonly)
        } else if (typename.equals("float64")) {
          return new Box(new Float64(numberConst), readonly)
        } else {
          // Bad assignment
          console.error("Assigning floating point number to non-floating point type")
          process.exit(-6)
        }
      } else { // It's an integer
        // TODO: Should we error on overflowing constants in integer mode?
        if (typename == null) {
          return new Box(new Int64(numberConst), readonly)
        } else if (typename.equals("int8")) {
          return new Box(new Int8(numberConst), readonly)
        } else if (typename.equals("int16")) {
          return new Box(new Int16(numberConst), readonly)
        } else if (typename.equals("int32")) {
          return new Box(new Int32(numberConst), readonly)
        } else if (typename.equals("int64")) {
          return new Box(new Int64(numberConst), readonly)
        } else if (typename.equals("float32")) { // We'll allow floats to get integer constants
          return new Box(new Float32(numberConst), readonly)
        } else if (typename.equals("float64")) {
          return new Box(new Float64(numberConst), readonly)
        } else {
          // Bad assignment
          console.error("Assigning integer number to non-numeric type")
          console.error("Variable type: " + typename)
          process.exit(-7)
        }
      }
    }
    // This should never be reached
    return null
  }

  static fromConstAst(constAst, scope) {
    const assignment = constAst.assignments()
    return Box.fromAssignmentAst(assignment, scope, true)
  }

  static fromAssignmentAst(assignmentAst, scope, readonly) {
    // TODO: This code is becoming very overloaded with different meanings in different contexts
    // Should probably split this up into multiple functions instead of trying to have this function
    // guess which context it's running in.
    
    // TODO: Review if any of the extra logic after deepGet is needed anymore
    const typename = assignmentAst.varn().getText();
    let typeBox = scope.deepGet(assignmentAst.varn());

    let type;

    if (typeBox == null) {
      const nameSegments = typename.split(".");
      let parentName = nameSegments[0]
      for (let i = 1; i < nameSegments.length - 1; i++) {
        parentName += "." + nameSegments[i]
      }
      const childName = nameSegments[nameSegments.length - 1]
      typeBox = scope.deepGet(parentName)
      if (typeBox == null) {
        // Assignment to an undefined variable. This can legitimately happen in cases of type
        // inference, but not in other cases. This whole bit really needs to be rethought.
        return Box.fromAssignableAst(assignmentAst.assignables(), scope, null, readonly)
      }
      type = typeBox.type.properties[childName]
    } else if (typeBox.type.typename !== "type") {
      // This is actually a secondary assignment to an existing variable
      if (typeBox.readonly) {
        console.error("Invalid reassignment to constant: " + typename)
        process.exit(-30)
      }
      return Box.fromAssignableAst(assignmentAst.assignables(), scope, typeBox.type, false)
    } else {
      type = typeBox.typeval
    }

    if (type.generics.length > 0 && assignmentAst.typegenerics() != null) {
      let solidTypes = []
      for (fulltypenameAst of assignmentAst.typegenerics().fulltypename()) {
        solidTypes.push(fulltypenameAst.getText())
      }
      type = type.solidify(solidTypes, scope)
    }

    return Box.fromAssignableAst(assignmentAst.assignables(), scope, type, readonly)
  }

  static fromAssignableAst(assignableAst, scope, expectedType, readonly) {
    if (assignableAst == null) {
      return new Box(null, expectedType)
    }
    if (assignableAst.basicassignables() != null) {
      return Box.fromBasicAssignableAst(
        assignableAst.basicassignables(),
        scope,
        expectedType,
        readonly
      )
    }
    if (assignableAst.withoperators() != null) {
      // TODO: How to support this in the compiler
      // Operators are another form a function, to evaluate them requires a full interpreter, so
      // we'll come back to this later
      /* return Box.fromWithOperatorsAst(
        assignableAst.withoperators(),
        scope,
        expectedType,
        readonly
      ) */
      return new Box() // void it for now
    }
    // Just to prevent complains, but this should not be reachable
    return null
  }

  static fromBasicAssignableAst(basicAssignable, scope, expectedType, readonly) {
    if (basicAssignable.functions() != null) {
      const assignedFunction = UserFunction.fromAst(basicAssignable.functions(), scope)
      return new Box([assignedFunction], readonly)
    }
    if (basicAssignable.calls() != null) {
      // TODO: Support generating global constants from function calls at some point
      // return Function.callFromAst(basicAssignable.calls(), scope);
      return new Box() // Void it for now
    }
    if (basicAssignable.varn() != null) {
      return scope.deepGet(basicAssignable.varn());
    }
    if (basicAssignable.groups() != null) {
      // TODO: Suppor this later
      /* return Box.fromWithOperatorsAst(
        basicAssignable.groups().withoperators(),
        scope,
        expectedType,
        readonly
      ) */
      return new Box() // void it for now
    }
    if (basicAssignable.typeofn() != null) {
      // Potentially add a bunch of guards around this
      return new Box(Box.fromBasicAssignableAst(
        basicAssignable.typeofn().basicassignables(),
        scope,
        null,
        readonly
      ).type.typename, readonly)
    }
    if (basicAssignable.objectliterals() != null) {
      return Box.fromObjectLiteralsAst(
        basicAssignable.objectliterals(),
        scope,
        null,
        readonly
      )
    }
    if (basicAssignable.constants() != null) {
      return Box.fromConstantsAst(
        basicAssignable.constants(),
        scope,
        expectedType,
        readonly
      );
    }
    // Shouldn't be possible
    console.error("Something went wrong parsing the syntax")
    process.exit(-8)
  }

  static fromObjectLiteralsAst(objectliteralsAst, scope, expectedType, readonly) {
    const typename = objectliteralsAst.othertype().getText()
    const typeBox = scope.deepGet(typename)
    let type = null
    if (objectliteralsAst.othertype().typegenerics() != null && typeBox == null) {
      const originalTypeBox = scope.deepGet(objectliteralsAst.othertype().typename().getText())
      if (originalTypeBox == null) {
        console.error(objectliteralsAst.othertype().typename().getText() + " is referenced but not defined. Unexpected runtime error!")
        process.exit(-46)
      }
      let solidTypes = []
      for (const fulltypenameAst of objectliteralsAst.othertype().typegenerics().fulltypename()) {
        solidTypes.push(fulltypenameAst.getText())
      }
      type = originalTypeBox.typeval.solidify(solidTypes, scope)
    } else {
      type = typeBox.typeval
    }
    if (type == null) {
      console.error(objectliteralsAst.othertype().getText() + " is not a valid type")
      process.exit(-45)
    }
    if (objectliteralsAst.arrayliteral() != null) {
      let arrayval = []
      for (const assignableAst of objectliteralsAst.arrayliteral().assignablelist().assignables()) {
        arrayval.push(Box.fromAssignableAst(
          assignableAst,
          scope,
          type.properties["records"], // Special for Arrays (and Trees and Sets later)
          readonly
        ))
      }
      return new Box(arrayval, type, readonly)
    }
    if (objectliteralsAst.typeliteral() != null) {
      let typevalval = {}
      for (const assignmentsAst of objectliteralsAst.typeliteral().assignments()) {
        const property = assignmentsAst.varn().getText()
        const assignmentType = type.properties[property]
        if (assignmentsAst.assignables() == null) {
          // TODO: this can only happen if parts of the `assignments` syntax not valid here are used
          // This should be eliminated in the future, but for now just crash
          console.error("Invalid literal assignment for " + type.typename + " on the "
            + property + " property.")
          process.exit(-46)
        }
        typevalval.put(assignmentsAst.varn().getText(), Box.fromAssignableAst(
          assignmentsAst.assignables(),
          scope,
          assignmentType,
          readonly
        ))
      }
      return new Box(typevalval, type, readonly)
    }
    if (objectliteralsAst.mapliteral() != null) {
      let mapval = {}
      if (objectliteralsAst.mapliteral().mapline() != null) {
        for (const mapline of objectliteralsAst.mapliteral().mapline()) {
          const keyBox = Box.fromAssignableAst(
            mapline.assignables(0),
            scope,
            type.properties["key"], // Special for Maps
            readonly
          )
          const valBox = Box.fromAssignableAst(
            mapline.assignables(1),
            scope,
            type.properties["value"], // Special for Maps
            readonly
          )
          mapval.put(keyBox, valBox)
        }
      }
      return new Box(mapval, type, readonly)
    }
    // Should never reach here
    return null
  }

}

Box.builtinTypes = {
  void: new Type("void", true),
  int8: new Type("int8", true),
  int16: new Type("int16", true),
  int32: new Type("int32", true),
  int64: new Type("int64", true),
  float32: new Type("float32", true),
  float64: new Type("float64", true),
  bool: new Type("bool", true),
  string: new Type("string", true),
  Error: new Type("Error", true, {
    message: new Type("string", true, true),
    code: new Type("int64", true, true),
  }),
  "Array": new Type("Array", true, {
    records: new Type("V", true, true),
  }, {
    V: 0,
  }),
  Map: new Type("Map", true, {
    key: new Type("K", true, true),
    value: new Type("V", true, true),
  }, {
    K: 0,
    V: 1,
  }),
  KeyVal: new Type("KeyVal", true, {
    key: new Type("K", true, true),
    value: new Type("V", true, true),
  }, {
    K: 0,
    V: 1,
  }),
  "function": new Type("function", true),
  operator: new Type("operator", true),
  Event: new Type("Event", true, {
    type: new Type("E", true, true),
  }, {
    E: 0,
  }),
  type: new Type("type", true),
  scope: new Type("scope", true),
  microstatement: new Type("microstatement", true),
}

module.exports = Box

}).call(this,require('_process'))
},{"./Event":15,"./Float32":16,"./Float64":17,"./Int16":19,"./Int32":20,"./Int64":21,"./Int8":22,"./Microstatement":24,"./Scope":27,"./Type":30,"_process":85}],15:[function(require,module,exports){
(function (process){
class Event {
  constructor(name, type, builtIn) {
    this.name = name,
    this.type = type
    this.builtIn = builtIn
    this.handlers = []
    Event.allEvents.push(this)
  }

  toString() {
    return `event ${this.name}: ${this.type.typename}`
  }

  static fromAst(eventAst, scope) {
    const name = eventAst.VARNAME().getText()
    const boxedVal = scope.deepGet(eventAst.varn())
    if (boxedVal === null) {
      console.error("Could not find specified type: " + eventAst.varn().getText())
      process.exit(-8)
    } else if (!boxedVal.type.typename === "type") {
      console.error(eventAst.varn().getText() + " is not a type")
      process.exit(-9)
    }
    const type = boxedVal.typeval
    return new Event(name, type, false)
  }
}

Event.allEvents = []

module.exports = Event

}).call(this,require('_process'))
},{"_process":85}],16:[function(require,module,exports){
class Float32 {
  constructor(val) {
    this.val = val
  }
  toString() {
    return this.val
  }
}

module.exports = Float32 

},{}],17:[function(require,module,exports){
class Float64 {
  constructor(val) {
    this.val = val
  }
  toString() {
    return this.val
  }
}

module.exports = Float64

},{}],18:[function(require,module,exports){
class FunctionType {
  constructor(...args) {
    if (args.length === 1) {
      this.functionname = null
      this.args = []
      this.returnType = args[0]
    } else if (args.length === 2) {
      if (typeof args[0] === "string") {
        this.functionname = args[0]
        this.args = []
        this.returnType = args[1]
      } else if (args[0] instanceof Array) {
        this.functionname = null
        this.args = args[0]
        this.returnType = args[1]
      }
    } else if (args.length === 3) {
      this.functionname = args[0]
      this.args = args[1]
      this.returnType = args[2]
    }
  }
}

module.exports = FunctionType

},{}],19:[function(require,module,exports){
class Int16 {
  constructor(val) {
    this.val = val
  }
  toString() {
    return this.val
  }
}

module.exports = Int16

},{}],20:[function(require,module,exports){
class Int32 {
  constructor(val) {
    this.val = val
  }
  toString() {
    return this.val
  }
}

module.exports = Int32

},{}],21:[function(require,module,exports){
class Int64 {
  constructor(val) {
    this.val = val
  }
  toString() {
    return this.val
  }
}

module.exports = Int64

},{}],22:[function(require,module,exports){
class Int8 {
  constructor(val) {
    this.val = val
  }
  toString() {
    return this.val
  }
}

module.exports = Int8

},{}],23:[function(require,module,exports){
(function (process){
const Type = require('./Type')
const FunctionType = require('./FunctionType')

class Interface {
  constructor(...args) {
    if (args.length === 1) {
      this.interfacename = args[0]
      this.functionTypes = []
      this.operatorTypes = []
      this.requiredProperties = {}
    } else if (args.length === 4) {
      this.interfacename = args[0]
      this.functionTypes = args[1]
      this.operatorTypes = args[2]
      this.requiredProperties = args[3]
    }
  }

  typeApplies(typeToCheck, scope) {
    // Solve circular dependency issue
    const Box = require('./Box')
    for (const requiredProperty of Object.keys(this.requiredProperties)) {
      if (!typeToCheck.properties.hasOwnProperty(requiredProperty)) return false
    }

    for (const functionType of this.functionTypes) {
      if (functionType.functionname === null) continue // Anonymous functions checked at callsite
      const potentialFunctionsBox = scope.deepGet(functionType.functionname)
      if (
        potentialFunctionsBox == null ||
        potentialFunctionsBox.type != Box.builtinTypes["function"]
      ) {
        console.error(functionType.functionname + " is not the name of a function")
        process.exit(-48)
      }
      const potentialFunctions = potentialFunctionsBox.functionval
      let functionFound = false;
      for (const potentialFunction of potentialFunctions) {
        const argTypes = potentialFunction.getArguments()
        let argsMatch = true;
        for (let i = 0; i < argTypes.length; i++) {
          const functionTypeArgType = functionType.args[i];
          if (argTypes[i] == functionTypeArgType) continue
          if (argTypes[i].originalType == functionTypeArgType) continue
          if (argTypes[i] == typeToCheck) continue
          if (
            argTypes[i].iface != null &&
            functionTypeArgType.iface != null &&
            argTypes[i].iface == functionTypeArgType.iface
          ) continue
          argsMatch = false
          break
        }
        if (!argsMatch) continue
        functionFound = true
        break
        // TODO: Need to do special work to handle n-ary functions, but users can't define those yet
      }
      if (!functionFound) return false
    }

    for (const operatorType of this.operatorTypes) {
      // TODO: Implement me!
    }

    return true
  }

  static fromAst(interfaceAst, scope) {
    const Box = require('./Box')
    // Construct the basic interface, the wrapper type, and insert it into the scope
    // This is all necessary so the interface can self-reference when constructing the function and
    // operator types.
    const interfacename = interfaceAst.VARNAME().getText()
    let iface = new Interface(interfacename)
    const ifaceType = new Type(interfacename, false, iface)
    const ifaceTypeBox = new Box(ifaceType)
    scope.put(interfacename, ifaceTypeBox)

    // Now, insert the actual declarations of the interface, if there are any (if there are none,
    // it will provide only as much as a type generic -- you can set it to a variable and return it
    // but nothing else, unlike Go's ridiculous interpretation of a bare interface).
    if (interfaceAst.interfaceline() != null) {
      for (const interfaceline of interfaceAst.interfaceline()) {
        if (interfaceline.functiontypeline() != null) {
          const functiontypeline = interfaceline.functiontypeline()
          let functionname = null
          if (functiontypeline.VARNAME() != null) {
            functionname = functiontypeline.VARNAME().getText()
          }
          const typenames = functiontypeline.functiontype().varn();
          const returnTypeBox = scope.deepGet(typenames[typenames.length - 1].getText())
          if (returnTypeBox == null || returnTypeBox.typeval == null) {
            console.error(typenames.get(typenames.size() - 1).getText() + " is not a type")
            process.exit(-48)
          }
          const returnType = returnTypeBox.typeval
          let args = []
          for (let i = 0; i < typenames.length - 1; i++) {
            const argumentBox = scope.deepGet(typenames[i].getText())
            if (argumentBox == null || argumentBox.typeval == null) {
              console.error(typenames.get(i).getText() + " is not a type")
              process.exit(-49)
            }
            args.push(argumentBox.typeval)
          }
          const functionType = new FunctionType(functionname, args, returnType)
          iface.functionTypes.push(functionType)
        }
        if (interfaceline.operatortypeline() != null) {
          // TODO: Implement me! 
          console.error("Operator type declarations not yet implemented!")
        }
        if (interfaceline.propertytypeline() != null) {
          const propertyTypeBox = scope.deepGet(interfaceline.propertytypeline().varn().getText())
          if (propertyTypeBox == null || propertyTypeBox.typeval == null) {
            console.error(interfaceline.propertytypeline().varn().getText() + " is not a type")
            process.exit(-50)
          }
          iface.requiredProperties[
            interfaceline.propertytypeline().VARNAME().getText()
          ] = propertyTypeBox.typeval
        }
      }
    }
    return ifaceTypeBox
  }
}

module.exports = Interface

}).call(this,require('_process'))
},{"./Box":14,"./FunctionType":18,"./Type":30,"_process":85}],24:[function(require,module,exports){
(function (process){
const { v4: uuid, } = require('uuid')

const { LnParser, } = require('../ln')
const StatementType = require('./StatementType')
const Box = require('./Box')
const UserFunction = require('./UserFunction')

class Microstatement {
  constructor(...args) {
    if (args.length === 5) {
      this.statementType = args[0]
      this.scope = args[1]
      this.pure = args[2]
      this.outputName = args[3]
      this.alias = ""
      this.outputType = Box.builtinTypes.void
      this.inputNames = []
      this.fns = []
      this.closureStatements = args[4]
    } else if (args.length === 8) {
      this.statementType = args[0]
      this.scope = args[1]
      this.pure = args[2]
      this.outputName = args[3]
      this.alias = args[4]
      this.outputType = args[5]
      this.inputNames = args[6]
      this.fns = args[7]
      this.closureStatements = []
    } else if (args.length === 7) {
      this.statementType = args[0]
      this.scope = args[1]
      this.pure = args[2]
      this.outputName = args[3]
      this.alias = ""
      this.outputType = args[4]
      this.inputNames = args[5]
      this.fns = args[6]
      this.closureStatements = []
    }
  }

  toString() {
    let outString = "";
    switch (this.statementType) {
      case StatementType.CONSTDEC:
        outString = "const " + this.outputName + ": " + this.outputType.typename
        if (this.fns.length > 0) {
          outString += " = " + this.fns[0].getName() + "(" + this.inputNames.join(", ") + ")"
        } else if (this.inputNames.length > 0) {
          outString += " = " + this.inputNames[0] // Doesn't appear the list is ever used here
        }
        break
      case StatementType.LETDEC:
        outString = "let " + this.outputName + ": " + this.outputType.typename
        if (this.fns.length > 0) {
          outString += " = " + this.fns[0].getName() + "(" + this.inputNames.join(", ") + ")"
        } else if (this.inputNames.length > 0) {
          outString += " = " + this.inputNames[0] // Doesn't appear the list is ever used here
        }
        break
      case StatementType.ASSIGNMENT:
        outString = this.outputName
        if (this.fns.length > 0) {
          outString += " = " + this.fns[0].getName() + "(" + this.inputNames.join(", ") + ")"
        } else if (this.inputNames.length > 0) {
          outString += " = " + this.inputNames[0] // Doesn't appear the list is ever used here
        }
        break
      case StatementType.CALL:
        if (this.fns.length > 0) {
          outString += this.fns[0].getName() + "(" + this.inputNames.join(", ") + ")"
        }
        break
      case StatementType.EXIT:
        outString = "return "
        if (this.fns.length > 0) {
          outString += this.fns[0].getName() + "(" + this.inputNames.join(", ") + ")"
        } else if (this.inputNames.length > 0) {
          outString += this.inputNames[0] // Doesn't appear the list is ever used here
        }
        break
      case StatementType.EMIT:
        outString = "emit " + this.outputName + " "
        if (this.fns.length > 0) {
          outString += this.fns[0].getName() + "(" + this.inputNames.join(", ") + ")"
        } else if (this.inputNames.length > 0) {
          outString += this.inputNames[0] // Doesn't appear the list is ever used here
        }
        break
      case StatementType.CLOSURE:
        outString = "const " + this.outputName + ": function = fn (): void {\n"
        for (const m of this.closureStatements) {
          const s = m.toString()
          if (s !== "") {
            outString += "    " + m.toString() + "\n"
          }
        }
        outString += "  }"
        break
      case StatementType.REREF:
      case StatementType.ARG:
        // Intentionally never output anything, this is metadata for the transpiler algo only
        break
    }
    return outString
  }

  static fromVarName(varName, microstatements) {
    let original = null
    for (let i = microstatements.length - 1; i > -1; i--) {
      const microstatement = microstatements[i]
      // TODO: var resolution is complex. Need to revisit this.
      if (microstatement.outputName === varName) {
        original = microstatement
        break
      }
      if (microstatement.alias === varName) {
        original = microstatement
        break
      }
    }
    return original
  }

  static fromVarAst(varAst, scope, microstatements) {
    let original = Microstatement.fromVarName(varAst.getText(), microstatements)
    if (original == null) {
      original = scope.deepGet(varAst.getText())
    }
    if (original == null || !(original instanceof Microstatement)) {
      console.error(varAst.getText() + " cannot be found")
      console.error(
        varAst.getText() +
        " on line " +
        varAst.start.line +
        ":" +
        varAst.start.column
      )
      process.exit(-104)
    }
    // When a variable is reassigned (or was referenced in a function call or operator statement,
    // instead of duplicating its data, add a microstatement to rereference that data (all of the
    // function and operator calls expect their arguments to be the N statements preceding them).
    microstatements.push(new Microstatement(
      StatementType.REREF,
      scope,
      true,
      original.outputName,
      original.outputType,
      [],
      [],
    ))
  }

  static fromConstantsAst(constantsAst, scope, microstatements) {
    const constName = "_" + uuid().replace(/-/g, "_")
    const constBox = Box.fromConstantsAst(
      constantsAst,
      scope,
      null,
      true
    )
    let constVal
    try {
      JSON.parse(constantsAst.getText()) // Will fail on strings with escape chars
      constVal = constantsAst.getText()
    } catch (e) {
      // Hackery to get these strings to work
      constVal = JSON.stringify(constantsAst.getText().replace(/^["']/, '').replace(/["']$/, ''))
    }
    microstatements.push(new Microstatement(
      StatementType.CONSTDEC,
      scope,
      true,
      constName,
      constBox.type,
      [constVal],
      [],
    ))
  }

  static fromBasicAssignablesAst(basicAssignablesAst, returnTypeHint, scope, microstatements) {
    // Functions will be inlined in a second pass over the microstatements whereever it is called.
    // For now we still create the function object and the microstatement to assign it
    if (basicAssignablesAst.functions() != null) {
      const fnToAssign = UserFunction.fromAst(basicAssignablesAst.functions(), scope)
      const fnName = "fn_" + uuid().replace(/-/g, "_")
      microstatements.push(new Microstatement(
        StatementType.CONSTDEC,
        scope,
        true, // This assignment, at least
        fnName,
        Box.builtinTypes["function"],
        [],
        [fnToAssign],
      ))
      return
    }
    // Here is where we inline the functions that were defined elsewhere or just above here! Or if
    // it's a built-in function, we just call it as originally expected.
    if (basicAssignablesAst.calls() != null) {
      Microstatement.fromCallsAst(
        basicAssignablesAst.calls(),
        scope,
        microstatements
      )
      return
    }
    // A `var` assignment is simply a renaming of a variable. We need to find the existing
    // microstatement for that `var` name and "tag it" in the scope as an alias that can be looked
    // up later. For now, we'll include a useless reassignment for simplicity's sake.
    if (basicAssignablesAst.varn() != null) {
      Microstatement.fromVarAst(
        basicAssignablesAst.varn(),
        scope,
        microstatements
      )
      return
    }
    // `constants` are relatively simple affair.
    if (basicAssignablesAst.constants() != null) {
      Microstatement.fromConstantsAst(basicAssignablesAst.constants(), scope, microstatements)
      return
    }
    // `groups` are just grouped `withOperators`.
    if (basicAssignablesAst.groups() != null) {
      Microstatement.fromWithOperatorsAst(
        basicAssignablesAst.groups().withoperators(),
        null,
        scope,
        microstatements
      )
      return
    }
    // `typeof` is a special statement to get the type from a variable. This is usually static but
    // can be dynamic in certain cases. That's going to be tough to represent in the bytecode that
    // otherwise strips all of the type data away. (Though with all functions inlined the type
    // "branches" can be serialized in some fashion back to bare types. Only event handlers and
    // event emission on ADTs, or opcodes that return ADTs remain a concern.)
    // TODO: For now, ignore this complexity and assume it can just be serialized.
    if (basicAssignablesAst.typeofn() != null) {
      // First evaluate the type's basicassignables.
      Microstatement.fromBasicAssignablesAst(
        basicAssignablesAst.typeofn().basicassignables(),
        null,
        scope,
        microstatements
      )
      // The last microstatement is the one we want to get the type data from.
      const last = microstatements[microstatements.size() - 1]
      const constName = "_" + uuid().replace(/-/g, "_")
      microstatements.push(new Microstatement(
        StatementType.CONSTDEC,
        scope,
        true,
        constName,
        Box.builtinTypes["string"],
        [last.outputType.typename],
        [],
      ))
      return
    }
    // The conversion of object literals is devolved to alangraphcode when types are erased, at this
    // stage they're just passed through as-is. TODO: This is assuming everything inside of them are
    // constants. That is not a valid assumption and should be revisited.
    if (basicAssignablesAst.objectliterals() != null) {
      const constName = "_" + uuid().replace(/-/g, "_")
      const typeBox = scope.deepGet(basicAssignablesAst.objectliterals().othertype().getText())
      if (typeBox == null) {
        console.error(basicAssignablesAst.objectliterals().othertype().getText() + " is not defined")
        console.error(
          basicAssignablesAst.getText() +
          " on line " +
          basicAssignablesAst.start.line +
          ":" +
          basicAssignablesAst.start.column
        )
        process.exit(-105)
      }
      if (typeBox.typeval == null) {
        console.error(basicAssignablesAst.objectliterals().othertype().getText() + " is not a type")
        console.error(
          basicAssignablesAst.getText() +
          " on line " +
          basicAssignablesAst.start.line +
          ":" +
          basicAssignablesAst.start.column
        )
        process.exit(-106)
      }
      microstatements.push(new Microstatement(
        StatementType.CONSTDEC,
        scope,
        true,
        constName,
        typeBox.typeval,
        [basicAssignablesAst.objectliterals().getText()],
        [],
      ))
      return
    }
  }

  static fromWithOperatorsAst(withOperatorsAst, returnTypeHint, scope, microstatements) {
    let withOperatorsList = []
    for (const operatorOrAssignable of withOperatorsAst.operatororassignable()) {
      if (operatorOrAssignable.operators() != null) {
        const operator = operatorOrAssignable.operators()
        const op = scope.deepGet(operator.getText())
        if (op == null || op.operatorval == null) {
          console.error("Operator " + operator.getText() + " is not defined")
          process.exit(-34)
        }
        withOperatorsList.push(op)
      }
      if (operatorOrAssignable.basicassignables() != null) {
        Microstatement.fromBasicAssignablesAst(
          operatorOrAssignable.basicassignables(),
          null,
          scope,
          microstatements
        )
        const last = microstatements[microstatements.length - 1]
        withOperatorsList.push(new Box(last)) // Wrapped in a box to make this work
      }
    }
    // Now to combine these operators and values in the correct order. A compiled language could
    // never do something so inefficient, but I don't care about performance right now, so here's
    // the algorithm: while the list length is greater than 1, perform the two steps:
    // 1. Find the operator with the greatest precedence
    // 2. Apply the underlying function to the values on either side of the operator (or just the
    //    right side if the operator is a prefix operator), then replace the operator with the
    //    returned value in the list and delete the impacted values.
    while (withOperatorsList.length > 1) {
      let maxPrecedence = -1
      let maxOperatorLoc = -1
      let maxOperatorListLoc = -1
      for (let i = 0; i < withOperatorsList.length; i++) {
        if (withOperatorsList[i].operatorval != null) {
          const ops = withOperatorsList[i].operatorval;
          let op = null
          let operatorListLoc = -1
          let operatorPrecedence = -127
          if (ops.length == 1) {
            op = ops[0]
            operatorListLoc = 0
          } else {
            // TODO: We need to identify which particular operator applies in this case.
            // We're just going to short-circuit this process on the first operator that matches
            // but we need to come up with a "best match" behavior (ie, if one argument is an int8
            // it may choose the int64-based operator because it was first and it can cast int8 to
            // int64 and then miss the specialized int8 version of the function).
            let left = null
            if (i != 0) left = withOperatorsList[i - 1]
            let right = null // Technically, since we're doing this at runtime, there could be a syntax error
            if (i != withOperatorsList.length - 1) right = withOperatorsList[i + 1]
            for (let j = 0; j < ops.length; j++) {
              if (
                ops[j].precedence > operatorPrecedence &&
                ops[j].applicableFunction(
                  left == null ? null : left.microstatementval.outputType,
                  right == null ? null : right.microstatementval.outputType,
                  scope
                ) != null
              ) {
                op = ops[j]
                operatorListLoc = j
                operatorPrecedence = op.precedence
              }
            }
            // During the process of determining the operator ordering, there may be tests that
            // will not match because operator precedence will convert the neighboring types into
            // types that will match. This is complicated and doing this statically will be more
            // difficult, but for now, just skip over these.
            if (op == null) continue
          }
          
          if (op.precedence > maxPrecedence) {
            maxPrecedence = op.precedence
            maxOperatorLoc = i
            maxOperatorListLoc = operatorListLoc
          }
        }
      }
      if (maxPrecedence == -1 || maxOperatorLoc == -1) {
        console.error("Cannot resolve operators with remaining statement")
        let withOperatorsTranslation = []
        for (let i = 0; i < withOperatorsList.length; i++) {
          const node = withOperatorsList[i]
          if (node.operatorval != null) {
            withOperatorsTranslation.push(node.operatorval[0].name)
          } else {
            withOperatorsTranslation.push("<" + node.microstatementval.outputType.typename + ">")
          }
        }
        console.error(withOperatorsTranslation.join(" "))
        process.exit(-34)
      }
      const op = withOperatorsList[maxOperatorLoc].operatorval[maxOperatorListLoc]
      let realArgNames = []
      let realArgTypes = []
      if (!op.isPrefix) {
        const left = withOperatorsList[maxOperatorLoc - 1].microstatementval
        realArgNames.push(left.outputName)
        realArgTypes.push(left.outputType)
      }
      const right = withOperatorsList[maxOperatorLoc + 1].microstatementval
      realArgNames.push(right.outputName)
      realArgTypes.push(right.outputType)
      UserFunction
        .dispatchFn(op.potentialFunctions, realArgTypes, scope)
        .microstatementInlining(realArgNames, scope, microstatements)
      const last = microstatements[microstatements.length - 1]
      withOperatorsList[maxOperatorLoc] = new Box(last)
      withOperatorsList.splice(maxOperatorLoc + 1, 1)
      if (!op.isPrefix) {
        withOperatorsList.splice(maxOperatorLoc - 1, 1)
      }
    }
  }

  static closureFromBlocklikesAst(blocklikesAst, scope, microstatements) {
    // There are roughly two paths for closure generation of the blocklike. If it's a var reference
    // to another function, use the scope to grab the function definition directly, run the inlining
    // logic on it, then attach them to a new microstatement declaring the closure. If it's closure
    // that could (probably usually will) reference the outer scope, the inner statements should be
    // converted as normal, but with the current length of the microstatements array tracked so they
    // can be pruned back off of the list to be reattached to a closure microstatement type.
    const constName = "_" + uuid().replace(/-/g, "_")
    if (blocklikesAst.varn() != null) {
      const fnToClose = scope.deepGet(blocklikesAst.varn())
      if (fnToClose == null || fnToClose.functionval == null) {
        console.error(blocklikesAst.varn().getText() + " is not a function")
        process.exit(-111)
      }
      // TODO: Revisit this on resolving the appropriate function if multiple match, right now just
      // take the first one.
      const closureFn = fnToClose.functionval[0]
      let innerMicrostatements = []
      closureFn.microstatementInlining([], scope, innerMicrostatements)
      microstatements.push(new Microstatement(
        StatementType.CLOSURE,
        scope,
        true, // Guaranteed true in this case, it's not really a closure
        constName,
        innerMicrostatements
      ))
    } else {
      let len = microstatements.length;
      if (blocklikesAst.functionbody() != null) {
        for (const s of blocklikesAst.functionbody().statements()) {
          Microstatement.fromStatementsAst(s, scope, microstatements)
        }
      } else {
        if (blocklikesAst.functions().fullfunctionbody().functionbody() != null) {
          for (const s of blocklikesAst.functions().fullfunctionbody().functionbody().statements()) {
            Microstatement.fromStatementsAst(s, scope, microstatements)
          }
        } else {
          Microstatement.fromAssignablesAst(
            blocklikesAst.functions().fullfunctionbody().assignables(),
            scope,
            microstatements
          )
        }
      }
      let newlen = microstatements.length;
      // There might be off-by-one bugs in the conversion here
      const innerMicrostatements = microstatements.slice(len, newlen)
      microstatements.splice(len, newlen - len)
      microstatements.push(new Microstatement(
        StatementType.CLOSURE,
        scope,
        true, // Guaranteed true in this case, it's not really a closure
        constName,
        innerMicrostatements
      ))
    }
  }

  static fromConditionalsAst(conditionalsAst, scope, microstatements) {
    // Solve circular dependency issue
    const opcodeScope = require('./opcodes').exportScope
    // TODO: There are two kinds of conditionals, the ones that are side-effect-only and the ones
    // that return in one or more branches. First pass they all stay the same, but in the second
    // pass when all functions are inlined into the handlers, returns are transformed into
    // assignments and a trick will be necessary to handle conditional assignment with constants. It
    // might be possible to turn all conditionals into ternary operators and maintain the same
    // logical behavior, but it'll be complicated.
    
    // First, pull out the conditional and turn it into microstatements
    Microstatement.fromWithOperatorsAst(
      conditionalsAst.withoperators(),
      "bool",
      scope,
      microstatements
    )
    // Now we grab that conditional assignment and hold onto a reference for use later
    const conditional = microstatements[microstatements.length - 1]
    // Next, we take the if statement body and turn it into a closure assignment. This is almost the
    // same as function inlining, except we don't inline it and wrap it in `fn (): void { }`. We are
    // guaranteed that there are no arguments passed to this closure explicitly due to how `if`
    // statements work.
    Microstatement.closureFromBlocklikesAst(
      conditionalsAst.blocklikes()[0],
      scope,
      microstatements
    )
    // Time to grab a reference to the closure
    const closure = microstatements[microstatements.length - 1]
    // Next, we take the closure and feed it to the `condfn` function/opcode along with
    // the conditional value.
    microstatements.push(new Microstatement(
      StatementType.CALL,
      scope,
      true,
      "",
      Box.builtinTypes.void,
      [conditional.outputName, closure.outputName],
      opcodeScope.get("condfn").functionval,
    ))
    if (conditionalsAst.ELSE()) {
      // First we need to invert the boolean
      // TODO: Should we create another opcode instead to reduce the instruction size?
      const elseBoolName = "_" + uuid().replace(/-/g, "_")
      microstatements.push(new Microstatement(
        StatementType.CONSTDEC,
        scope,
        true,
        elseBoolName,
        Box.builtinTypes.bool,
        [conditional.outputName],
        opcodeScope.get('notbool').functionval,
      ))
      // Get a reference to the inverted boolean for checking
      const otherwise = microstatements[microstatements.length - 1]
      if (conditionalsAst.blocklikes()[1]) {
        // This is just like the above and we're terminating our work here
        Microstatement.closureFromBlocklikesAst(
          conditionalsAst.blocklikes()[1],
          scope,
          microstatements
        )
      } else {
        // Solve circular dependency issue again
        const Scope = require('./Scope')
        // This path is a bit different. We need to wrap the follow-up else if branch inside of a
        // new microstatement closure definition and then conditionally call that closure
        // We're creating this structure wholesale, so we can't re-use other closure code
        const otherClosureName = "_" + uuid().replace(/-/g, "_")
        let innerMicrostatements = []
        // Since we blow away the microstatements list with a new sub-array, we need to let the
        // inner scope have access to the original microstatements in case it's referencing the
        // outer scope. We do this with a new scope that contains all of the microstatements placed
        // in that scope. Ideally we can be a bit more picky in the future
        let innerScope = new Scope(scope)
        for (const m of microstatements) {
          if (m.outputName != "") {
            innerScope.put(m.outputName, m)
          }
        }
        Microstatement.fromConditionalsAst(
          conditionalsAst.conditionals(),
          innerScope,
          innerMicrostatements,
        )
        microstatements.push(new Microstatement(
          StatementType.CLOSURE,
          scope,
          true, // TODO: Is this really true?
          otherClosureName,
          innerMicrostatements,
        ))
      }
      // Time to grab a reference to the closure
      const otherClosure = microstatements[microstatements.length - 1]
      microstatements.push(new Microstatement(
        StatementType.CALL,
        scope,
        true,
        "",
        Box.builtinTypes.void,
        [otherwise.outputName, otherClosure.outputName],
        opcodeScope.get("condfn").functionval,
      ))
    }
    // TODO: Continue on this. Add early return detection and support
  }

  static fromEmitsAst(emitsAst, scope, microstatements) {
    if (emitsAst.assignables() != null) {
      // If there's an assignable value here, add it to the list of microstatements first, then
      // rewrite the final const assignment as the emit statement.
      Microstatement.fromAssignablesAst(emitsAst.assignables(), scope, microstatements)
      const eventBox = scope.deepGet(emitsAst.varn())
      if (eventBox.eventval == null) {
        console.error(emitsAst.varn().getText() + " is not an event!")
        console.error(
          emitsAst.getText() +
          " on line " +
          emitsAst.start.line +
          ":" +
          emitsAst.start.column
        )
        process.exit(-101)
      }
      const last = microstatements[microstatements.length - 1]
      if (
        last.outputType != eventBox.eventval.type &&
        !eventBox.eventval.type.castable(last.outputType)
      ) {
        console.error(
          "Attempting to assign a value of type " +
          last.outputType.typename +
          " to an event of type " +
          eventBox.eventval.type.typename
        )
        console.error(
          emitsAst.getText() +
          " on line " +
          emitsAst.start.line +
          ":" +
          emitsAst.start.column
        )
        process.exit(-103)
      }
      microstatements.push(new Microstatement(
        StatementType.EMIT,
        scope,
        true,
        eventBox.eventval.name,
        eventBox.eventval.type,
        [last.outputName],
        [],
      ))
    } else {
      // Otherwise, create an emit statement with no value
      const eventBox = scope.deepGet(emitsAst.varn());
      if (eventBox.eventval == null) {
        console.error(emitsAst.varn().getText() + " is not an event!")
        console.error(
          emitsAst.getText() +
          " on line " +
          emitsAst.start.line +
          ":" +
          emitsAst.start.column
        )
        process.exit(-102)
      }
      if (eventBox.eventval.type != Box.builtinTypes.void) {
        console.error(emitsAst.varn().getText() + " must have a value emitted to it!")
        console.error(
          emitsAst.getText() +
          " on line " +
          emitsAst.start.line +
          ":" +
          emitsAst.start.column
        )
        process.exit(-103)
      }
      microstatements.push(new Microstatement(
        StatementType.EMIT,
        scope,
        true,
        eventBox.eventval.name,
        Box.builtinTypes.void,
        [],
        [],
      ))
    }
  }

  static fromExitsAst(exitsAst, scope, microstatements) {
    // `alan--` doesn't have the concept of a `return` statement, but this is necessary for
    // the intermediate state before functions are inlined.
    if (exitsAst.assignables() != null) {
      // If there's an assignable value here, add it to the list of microstatements first, then
      // rewrite the final const assignment as the exit statement.
      Microstatement.fromAssignablesAst(
        exitsAst.assignables(),
        scope,
        microstatements
      )
      microstatements[microstatements.length - 1].statementType = StatementType.EXIT
    } else {
      // Otherwise, create an exit statement with no value
      microstatements.push(new Microstatement(
        StatementType.EXIT,
        scope,
        true,
        "void",
        Box.builtinTypes.void,
        [],
        [],
      ))
    }
  }

  static fromCallsAst(callsAst, scope, microstatements) {
    // Function call syntax also supports method chaining syntax, and you can chain off of any
    // assignable value (where they're wrapped in parens for clarity, with a special exception for
    // constants that would be unambiguous). This means there are three classes of function calls:
    // 1. Simple function call `fn(args)`
    // 2. Chained function calls `fn1(args1).fn2(args2)` (equivalent to `fn2(fn1(args1), args2)`)
    // 3. Chained data function calls `arg1.fn1(args2).fn2(args3)` (`fn2(fn1(arg1, args2), args3)`)
    // Four possible paths here:
    // 1. Only function calls potentially chained to each other.
    // 2. A constant is the first value, then function calls chained afterwards
    // 3. Any other value type wrapped in parens, then function calls chained afterwards.
    // 4. A variable name then a `.` then a function name. Both can contain dots, as well
    // These four can be taken care of in the following way: If it's 2 or 3, eval them and
    // generate the relevant microstatements. Take the last microstatement and store in a
    // `firstArg` variable. If it's the first case, `firstArg` is `null`. If it's the final case,
    // disambiguate it by iterating through the potential `varname.methodname` combinations and if
    // one is found, that gets set as the `firstArg`, but this is only done if its the first run
    // through the loops *and* no `firstArg` value already exists. After that, loop through the 
    // `var` and `fncall` entries, evaluating the arguments and adding to the `realArg*` lists
    // (and putting the `firstArg` value in the first entry of each if it exists). Then perform
    // the function `microstatementInlining` and take the last microstatement as the new
    // `firstArg` for the next loop iteration until all method calls have been taken care of.
    let firstArg = null
    if (callsAst.constants() != null) {
      Microstatement.fromConstantsAst(callsAst.constants(), scope, microstatements)
      firstArg = microstatements[microstatements.length - 1]
    }
    if (callsAst.assignables() != null) {
      Microstatement.fromAssignablesAst(callsAst.assignables(), scope, microstatements)
      firstArg = microstatements[microstatements.length - 1]
    }
    for (let i = 0; i < callsAst.varn().length; i++) {
      // First, resolve the function. TODO: Need to add support for closure functions defined in
      // the same function, which would not be in an outer scope passed in.
      let fnBox = scope.deepGet(callsAst.varn(i).getText())
      if (i == 0 && firstArg == null && fnBox == null) {
        // This may be a method-style access on something with nested scoping
        // TODO: Make this more robust in the future. Currently assuming the last ".something" is
        // the method call and everything before it is easily accessible through the scopes.
        const varSegs = callsAst.varn(0).getText().split(".")
        const methodName = varSegs[varSegs.length - 1]
        let scopePath = ""
        for (let j = 0; j < varSegs.length - 1; j++) {
          scopePath += varSegs[j] + "."
        }
        scopePath = scopePath.substring(0, scopePath.length - 1)
        firstArg = Microstatement.fromVarName(scopePath, microstatements)
        if (firstArg == null) { // It wasn't this, either, just return the same error
          console.error("Undefined function called: " + callsAst.varn(0).getText())
          process.exit(-140)
        }
        fnBox = scope.deepGet(methodName)
      }
      if (fnBox == null || fnBox.functionval == null) {
        console.error(callsAst.varn(i).getText() + " is not a function!")
        console.error(
          callsAst.getText() +
          " on line " +
          callsAst.start.line +
          ":" +
          callsAst.start.column
        )
        process.exit(-106)
      }
      // Build up a list of the arguments to be passed into the function, first 'eval'ing them and
      // getting the relevant microstatements defined.
      let realArgNames = []
      let realArgTypes = []
      if (firstArg != null) {
        if (firstArg.alias !== "") {
          for (const m of microstatements) {
            if (m.outputName === firstArg.outputName) {
              firstArg = m
              break
            }
          }
        }
        realArgNames.push(firstArg.outputName)
        realArgTypes.push(firstArg.outputType)
      }
      if (callsAst.fncall(i).assignablelist() != null) {
        for (const assignablesAst of callsAst.fncall(i).assignablelist().assignables()) {
          Microstatement.fromAssignablesAst(assignablesAst, scope, microstatements)
          let last = microstatements[microstatements.length - 1]
          if (last.alias !== "") {
            for (const m of microstatements) {
              if (m.outputName === last.outputName) {
                last = m
                break
              }
            }
          }
          realArgNames.push(last.outputName)
          realArgTypes.push(last.outputType)
        }
      }
      // Generate the relevant microstatements for this function. UserFunctions get inlined with the
      // return statement turned into a const assignment (TODO: handle conditionals correctly) as
      // the last statement, while built-in functions are kept as function calls with the correct
      // renaming.
      UserFunction
        .dispatchFn(fnBox.functionval, realArgTypes, scope)
        .microstatementInlining(realArgNames, scope, microstatements)
      firstArg = microstatements[microstatements.length - 1]
    }
  }

  static fromAssignmentsAst(assignmentsAst, scope, microstatements) {
    const letName = assignmentsAst.varn().getText()
    let letType = null
    for (const microstatement of microstatements) {
      if (microstatement.outputName === letName) {
        if (microstatement.statementType == StatementType.LETDEC) {
          letType = microstatement.outputType
          break
        } else {
          console.error("Attempting to reassign a non-let variable.")
          console.error(
            letName +
            " on line " +
            assignmentsAst.line +
            ":" +
            assignmentsAst.start.column
          )
          process.exit(100)
        }
      }
    }
    // TODO: Clean up the const/let declarations and assignments. That this is possible with the
    // parser is bad here, but necessary for let declarations because of the weird re-use of stuff.
    if (assignmentsAst.assignables() == null) {
      console.error("Let variable re-assignment without a value specified.")
      console.error(
        letName +
        " on line " +
        assignmentsAst.start.line +
        ":" +
        assignmentsAst.start.column
      )
      process.exit(101)
    }
    // An assignable may either be a basic constant or could be broken down into other microstatements
    // The classification with assignables is: if it's a `withoperators` type it *always* becomes
    // multiple microstatements and it should return the variable name it generated to store the data.
    // If it's a `basicassignables` type it could be either a "true constant" or generate multiple
    // microstatements. The types that fall under the "true constant" category are: functions,
    // var, and constants.
    if (assignmentsAst.assignables().withoperators() != null) {
      // Update the microstatements list with the operator serialization
      Microstatement.fromWithOperatorsAst(
        assignmentsAst.assignables().withoperators(),
        letType.typename,
        scope,
        microstatements
      )
      // By definition the last microstatement is the const assignment we care about, so we can just
      // mutate its object to rename the output variable name to the name we need instead.
      microstatements[microstatements.length - 1].outputName = letName
      return
    }
    if (assignmentsAst.assignables().basicassignables() != null) {
      Microstatement.fromBasicAssignablesAst(
        assignmentsAst.assignables().basicassignables(),
        letType.typename,
        scope,
        microstatements
      )
      // The same rule as above, the last microstatement is already a const assignment for the value
      // that we care about, so just rename its variable to the one that will be expected by other
      // code.
      microstatements[microstatements.length - 1].outputName = letName
      return
    }
  }

  static fromLetdeclarationAst(letdeclarationAst, scope, microstatements) {
    // TODO: Once we figure out how to handle re-assignment to let variables as new variable names
    // with all references to that variable afterwards rewritten, these can just be brought in as
    // constants, too.
    let letName;
    let letTypeHint = null;
    if (letdeclarationAst.VARNAME() != null) {
      letName = letdeclarationAst.VARNAME().getText()
      letTypeHint = letdeclarationAst.assignments().varn().getText()
      if (letdeclarationAst.assignments().typegenerics() != null) {
        letTypeHint += letdeclarationAst.assignments().typegenerics().getText()
      }
    } else {
      letName = letdeclarationAst.assignments().varn().getText()
      // We don't know the type ahead of time and will have to rely on inference in this case
    }
    if (letdeclarationAst.assignments().assignables() == null) {
      // This is the situation where a variable is declared but no value is yet assigned. This can
      // be (and the interpreter currently behaves) as if this was a `type | void` situation, but
      // perhaps that should be required to be explicit?
      const blankLet = new Microstatement(
        StatementType.LETDEC,
        scope,
        true,
        letName,
        scope.deepGet("void").typeval,
        ["void"],
        null
      );
      // This is a terminating condition for the microstatements, though
      microstatements.push(blankLet)
      return
    }
    // An assignable may either be a basic constant or could be broken down into other microstatements
    // The classification with assignables is: if it's a `withoperators` type it *always* becomes
    // multiple microstatements and it should return the variable name it generated to store the data.
    // If it's a `basicassignables` type it could be either a "true constant" or generate multiple
    // microstatements. The types that fall under the "true constant" category are: functions,
    // var, and constants.
    if (letdeclarationAst.assignments().assignables().withoperators() != null) {
      // Update the microstatements list with the operator serialization
      Microstatement.fromWithOperatorsAst(
        letdeclarationAst.assignments().assignables().withoperators(),
        letTypeHint,
        scope,
        microstatements
      )
      // By definition the last microstatement is the const assignment we care about, so we can just
      // mutate its object to rename the output variable name to the name we need instead.
      microstatements[microstatements.length - 1].outputName = letName
      return
    }
    if (letdeclarationAst.assignments().assignables().basicassignables() != null) {
      Microstatement.fromBasicAssignablesAst(
        letdeclarationAst.assignments().assignables().basicassignables(),
        letTypeHint,
        scope,
        microstatements
      )
      // The same rule as above, the last microstatement is already a const assignment for the value
      // that we care about, so just rename its variable to the one that will be expected by other
      // code.
      microstatements[microstatements.length - 1].outputName = letName
      return
    }
  }

  static fromConstdeclarationAst(constdeclarationAst, scope, microstatements) {
    // TODO: Weirdness in the ANTLR grammar around declarations needs to be cleaned up at some point
    let constName
    let constTypeHint = null
    if (constdeclarationAst.VARNAME() != null) {
      constName = constdeclarationAst.VARNAME().getText()
      constTypeHint = constdeclarationAst.assignments().varn().getText()
      if (constdeclarationAst.assignments().typegenerics() != null) {
        constTypeHint += constdeclarationAst.assignments().typegenerics().getText()
      }
    } else {
      constName = constdeclarationAst.assignments().varn().getText()
      // We don't know the type ahead of time and will have to refer on inference in this case
    }
    if (constdeclarationAst.assignments().assignables() == null) {
      // This is a weird edge case where a constant with no assignment was declared. Should this
      // even be legal?
      const weirdConst = new Microstatement(
        StatementType.CONSTDEC,
        scope,
        true,
        constName,
        scope.deepGet("void").typeval,
        ["void"],
        null
      );
      // This is a terminating condition for the microstatements, though
      microstatements.push(weirdConst)
      return
    }
    // An assignable may either be a basic constant or could be broken down into other microstatements
    // The classification with assignables is: if it's a `withoperators` type it *always* becomes
    // multiple microstatements and it should return the variable name it generated to store the data.
    // If it's a `basicassignables` type it could be either a "true constant" or generate multiple
    // microstatements. The types that fall under the "true constant" category are: functions,
    // var, and constants.
    if (constdeclarationAst.assignments().assignables().withoperators() != null) {
      // Update the microstatements list with the operator serialization
      Microstatement.fromWithOperatorsAst(
        constdeclarationAst.assignments().assignables().withoperators(),
        constTypeHint,
        scope,
        microstatements
      )
      // By definition the last microstatement is the const assignment we care about, so we can just
      // mutate its object to rename the output variable name to the name we need instead.
      microstatements[microstatements.length - 1].outputName = constName
      return
    }
    if (constdeclarationAst.assignments().assignables().basicassignables() != null) {
      Microstatement.fromBasicAssignablesAst(
        constdeclarationAst.assignments().assignables().basicassignables(),
        constTypeHint,
        scope,
        microstatements
      )
      // The same rule as above, the last microstatement is already a const assignment for the value
      // that we care about, so just rename its variable to the one that will be expected by other
      // code.
      microstatements[microstatements.length - 1].outputName = constName
      return
    }
  }

  // DFS recursive algo to get the microstatements in a valid ordering
  static fromStatementsAst(statementAst, scope, microstatements) {
    if (statementAst.declarations() != null) {
      if (statementAst.declarations().constdeclaration() != null) {
        Microstatement.fromConstdeclarationAst(
          statementAst.declarations().constdeclaration(),
          scope,
          microstatements
        )
      } else {
        Microstatement.fromLetdeclarationAst(
          statementAst.declarations().letdeclaration(),
          scope,
          microstatements
        )
      }
    }
    if (statementAst.assignments() != null) {
      Microstatement.fromAssignmentsAst(
        statementAst.assignments(),
        scope,
        microstatements
      )
    }
    if (statementAst.calls() != null) {
      Microstatement.fromCallsAst(
        statementAst.calls(),
        scope,
        microstatements
      )
    }
    if (statementAst.exits() != null) {
      Microstatement.fromExitsAst(
        statementAst.exits(),
        scope,
        microstatements
      )
    }
    if (statementAst.emits() != null) {
      Microstatement.fromEmitsAst(
        statementAst.emits(),
        scope,
        microstatements
      )
    }
    if (statementAst.conditionals() != null) {
      Microstatement.fromConditionalsAst(
        statementAst.conditionals(),
        scope,
        microstatements
      )
    }
    
    return microstatements
  }

  static fromAssignablesAst(assignablesAst, scope, microstatements) {
    if (assignablesAst.basicassignables() != null) {
      Microstatement.fromBasicAssignablesAst(
        assignablesAst.basicassignables(),
        null,
        scope,
        microstatements
      )
    } else {
      Microstatement.fromWithOperatorsAst(
        assignablesAst.withoperators(),
        null,
        scope,
        microstatements
      )
    }
  }

  static fromStatement(statement, microstatements) {
    if (statement.statementOrAssignableAst instanceof LnParser.StatementsContext) {
      Microstatement.fromStatementsAst(
        statement.statementOrAssignableAst,
        statement.scope,
        microstatements
      )
    } else {
      // Otherwise it's a one-liner function
      Microstatement.fromAssignablesAst(
        statement.statementOrAssignableAst,
        statement.scope,
        microstatements
      )
    }
  }
}

module.exports = Microstatement

}).call(this,require('_process'))
},{"../ln":12,"./Box":14,"./Scope":27,"./StatementType":29,"./UserFunction":31,"./opcodes":33,"_process":85,"uuid":87}],25:[function(require,module,exports){
(function (process){
const Ast = require('./Ast')
const Box = require('./Box')
const Event = require('./Event')
const Interface = require('./Interface')
const Operator = require('./Operator')
const Scope = require('./Scope')
const UserFunction = require('./UserFunction')
const Type = require('./Type')

const modules = {}

class Module {
  constructor(rootScope) {
    // Thoughts on how to handle this right now:
    // 1. The outermost module scope is read-only always.
    // 2. Therefore anything in the export scope can simply be duplicated in both scopes
    // 3. Therefore export scope needs access to the module scope so the functions function, but
    //    the module scope can just use its local copy
    this.moduleScope = new Scope(rootScope)
    this.exportScope = new Scope(this.moduleScope)
  }

  static getAllModules() {
    return modules
  }
  
  static populateModule(
    path, // string
    ast, // ModuleContext
    rootScope // Scope
  ) {
    let module = new Module(rootScope)
    // First, populate all of the imports
    const imports = ast.imports()
    for (const importAst of imports) {
      // Figure out which kind of import format we're dealing with
      const standardImport = importAst.standardImport()
      const fromImport = importAst.fromImport()
      // If it's a "standard" import, figure out what name to call it (if the user overrode it)
      // and then attach the entire module with that name to the local scope.
      if (standardImport != null) {
        let importName
        if (standardImport.AS() != null) {
          importName = standardImport.VARNAME().getText()
        } else if (standardImport.dependency().localdependency() != null) {
          let nameParts = standardImport.dependency().localdependency().getText().split("/")
          importName = nameParts[nameParts.length - 1]
        } else if (standardImport.dependency().globaldependency() != null) {
          let nameParts = standardImport.dependency().globaldependency().getText().split("/")
          importName = nameParts[nameParts.length - 1]
        } else {
          // What?
          console.error("This path should be impossible")
          process.exit(-3)
        }
        const importedModule = modules[Ast.resolveDependency(path, standardImport.dependency())]
        module.moduleScope.put(importName, new Box(importedModule.exportScope))
      }
      // If it's a "from" import, we're picking off pieces of the exported scope and inserting them
      // also potentially renaming them if requested by the user
      if (fromImport != null) {
        const importedModule = modules[Ast.resolveDependency(path, fromImport.dependency())]
        const vars = fromImport.varlist().renameablevar()
        for (const moduleVar of vars) {
          let importName
          const exportName = moduleVar.varop(0).getText()
          if (moduleVar.AS() != null) {
            importName = moduleVar.varop(1).getText()
          } else {
            importName = moduleVar.varop(0).getText()
          }
          const thing = importedModule.exportScope.get(exportName)
          module.moduleScope.put(importName, thing)
          // Special behavior for interfaces. If there are any functions or operators that match
          // the interface, pull them in. Similarly any types that match the entire interface. This
          // allows concise importing of a related suite of tools without having to explicitly call
          // out each one.
          if (thing.typeval && thing.typeval.iface) {
            const iface = thing.typeval.iface
            const typesToCheck = Object.keys(importedModule.exportScope.vals)
              .map(n => importedModule.exportScope.vals[n])
              .filter(v => !!v.typeval)
            const fnsToCheck = Object.keys(importedModule.exportScope.vals)
              .map(n => importedModule.exportScope.vals[n])
              .filter(v => !!v.functionval)
            /**
             * Add opsToCheck after the code to declare operators in interfaces is added
            const opsToCheck = Object.keys(importedModule.exportScope)
              .map(n => importedModule.exportScope[n])
              .filter(v => !!v.operatorval)
             */

            typesToCheck
              .filter(t => iface.typeApplies(t.typeval, importedModule.exportScope))
              .forEach(t => {
                module.moduleScope.put(t.typeval.typename, t)
              })

            fnsToCheck
              .filter(fn => {
                // TODO: Make this better and move it to the Interface file in the future
                return iface.functionTypes.some(
                  ft => ft.functionname === fn.functionval[0].getName()
                )
              })
              .forEach(fn => {
                module.moduleScope.put(fn.functionval[0].getName(), fn)
              })
          }
        }
      }
    }
    // Next, types
    const types = ast.types()
    for (const typeAst of types) {
      const newType = Type.fromAst(typeAst, module.moduleScope);
      module.moduleScope.put(newType.typename, new Box(
        newType.alias === null ? newType : newType.alias
      ))
    }
    // Next, interfaces
    const interfaces = ast.interfaces()
    for (const interfaceAst of interfaces) {
      Interface.fromAst(interfaceAst, module.moduleScope);
      // Automatically inserts the interface into the module scope, we're done.
    }
    // Next, constants
    const constdeclarations = ast.constdeclaration()
    for (const constAst of constdeclarations) {
      const newConst = Box.fromConstAst(constAst, module.moduleScope)
      let constName
      if (constAst.VARNAME() != null) {
        constName = constAst.VARNAME().getText()
      } else {
        constName = constAst.assignments().varn().getText()
      }
      module.moduleScope.put(constName, newConst)
    }
    // Next, events
    const events = ast.events()
    for (const eventAst of events) {
      const newEvent = Event.fromAst(eventAst, module.moduleScope)
      module.moduleScope.put(newEvent.name, new Box(newEvent, true))
    }
    // Next, functions
    const functions = ast.functions()
    for (const functionAst of functions) {
      const newFunc = UserFunction.fromAst(functionAst, module.moduleScope)
      if (newFunc.getName() == null) {
        console.error("Module-level functions must have a name")
        process.exit(-19)
      }
      let fns = module.moduleScope.get(newFunc.getName())
      if (fns == null) {
        module.moduleScope.put(newFunc.getName(), new Box([newFunc], true))
      } else {
        fns.functionval.push(newFunc)
      }
    }
    // Next, operators
    const operatorMapping = ast.operatormapping()
    for (const operatorAst of operatorMapping) {
      const isPrefix = operatorAst.infix() == null
      let isCommutative = false
      let isAssociative = false
      if (!isPrefix) {
        isCommutative = operatorAst.infix().COMMUTATIVE() != null
        isAssociative = operatorAst.infix().ASSOCIATIVE() != null
      }
      const name = operatorAst.operators().getText().trim()
      const precedence = parseInt(operatorAst.NUMBERCONSTANT().getText(), 10)
      const fns = module.moduleScope.deepGet(operatorAst.varn())
      if (fns == null) {
        console.error("Operator " + name + " declared for unknown function " + operatorAst.varn().getText())
        process.exit(-31)
      }
      const op = new Operator(
        name,
        precedence,
        isPrefix,
        isCommutative,
        isAssociative,
        fns.functionval,
      )
      const opsBox = module.moduleScope.deepGet(name)
      if (opsBox == null) {
        module.moduleScope.put(name, new Box([op]))
      } else {
        // To make sure we don't accidentally mutate other scopes, we're cloning this operator list
        let ops = [...opsBox.operatorval]
        ops.push(op)
        module.moduleScope.put(name, new Box(ops))
      }
    }
    // Next, exports, which can be most of the above
    const exports = ast.exports()
    for (const exportAst of exports) {
      if (exportAst.varn() != null) {
        const exportVar = module.moduleScope.deepGet(exportAst.varn())
        const splitName = exportAst.varn().getText().split(".")
        module.moduleScope.put(splitName[splitName.length - 1], exportVar)
        module.exportScope.put(splitName[splitName.length - 1], exportVar)
      } else if (exportAst.types() != null) {
        const newType = Type.fromAst(exportAst.types(), module.moduleScope)
        const typeBox = new Box(!newType.alias ? newType : newType.alias)
        module.moduleScope.put(newType.typename, typeBox)
        module.exportScope.put(newType.typename, typeBox)
      } else if (exportAst.interfaces() != null) {
        const interfaceBox = Interface.fromAst(exportAst.interfaces(), module.moduleScope)
        // Automatically inserts the interface into the module scope
        module.exportScope.put(interfaceBox.typeval.typename, interfaceBox)
      } else if (exportAst.constdeclaration() != null) {
        const newConst = Box.fromConstAst(exportAst.constdeclaration(), module.moduleScope)
        let constName
        if (exportAst.constdeclaration().VARNAME() != null) {
          constName = exportAst.constdeclaration().VARNAME().getText()
        } else {
          constName = exportAst.constdeclaration().assignments().varn().getText()
        }
        module.moduleScope.put(constName, newConst)
        module.exportScope.put(constName, newConst)
      } else if (exportAst.functions() != null) {
        const newFunc = UserFunction.fromAst(exportAst.functions(), module.moduleScope)
        if (newFunc.getName() == null) {
          console.error("Module-level functions must have a name")
          process.exit(-19)
        }
        // Exported scope must be checked first because it will fall through to the not-exported
        // scope by default. Should probably create a `getShallow` for this case, but reordering
        // the two if blocks below is enough to fix things here.
        let expFns = module.exportScope.get(newFunc.getName())
        if (expFns == null) {
          module.exportScope.put(newFunc.getName(), new Box([newFunc], true))
        } else {
          expFns.functionval.push(newFunc)
        }
        let modFns = module.moduleScope.get(newFunc.getName())
        if (modFns == null) {
          module.moduleScope.put(newFunc.getName(), new Box([newFunc], true))
        } else {
          modFns.functionval.push(newFunc)
        }
      } else if (exportAst.operatormapping() != null) {
        const operatorAst = exportAst.operatormapping()
        const isPrefix = operatorAst.infix() == null
        let isCommutative = false
        let isAssociative = false
        if (!isPrefix) {
          isCommutative = operatorAst.infix().COMMUTATIVE() != null
          isAssociative = operatorAst.infix().ASSOCIATIVE() != null
        }
        const name = operatorAst.operators().getText().trim();
        const precedence = parseInt(operatorAst.NUMBERCONSTANT().getText(), 10)
        let fns = module.exportScope.deepGet(operatorAst.varn())
        if (fns == null) {
          fns = module.moduleScope.deepGet(operatorAst.varn())
          if (fns != null) {
            console.error(
              "Exported operator " +
              name +
              " wrapping unexported function " +
              operatorAst.varn().getText() +
              " which is not allowed, please export the function, as well."
            )
            process.exit(-32)
          }
          console.error("Operator " + name + " declared for unknown function " + operatorAst.varn().getText())
          process.exit(-33)
        }
        const op = new Operator(
          name,
          precedence,
          isPrefix,
          isCommutative,
          isAssociative,
          fns.functionval,
        )
        let modOpsBox = module.moduleScope.deepGet(name)
        if (modOpsBox == null) {
          module.moduleScope.put(name, new Box([op]))
        } else {
          let ops = [...modOpsBox.operatorval]
          ops.push(op)
          module.moduleScope.put(name, new Box(ops))
        }
        let expOpsBox = module.exportScope.deepGet(name)
        if (expOpsBox == null) {
          module.exportScope.put(name, new Box([op]))
        } else {
          let ops = [...expOpsBox.operatorval]
          ops.push(op)
          module.exportScope.put(name, new Box(ops))
        }
      } else if (exportAst.events() != null) {
        const newEvent = Event.fromAst(exportAst.events(), module.moduleScope)
        module.moduleScope.put(newEvent.name, new Box(newEvent, true))
        module.exportScope.put(newEvent.name, new Box(newEvent, true))
      } else {
        // What?
        console.error("What should be an impossible export state has been reached.")
        process.exit(-8)
      }
    }
    // Finally, event handlers, so they can depend on events that are exported from the same module
    const handlers = ast.handlers()
    for (const handlerAst of handlers) {
      let eventBox = null
      if (handlerAst.eventref().varn() != null) {
        const eventName = handlerAst.eventref().varn().getText()
        eventBox = module.moduleScope.deepGet(handlerAst.eventref().varn())
      } else if (handlerAst.eventref().calls() != null) {
        eventBox = AFunction.callFromAst(handlerAst.eventref().calls(), module.moduleScope)
      }
      if (eventBox == null) {
        console.error("Could not find specified event: " + handlerAst.eventref().getText())
        process.exit(-20)
      }
      if (eventBox.type != Box.builtinTypes["Event"]) {
        console.error(eventBox)
        console.error(handlerAst.eventref().getText() + " is not an event")
        process.exit(-21)
      }
      const evt = eventBox.eventval
      let fn = null
      if (handlerAst.varn() != null) {
        const fnName = handlerAst.varn().getText()
        const fnBox = module.moduleScope.deepGet(handlerAst.varn())
        if (fnBox == null) {
          console.error("Could not find specified function: " + fnName)
          process.exit(-22)
        }
        if (fnBox.type != Box.builtinTypes["function"]) {
          console.error(fnName + " is not a function")
          process.exit(-23)
        }
        const fns = fnBox.functionval
        for (let i = 0; i < fns.length; i++) {
          if (evt.type.typename === "void" && fns[i].getArguments().values().size() === 0) {
            fn = fns[i]
            break
          }
          const argTypes = Object.values(fns[i].getArguments())
          if (argTypes.length !== 1) continue
          if (argTypes[0] == evt.type) {
            fn = fns[i]
            break
          }
        }
        if (fn == null) {
          console.error("Could not find function named " + fnName + " with matching function signature")
          process.exit(-35)
        }
      }
      if (handlerAst.functions() != null) {
        fn = UserFunction.fromAst(handlerAst.functions(), module.moduleScope)
      }
      if (handlerAst.functionbody() != null) {
        fn = UserFunction.fromAst(handlerAst.functionbody(), module.moduleScope)
      }
      if (fn == null) {
        // Shouldn't be possible
        console.error("Impossible state reached processing event handler")
        process.exit(-24)
      }
      if (Object.keys(fn.getArguments()).length > 1 ||
        (evt.type == Box.builtinTypes["void"] && Object.keys(fn.getArguments()).length != 0)
      ) {
        console.error("Function provided for " + handlerAst.eventref().getText() + " has invalid argument signature")
        process.exit(-25)
      }
      evt.handlers.push(fn)
    }
    return module
  }

  static modulesFromAsts(
    astMap, // string to ModuleContext
    rootScope // Scope
  ) {
    let modulePaths = Object.keys(astMap)
    while (modulePaths.length > 0) {
      for (let i = 0; i < modulePaths.length; i++) {
        const path = modulePaths[i]
        const moduleAst = astMap[path]
        const imports = Ast.resolveImports(path, moduleAst)
        let loadable = true
        for (const importPath of imports) {
          if (importPath[0] === '@') continue
          if (modules.hasOwnProperty(importPath)) continue
          loadable = false
        }
        if (!loadable) continue
        modulePaths.splice(i, 1)
        i--
        const module = Module.populateModule(path, moduleAst, rootScope)
        modules[path] = module
      }
    }
    return modules
  }
}

module.exports = Module

}).call(this,require('_process'))
},{"./Ast":13,"./Box":14,"./Event":15,"./Interface":23,"./Operator":26,"./Scope":27,"./Type":30,"./UserFunction":31,"_process":85}],26:[function(require,module,exports){
class Operator {
  constructor(name, precedence, isPrefix, isCommutative, isAssociative, potentialFunctions) {
    this.name = name
    this.precedence = precedence
    this.isPrefix = isPrefix
    this.isCommutative = isCommutative
    this.isAssociative = isAssociative
    this.potentialFunctions = potentialFunctions
  }

  applicableFunction(left, right, scope) {
    let argumentTypeList = []
    if (!this.isPrefix) {
      if (left == null) return null
      argumentTypeList.push(left)
    }
    argumentTypeList.push(right)
    const fns = this.potentialFunctions
    for (let i = 0; i < fns.length; i++) {
      const isNary = fns[i].isNary()
      const args = fns[i].getArguments()
      const argList = Object.values(args)
      if (!isNary && argList.length != argumentTypeList.length) continue
      if (isNary && argList.length > argumentTypeList.length) continue
      let skip = false
      for (let j = 0; j < argList.length; j++) {
        if (argList[j].typename === argumentTypeList[j].typename) continue
        if( 
          argList[j].iface != null &&
          argList[j].iface.typeApplies(argumentTypeList[j], scope)
        ) continue
        if (argList[j].generics.length > 0 && argumentTypeList[j].originalType == argList[j]) {
          continue
        }
        if (
          argList[j].originalType != null &&
          argumentTypeList[j].originalType == argList[j].originalType
        ) {
          for (const propKey of Object.keys(argList[j].properties)) {
            const propVal = argList[j].properties[propKey]
            if (propVal == argumentTypeList[j].properties[propKey]) continue
            if (
              propVal.iface != null &&
              propVal.iface.typeApplies(
                argumentTypeList[j].properties[propKey],
                scope
              )
            ) continue
            skip = true
          }
          continue
        }
        skip = true
      }
      if (skip) continue
      return fns[i]
    }
    return null
  }
}

module.exports = Operator

},{}],27:[function(require,module,exports){
(function (process){
const Box = require('./Box')
const { LnParser, } = require('../ln')

class Scope {
  constructor(par) {
    this.vals = {}
    this.par = par ? par : null
  }

  get(name) {
    if (this.vals.hasOwnProperty(name)) {
      return this.vals[name]
    }
    if (this.par != null) {
      return this.par.get(name)
    }
    return null
  }

  deepGet(fullName) {
    // For circular dependency reasons
    const opcodeScope = require('./opcodes').exportScope
    if (typeof fullName === "string") {
      const fullVar = fullName.trim().split(".")
      let boxedVar
      for (let i = 0; i < fullVar.length; i++) {
        if (i === 0) {
          boxedVar = this.get(fullVar[i])
        } else if (boxedVar === null) {
          return null
        } else {
          if (boxedVar.type === Box.builtinTypes['scope']) {
            boxedVar = boxedVar.scopeval.get(fullVar[i])
          } else if (boxedVar.typevalval !== null) {
            boxedVar = boxedVar.typevalval[fullVar[i]]
          } else {
            return null
          }
        }
      }
      return boxedVar
    } else if (fullName instanceof LnParser.VarnContext) {
      const varAst = fullName
      let boxedVar = null
      for (const varSegment of varAst.varsegment()) {
        if (boxedVar === null) {
          // The first lookup is to grab the root of the specified variable
          boxedVar = this.get(varSegment.getText())
        } else {
          if (varSegment.METHODSEP() != null) continue // Skip these, they're just periods
          if (varSegment.VARNAME() != null) {
            // This path is like the original deepGet
            if (boxedVar.type === Box.builtinTypes["scope"]) {
              boxedVar = boxedVar.scopeval.get(varSegment.getText())
            } else if (boxedVar.typevalval !== null) { // User-defined type instance
              boxedVar = boxedVar.typevalval[varSegment.getText()]
            } else { // This should be a terminal value so an extra "." makes no sense
              return null
            }
          }
          if (varSegment.arrayaccess() != null) {
            // First resolve the value of the array accessor
            const arrayAccessBox = Box.fromAssignableAst(
              varSegment.arrayaccess().assignables(),
              this,
              null,
              true
            )
            if (boxedVar.type.originalType !== null && boxedVar.type.originalType === Box.builtinTypes["Array"]) {
              boxedVar = boxedVar.arrayval.get(arrayAccessBox.int64val)
            } else if (boxedVar.type.originalType != null && boxedVar.type.originalType == Box.builtinTypes["Map"]) {
              boxedVar = boxedVar.mapval.get(arrayAccessBox)
              if (boxedVar == null) {
                boxedVar = opcodeScope.get("_")
              }
            } else {
              if (arrayAccessBox.stringval == null) {
                // This should be prevented at "compile time" in the future
                console.error("Expected string type when accessing a type by array accessor")
                process.exit(-38)
              }
              const arrayAccessStr = arrayAccessBox.stringval;
              if (boxedVar.type == Box.builtinTypes["scope"]) {
                boxedVar = boxedVar.scopeval.get(arrayAccessStr)
              } else if (boxedVar.typevalval !== null) { // User-defined type instance
                boxedVar = boxedVar.typevalval[arrayAccessStr]
              } else { // This should be a terminal value so an extra "." makes no sense
                return null
              }
            }
          }
        }
      }
      return boxedVar
    }
  }

  has(name) {
    if (this.vals.hasOwnProperty(name)) {
      return true
    }
    if (this.par != null) {
      return this.par.has(name)
    }
    return false
  }

  put(name, val) {
    this.vals[name.trim()] = val
  }

  deepPut(fullName, val) {
    const fullVar = fullName.split(".")
    let almostFullVar = fullVar[0];
    for (let i = 1; i < fullVar.length - 1; i++) {
      almostFullVar += "." + fullVar[i];
    }
    let boxedVar = this.deepGet(almostFullVar)
    if (boxedVar !== null) {
      if (boxedVar.typevalval === null) {
        boxedVar = null // Just reset and continue with the for loop
      } else {
        boxedVar.typevalval[fullVar[fullVar.length - 1]] = val
        return
      }
    }
    for (let i = 0; i < fullVar.length; i++) {
      if (boxedVar === null) {
        boxedVar = this.deepGet(fullVar[i])
      } else {
        if (boxedVar.type === Box.builtinTypes["scope"]) {
          boxedVar = boxedVar.scopeval.get(fullVar[i])
        } else if (boxedVar.typevalval !== null) { // User-defined type instance
          boxedVar = boxedVar.typevalval[fullVar[i]]
        } else { // This should be a terminal value so an extra "." makes no sense
          console.error("Attempted to export non-existent value: " + fullName)
          process.exit(-26)
        }
      }
    }
    if (boxedVar.type === Box.builtinTypes["scope"]) {
      boxedVar.scopeval.put(fullVar[fullVar.length - 1], val)
    } else if (boxedVar.typevalval != null) {
      boxedVar.typevalval[fullVar[fullVar.length - 1]] = val
    } else if (boxedVar.type.typename === "void") {
      // We're cool, this is throwing away some value
      return
    } else if (boxedVar.readonly === false && boxedVar.type === val.type) {
      // We're reassigning a variable with the same time
      // TODO: When we add ADTs, need to make the type check more advanced
      // Also TODO: Make the following algorithm less dumb and slow.
      let boxedScope = this
      while (!boxedScope.vals.containsValue(boxedVar)) {
        // We've already proven that we can find this value in the scope hierarchy, so this *will*
        // halt. :)
        boxedScope = boxedScope.par
      }
      // Replace that value with the new one. This *should* work without having to scan the keys
      boxedScope.put(fullVar[fullVar.length - 1], val)
    } else {
      console.error("Attempted to set a value on a non-scope, non-compound-type value")
      process.exit(-27)
    }
  }
}

module.exports = Scope

}).call(this,require('_process'))
},{"../ln":12,"./Box":14,"./opcodes":33,"_process":85}],28:[function(require,module,exports){
(function (process){
const Box = require('./Box')
const { LnParser, } = require('../ln')

// Only implements the pieces necessary for the first stage compiler
class Statement {
  constructor(statementOrAssignableAst, scope, pure) {
    this.statementOrAssignableAst = statementOrAssignableAst,
    this.scope = scope
    this.pure = pure
  }

  static isCallPure(callAst, scope) {
    // TODO: Add purity checking for chained method-style calls
    const functionBox = scope.deepGet(callAst.varn(0))
    if (functionBox == null) {
      // TODO: This function may be defined in the execution scope, we won't know until runtime
      // right now, but it should be determinable at "compile time". Need to fix this to check
      // if prior statements defined it, for now, just assume it exists and is not pure
      return false
    }
    if (functionBox.type !== Box.builtinTypes["function"]) {
      console.error(callAst.varn(0).getText() + " is not a function")
      process.exit(-17)
    }
    // TODO: Add all of the logic to determine which function to use in here, too. For now,
    // let's just assume they all have the same purity state, which is a terrible assumption, but
    // easier.
    if (!functionBox.functionval[0].isPure()) return false
    const assignableListAst = callAst.fncall(0).assignablelist()
    if (assignableListAst == null) { // No arguments to this function call
      return true
    }
    for (const assignable of assignableListAst.assignables()) {
      if (Statement.isAssignablePure(assignable, scope) === false) return false
    }
    return true
  }

  static isWithOperatorsPure(withOperatorsAst, scope) {
    for (const operatorOrAssignable of withOperatorsAst.operatororassignable()) {
      if (operatorOrAssignable.operators() != null) {
        const operator = operatorOrAssignable.operators()
        const op = scope.deepGet(operator.getText())
        if (op == null || op.operatorval == null) {
          console.error("Operator " + operator.getText() + " is not defined")
          process.exit(-33)
        }
        // TODO: Similar to the above, need to figure out logic to determine which particular function
        // will be the one called. For now, just assume the first one and fix this later.
        if (!op.operatorval[0].potentialFunctions[0].isPure()) return false
      }
      if (operatorOrAssignable.basicassignables() != null) {
        if (!Statement.isBasicAssignablePure(operatorOrAssignable.basicassignables(), scope)) {
          return false
        }
      }
    }
    
    return true
  }

  static isBasicAssignablePure(basicAssignable, scope) {
    if (basicAssignable.functions() != null) {
      // Defining a function in itself is a pure situation
      return true
    }
    if (basicAssignable.calls() != null) {
      return Statement.isCallPure(basicAssignable.calls(), scope)
    }
    if (basicAssignable.varn() != null) {
      // This would be a read-only operation to pull a value into local scope
      return true
    }
    if (basicAssignable.constants() != null) {
      // This is an explicit constant that cannot impact any outer scope
      return true
    }
    if (basicAssignable.groups() != null) {
      // This is a "group" (parens surrounding one or more operators and operands)
      return Statement.isWithOperatorsPure(basicAssignable.groups().withoperators(), scope)
    }
    // Shouldn't be reached
    return false
  }

  static isAssignablePure(assignableAst, scope) {
    if (assignableAst.basicassignables() != null) {
      return Statement.isBasicAssignablePure(assignableAst.basicassignables(), scope)
    }
    if (assignableAst.withoperators() != null) {
      return Statement.isWithOperatorsPure(assignableAst.withoperators(), scope)
    }
    // This should never be reached
    console.error("Impossible assignment situation")
    process.exit(-14)
  }

  static create(statementOrAssignableAst, scope) {
    if (statementOrAssignableAst instanceof LnParser.AssignablesContext) {
      const pure = Statement.isAssignablePure(statementOrAssignableAst, scope)
      return new Statement(statementOrAssignableAst, scope, pure)
    } else if (statementOrAssignableAst instanceof LnParser.StatementsContext) {
      const statementAst = statementOrAssignableAst
      let pure = true
      if (statementAst.declarations() != null) {
        if (statementAst.declarations().constdeclaration() != null) {
          pure = Statement.isAssignablePure(
            statementAst.declarations().constdeclaration().assignments().assignables(),
            scope
          )
        } else if (statementAst.declarations().letdeclaration() != null) {
          if (statementAst.declarations().letdeclaration().assignments() != null) {
            if (statementAst.declarations().letdeclaration().assignments().assignables() == null) {
              pure = true
            } else {
              pure = Statement.isAssignablePure(
                statementAst.declarations().letdeclaration().assignments().assignables(),
                scope
              )
            }
          }
        } else {
          console.error("Bad assignment somehow reached")
          process.exit(-18)
        }
      }
      if (statementAst.assignments() != null) {
        if (statementAst.assignments().assignables() != null) {
          pure = Statement.isAssignablePure(statementAst.assignments().assignables(), scope)
        }
      }
      if (statementAst.calls() != null) {
        pure = Statement.isCallPure(statementAst.calls(), scope)
      }
      if (statementAst.exits() != null) {
        if (statementAst.exits().assignables() != null) {
          pure = Statement.isAssignablePure(statementAst.exits().assignables(), scope)
        }
      }
      if (statementAst.emits() != null) {
        if (statementAst.emits().assignables() != null) {
          pure = Statement.isAssignablePure(statementAst.emits().assignables(), scope)
        }
      }
      return new Statement(statementAst, scope, pure)
    } else {
      // What?
      console.error("This should not be possible")
      process.exit(-19)
    }
  }

  toString() {
    return statementOrAssignableAst.getText()
  }
}

module.exports = Statement

}).call(this,require('_process'))
},{"../ln":12,"./Box":14,"_process":85}],29:[function(require,module,exports){
module.exports = {
  CONSTDEC: 'CONSTDEC',
  LETDEC: 'LETDEC',
  ASSIGNMENT: 'ASSIGNMENT',
  CALL: 'CALL',
  EXIT: 'EXIT',
  EMIT: 'EMIT',
  REREF: 'REREF',
  CLOSURE: 'CLOSURE',
  ARG: 'ARG',
}

},{}],30:[function(require,module,exports){
(function (process){
class Type {
  constructor(...args) {
    // Circular dependency 'fix'
    const Interface = require('./Interface')
    // Simulate multiple dispatch by duck typing the args
    if (args.length === 1) {
      this.typename = args[0]
      this.builtIn = false
      this.isGenericStandin = false
      this.properties = {}
      this.generics = {}
      this.originalType = null
      this.unionTypes = null
      this.iface = null
    } else if (args.length === 2) {
      this.typename = args[0]
      this.builtIn = args[1]
      this.isGenericStandin = false
      this.properties = {}
      this.generics = {}
      this.originalType = null
      this.unionTypes = null
      this.iface = null
    } else if (args.length === 3) {
      if (typeof args[2] === "boolean") {
        this.typename = args[0]
        this.builtIn = args[1]
        this.isGenericStandin = args[2]
        this.properties = {}
        this.generics = {}
        this.originalType = null
        this.unionTypes = null
        this.iface = null
      } else if (args[2] instanceof Interface) {
        this.typename = args[0]
        this.builtIn = args[1]
        this.isGenericStandin = false
        this.properties = {}
        this.generics = {}
        this.originalType = null
        this.unionTypes = null
        this.iface = args[2]
      } else if (args[2] instanceof Array) {
        this.typename = args[0]
        this.builtIn = args[1]
        this.isGenericStandin = false
        this.properties = {}
        this.generics = {}
        this.originalType = null
        this.unionTypes = args[2]
        this.iface = null
      } else if (args[2] instanceof Object) {
        this.typename = args[0]
        this.builtIn = args[1]
        this.isGenericStandin = false
        this.properties = args[2]
        this.generics = {}
        this.originalType = null
        this.unionTypes = null
        this.iface = null
      }
    } else if (args.length === 4) {
      this.typename = args[0]
      this.builtIn = args[1]
      this.isGenericStandin = false
      this.properties = args[2]
      this.generics = args[3]
      this.originalType = null
      this.unionTypes = null
      this.iface = null
    }
  }

  toString() {
    // TODO: Handle interfaces union types appropriately
    if (this.iface != null) return "// Interfaces TBD"
    if (this.unionTypes != null) return "// Union types TBD"
    let outString = "type " + typename
    if (this.alias != null) {
      outString += " = " + this.alias.typename
      return outString
    }
    if (this.generics.length > 0) {
      outString += "<" + Object.keys(this.generics).join(", ") + ">"
    }
    outString += "{\n"
    for (const propName of Object.keys(this.properties)) {
      outString += "  " + propName + ": " + this.properties[propName].typename + "\n"
    }
    outString += "}\n"
    return outString
  }

  static fromAst(typeAst, scope) {
    let type = new Type(typeAst.typename().getText())
    if (typeAst.typegenerics() != null) {
      const generics = typeAst.typegenerics().fulltypename()
      for (let i = 0; i < generics.length; i++) {
        type.generics[generics[i].getText()] = i
      }
    }
    if (typeAst.typebody() != null) {
      const lines = typeAst.typebody().typeline()
      for (const lineAst of lines) {
        const propertyName = lineAst.VARNAME().getText()
        let propertyType = null
        const typeName = lineAst.varn().getText()
        const property = scope.deepGet(lineAst.varn())
        if (property == null || !property.type.typename === "type") {
          if (type.generics.hasOwnProperty(typeName)) {
            type.properties[propertyName] = new Type(typeName, true, true)
          } else {
            console.error(lineAst.varn().getText() + " is not a type")
            process.exit(-4)
          }
        } else {
          type.properties[propertyName] = property.typeval
        }
      }
    }
    if (typeAst.othertype() != null && typeAst.othertype().length == 1) {
      const otherTypebox = scope.deepGet(typeAst.othertype(0).typename().getText())

      if (otherTypebox == null) {
        console.error("Type " + typeAst.othertype(0).getText() + " not defined")
        process.exit(-38)
      }
      if (otherTypebox.typeval == null) {
        console.error(typeAst.othertype(0).getText() + " is not a valid type")
        process.exit(-39)
      }

      const othertype = otherTypebox.typeval
      if (othertype.generics.length > 0 && typeAst.othertype(0).typegenerics() != null) {
        let solidTypes = []
        for (fulltypenameAst of typeAst.othertype(0).typegenerics().fulltypename()) {
          solidTypes.push(fulltypenameAst.getText())
        }
        othertype = othertype.solidify(solidTypes, scope)
      }

      // For simplification of the type aliasing functionality, the other type is attached as
      // an alias. The module construction will, if present, perfer the alias over the actual
      // type, to make sure built-in types that are aliased continue to work. This means that
      // `type varA == type varB` will work if `varA` is assigned to an alias and `varB` to the
      // orignal type. I can see the argument either way on this, but the simplicity of this
      // approach is why I will go with this for now.
      type.alias = othertype
    } else if (typeAst.othertype() != null) { // It's a union type
      const othertypes = typeAst.othertype()
      let unionTypes = []
      for (const othertype of othertypes) {
        const othertypeBox = scope.deepGet(othertype.typename().getText())

        if (othertypeBox == null) {
          console.error("Type " + othertype.getText() + " not defined")
          process.exit(-48)
        }
        if (othertypeBox.typeval == null) {
          console.error(othertype.getText() + " is not a valid type")
          process.exit(-49)
        }

        let othertypeVal = othertypeBox.typeval
        if (othertypeVal.generics.length > 0 && othertype.typegenerics() != null) {
          let solidTypes = []
          for (fulltypenameAst of othertype.typegenerics().fulltypename()) {
            solidTypes.push(fulltypenameAst.getText())
          }
          othertypeVal = othertypeVal.solidify(solidTypes, scope)
        }
        unionTypes.push(othertypeVal)
      }
      type.unionTypes = unionTypes
    }
    return type
  }

  solidify(genericReplacements, scope) {
    const Box = require('./Box') // To solve circular dependency issues
    let replacementTypes = []
    for (const typename of genericReplacements) {
      const typebox = scope.deepGet(typename)
      if (typebox == null || typebox.type.typename !== "type") {
        console.error(typename + " type not found")
        process.exit(-35)
      }
      replacementTypes.push(typebox.typeval)
    }
    const solidifiedName = this.typename + "<" + genericReplacements.join(", ") + ">"
    let solidified = new Type(solidifiedName, this.builtIn)
    solidified.originalType = this
    for (const propKey of Object.keys(this.properties)) {
      const propValue = this.properties[propKey]
      if (propValue.isGenericStandin) {
        const genericLoc = this.generics[propValue.typename]
        if (genericLoc == null) {
          console.error("Generic property not described but not found. Should be impossible")
          process.exit(-36)
        }
        const replacementType = replacementTypes[genericLoc]
        solidified.properties[propKey] = replacementType
      } else {
        solidified.properties[propKey] = propValue
      }
    }
    scope.put(solidifiedName, new Box(solidified))
    return solidified
  }

  // This is only necessary for the numeric types. TODO: Can we eliminate it?
  castable(otherType) {
    const intTypes = ["int8", "int16", "int32", "int64"]
    const floatTypes = ["float32", "float64"]
    if (intTypes.includes(this.typename) && intTypes.includes(otherType.typename)) return true
    if (floatTypes.includes(this.typename) && floatTypes.includes(otherType.typename)) return true
    if (floatTypes.includes(this.typename) && intTypes.includes(otherType.typename)) return true
    return false
  }
}

module.exports = Type

}).call(this,require('_process'))
},{"./Box":14,"./Interface":23,"_process":85}],31:[function(require,module,exports){
(function (process){
const Box = require('./Box')
const Statement = require('./Statement')
const StatementType = require('./StatementType')
const { LnParser, } = require('../ln')

// This only implements the parts required for the compiler
class UserFunction {
  constructor(name, args, returnType, closureScope, statements, pure) {
    this.name = name
    this.args = args
    this.returnType = returnType
    this.closureScope = closureScope
    this.statements = statements
    this.pure = pure
  }

  static fromAst(functionishAst, closureScope) {
    if (functionishAst instanceof LnParser.BlocklikesContext) {
      if (functionishAst.functions() != null) {
        return UserFunction.fromFunctionsAst(functionishAst.functions(), closureScope)
      }
      if (functionishAst.functionbody() != null) {
        return UserFunction.fromFunctionbodyAst(functionishAst.functionbody(), closureScope)
      }
    }
    if (functionishAst instanceof LnParser.FunctionsContext) {
      return UserFunction.fromFunctionsAst(functionishAst, closureScope)
    }
    if (functionishAst instanceof LnParser.FunctionbodyContext) {
      return UserFunction.fromFunctionbodyAst(functionishAst, closureScope)
    }
    return null
  }

  static fromFunctionbodyAst(functionbodyAst, closureScope) {
    let args = {}
    const returnType = Box.builtinTypes.void
    let pure = true // Assume purity and then downgrade if needed
    let statements = []
    const statementsAst = functionbodyAst.statements()
    for (const statementAst of statementsAst) {
      const statement = Statement.create(statementAst, closureScope)
      if (!statement.pure) pure = false
      statements.push(statement)
    }
    return new UserFunction(null, args, returnType, closureScope, statements, pure)
  }

  static fromFunctionsAst(functionAst, closureScope) {
    const name = functionAst.VARNAME() == null ? null : functionAst.VARNAME().getText()
    let args = {}
    const argsAst = functionAst.arglist()
    if (argsAst !== null) {
      const arglen = argsAst.VARNAME().length
      for (let i = 0; i < arglen; i++) {
        const argName = argsAst.VARNAME(i).getText()
        let getArgType = closureScope.deepGet(argsAst.argtype(i).getText())
        if (getArgType === null) {
          if (argsAst.argtype(i).othertype().length === 1) {
            if (argsAst.argtype(i).othertype(0).typegenerics() !== null) {
              getArgType = closureScope.deepGet(argsAst.argtype(i).othertype(0).typename().getText())
              if (getArgType == null) {
                console.error("Could not find type " + argsAst.argtype(i).getText() + " for argument " + argName)
                process.exit(-39)
              }
              if (getArgType.type !== Box.builtinTypes["type"]) {
                console.error("Function argument is not a valid type: " + argsAst.argtype(i).getText())
                process.exit(-50);
              }
              let genericTypes = []
              for (const fulltypename of argsAst.argtype(i).othertype(0).typegenerics().fulltypename()) {
                genericTypes.push(fulltypename.getText())
              }
              getArgType = new Box(getArgType.typeval.solidify(genericTypes, closureScope))
            } else {
              console.error("Could not find type " + argsAst.argtype(i).getText() + " for argument " + argName)
              process.exit(-51)
            }
          } else { // It's an inline-declared union type
            const othertypes = argsAst.argtype(i).othertype()
            let unionTypes = []
            for (const othertype of othertypes) {
              let othertypeBox = closureScope.deepGet(othertype.getText())
              if (othertypeBox == null) {
                if (othertype.typegenerics() != null) {
                  othertypeBox = closureScope.deepGet(othertype.typename().getText())
                  if (othertypeBox == null) {
                    console.error("Could not find type " + othertype.getText() + " for argument " + argName)
                    process.exit(-59)
                  }
                  if (othertypeBox.type != Box.builtinTypes["type"]) {
                    console.error("Function argument is not a valid type: " + othertype.getText())
                    process.exit(-60)
                  }
                  let genericTypes = []
                  for (const fulltypename of othertype.typegenerics().fulltypename()) {
                    genericTypes.push(fulltypename.getText())
                  }
                  othertypeBox = new Box(othertypeBox.typeval.solidify(genericTypes, closureScope))
                } else {
                  console.error("Could not find type " + othertype.getText() + " for argument " + argName)
                  process.exit(-51)
                }
              }
              unionTypes.push(othertypeBox.typeval)
            }
            const union = new Type(argsAst.argtype(i).getText(), false, unionTypes)
            getArgType = new Box(union)
          }
        }
        if (getArgType.type != Box.builtinTypes["type"]) {
          console.error("Function argument is not a valid type: " + argsAst.argtype(i).getText())
          process.exit(-13)
        }
        args[argName] = getArgType.typeval
      }
    }
    let returnType = null
    if (functionAst.argtype() !== null) {
      if (functionAst.argtype().othertype().length === 1) {
        let getReturnType = closureScope.deepGet(functionAst.argtype().getText())
        if (getReturnType == null || getReturnType.type != Box.builtinTypes["type"]) {
          if (functionAst.argtype().othertype(0).typegenerics() != null) {
            getReturnType = closureScope.deepGet(functionAst.argtype().othertype(0).typename().getText())
            if (getReturnType == null) {
              console.error("Could not find type " + functionAst.argtype().getText() + " for function " + functionAst.VARNAME().getText())
              process.exit(-59)
            }
            if (getReturnType.type !== Box.builtinTypes["type"]) {
              console.error("Function return is not a valid type: " + functionAst.argtype().getText())
              process.exit(-60)
            }
            let genericTypes = []
            for (const fulltypename of functionAst.argType().othertype(0).typegenerics().fulltypename()) {
              genericTypes.push(fulltypename.getText())
            }
            getReturnType = new Box(getReturnType.typeval.solidify(genericTypes, closureScope))
          } else {
            console.error("Could not find type " + functionAst.argtype().getText() + " for function " + functionAst.VARNAME().getText())
            process.exit(-61)
          }
        }
        returnType = getReturnType.typeval
      } else {
        const othertypes = functionAst.argtype().othertype()
        let unionTypes = []
        for (const othertype of othertypes) {
          let othertypeBox = closureScope.deepGet(othertype.getText())
          if (othertypeBox === null) {
            if (othertype.typegenerics() !== null) {
              othertypeBox = closureScope.deepGet(othertype.typename().getText())
              if (othertypeBox === null) {
                console.error("Could not find return type " + othertype.getText() + " for function " + functionAst.VARNAME().getText())
                process.exit(-59)
              }
              if (othertypeBox.type !== Box.builtinTypes["type"]) {
                console.error("Function argument is not a valid type: " + othertype.getText())
                process.exit(-60)
              }
              let genericTypes = []
              for (const fulltypename of othertype.typegenerics().fulltypename()) {
                genericTypes.push(fulltypename.getText())
              }
              othertypeBox = new Box(othertypeBox.typeval.solidify(genericTypes, closureScope))
            } else {
              console.error("Could not find return type " + othertype.getText() + " for function " + functionAst.VARNAME().getText())
              process.exit(-51)
            }
          }
          unionTypes.push(othertypeBox.typeval)
        }
        returnType = new Type(functionAst.argtype().getText(), false, unionTypes)
      }
    } else {
      // TODO: Infer the return type by finding the return value and tracing backwards
      returnType = Box.builtinTypes["void"]
    }
    let pure = true
    let statements = []
    const functionbody = functionAst.fullfunctionbody().functionbody()
    if (functionbody !== null) {
      const statementsAst = functionbody.statements()
      for (const statementAst of statementsAst) {
        let statement = Statement.create(statementAst, closureScope)
        if (!statement.pure) pure = false
        statements.push(statement)
      }
    } else {
      const assignablesAst = functionAst.fullfunctionbody().assignables()
      let statement = Statement.create(assignablesAst, closureScope)
      if (!statement.pure) pure = false
      statements.push(statement)
      // TODO: Infer the return type for anything other than calls of other functions
      if (assignablesAst.basicassignables() && assignablesAst.basicassignables().calls()) {
        const fnCall = closureScope.deepGet(assignablesAst.basicassignables().calls().varn(0))
        if (fnCall && fnCall.functionval) {
          // TODO: For now, also take the first matching function name, in the future
          // figure out the argument types provided recursively to select appropriately
          // similar to how the Microstatements piece works
          returnType = fnCall.functionval[0].getReturnType()
        }
      }
    }
    return new UserFunction(name, args, returnType, closureScope, statements, pure)
  }

  getName() {
    return this.name
  }
  getArguments() {
    return this.args
  }
  getReturnType() {
    return this.returnType
  }
  isNary() {
    return false // TODO: support `...rest` in the future
  }
  isPure() {
    return this.pure
  }

  microstatementInlining(realArgNames, scope, microstatements) {
    // Resolve circular dependency issue
    const Microstatement = require('./Microstatement')
    const internalNames = Object.keys(this.args)
    for (let i = 0; i < internalNames.length; i++) {
      const realArgName = realArgNames[i]
      // Instead of copying the relevant data, define a reference to where the data is located with
      // an alias for the function's expected variable name so statements referencing the argument
      // can be rewritten to use the new variable name.
      microstatements.push(new Microstatement(
        StatementType.REREF,
        scope,
        true,
        realArgName,
        internalNames[i],
        this.args[internalNames[i]],
        [],
        [],
      ))
    }
    for (const s of this.statements) {
      Microstatement.fromStatement(s, microstatements)
    }
  }

  static dispatchFn(fns, argumentTypeList, scope) {
    let fn = null;
    for (let i = 0; i < fns.length; i++) {
      const isNary = fns[i].isNary()
      const args = fns[i].getArguments()
      const argList = Object.values(args)
      if (!isNary && argList.length != argumentTypeList.length) continue
      if (isNary && argList.length > argumentTypeList.length) continue
      let skip = false
      for (let j = 0; j < argList.length; j++) {
        if (argList[j].typename === argumentTypeList[j].typename) continue
        if ( 
          argList[j].iface != null &&
          argList[j].iface.typeApplies(argumentTypeList[j], scope)
        ) continue
        if (argList[j].generics.length > 0 && argumentTypeList[j].originalType == argList[j]) {
          continue
        }
        if (
          argList[j].originalType != null &&
          argumentTypeList[j].originalType == argList[j].originalType
        ) {
          for (const propKey in argList[j].properties) {
            const propVal = argList[j].properties[propKey]
            if (
              propVal ==
              argumentTypeList[j].properties[propKey]
            ) continue
            if (
              propVal.iface != null &&
              propValiface.typeApplies(
                argumentTypeList[j].properties[propKey],
                scope
              )
            ) continue
            skip = true
          }
          continue
        }
        if (argList[j].unionTypes != null) {
          let unionSkip = true
          for (const unionType of argList[j].unionTypes) {
            // TODO: support other union types
            if (unionType.typename === argumentTypeList[j].typename) {
              unionSkip = false
              break
            }
          }
          if (!unionSkip) continue
        }
        skip = true
      }
      if (skip) continue
      fn = fns[i]
    }
    if (fn == null) {
      console.error("Unable to find matching function for name and argument type set")
      let argTypes = []
      for (let i = 0; i < argumentTypeList.length; i++) {
        argTypes.push("<" + argumentTypeList[i].typename + ">")
      }
      console.error(fns[0].getName() + "(" + argTypes.join(", ") + ")")
      process.exit(-40)
    }
    return fn
  }
}

module.exports = UserFunction

}).call(this,require('_process'))
},{"../ln":12,"./Box":14,"./Microstatement":24,"./Statement":28,"./StatementType":29,"_process":85}],32:[function(require,module,exports){
const fs = require('fs')
const path = require('path')

const { v4: uuid, } = require('uuid')

const opcodes = require('./opcodes')
const Ast = require('./Ast')
const Std = require('./Std')
const Module = require('./Module')
const Event = require('./Event')
const UserFunction = require('./UserFunction')
const Microstatement = require('./Microstatement')
const StatementType = require('./StatementType')

const hoistConst = (microstatements, constantDedupeLookup, constants) => {
  let i = 0
  while (i < microstatements.length) {
    const m = microstatements[i]
    if (
      m.statementType === StatementType.CONSTDEC &&
      m.fns.length === 0
    ) {
      const original = constantDedupeLookup[m.inputNames[0]]
      if (!original) {
        constants.add(m)
        if (!m.outputType.builtIn) {
          eventTypes.add(m.outputType)
        }
        microstatements.splice(i, 1)
        constantDedupeLookup[m.inputNames[0]] = m
      } else {
        // Rewrite with the replaced name
        for(let j = i + 1; j < microstatements.length; j++) {
          const n = microstatements[j]
          for (let k = 0; k < n.inputNames.length; k++) {
            if (n.inputNames[k] === m.outputName) {
              n.inputNames[k] = original.outputName
            }
          }
        }
        microstatements.splice(i, 1);
      }
    } else if (m.statementType === StatementType.CLOSURE) {
      hoistConst(m.closureStatements, constantDedupeLookup, constants)
      i++
    } else {
      i++
    }
  }
}

const moduleAstsFromFile = (filename) => {
  let moduleAsts = {}
  let paths = []
  const rootPath = fs.realpathSync(filename)
  paths.push(rootPath)
  while (paths.length > 0) {
    const modulePath = paths.shift()
    let module = null
    try {
      module = Ast.fromFile(modulePath)
    } catch (e) {
      console.error("Could not load " + modulePath)
      console.error(e)
      throw e
    }
    moduleAsts[modulePath] = module
    const imports = Ast.resolveImports(modulePath, module)
    for (let i = 0; i < imports.length; i++) {
      if (!moduleAsts[imports[i]] && !(imports[i].substring(0, 5) === "@std/")) {
        paths.push(imports[i])
      }
    }
  }
  return moduleAsts
}

const moduleAstsFromString = (str) => {
  let moduleAsts = {}
  const fakeRoot = '/fake/root/test.ln'
  let module = null
  try {
    module = Ast.fromString(str)
  } catch (e) {
    console.error("Could not load test.ln")
    console.error(e)
    throw e
  }
  moduleAsts[fakeRoot] = module
  const imports = Ast.resolveImports(fakeRoot, module)
  for (let i = 0; i < imports.length; i++) {
    if (moduleAsts[imports[i]] === null && !(imports[i].substring(0, 5) === "@std/")) {
      console.error('Only @std imports allowed in the playground')
      throw new Error('Import declaration error')
    }
  }
  return moduleAsts
}

const ammFromModuleAsts = (moduleAsts) => {
  // Load the standard library
  Std.loadStdModules(Module.getAllModules())
  const rootScope = Module.getAllModules()['<root>'].exportScope
  // Load all modules
  const modules = Module.modulesFromAsts(moduleAsts, rootScope)

  // This implicitly populates the `allEvents` static property on the `Event` type, which we can
  // use to serialize out the definitions, skipping the built-in events. In the process we're need
  // to check a hashset for duplicate event names and rename as necessary. We also need to get the
  // list of user-defined types that we need to emit.
  let eventNames = new Set()
  let eventTypeNames = new Set()
  let eventTypes = new Set()
  for (const evt of Event.allEvents) {
    // Skip built-in events
    if (evt.builtIn) continue
    // Check if there's a collision
    if (eventNames.has(evt.name)) {
      // We modify the event name by attaching a UUIDv4 to it
      evt.name = evt.name + "_" + uuid().replace(/-/g, "_")
    }
    // Add the event to the list
    eventNames.add(evt.name)
    // Now on to event type processing
    const type = evt.type
    // Skip built-in types, too
    if (type.builtIn) continue
    // Check if there's a collision
    if (eventTypeNames.has(type.typename)) {
      // An event type may be seen multiple times, make sure this is an actual collision
      if (eventTypes.has(type)) continue // This event was already processed, so we're done
      // Modify the type name by attaching a UUIDv4 to it
      type.typename = type.typename + "_" + uuid().replace(/-/g, "_")
    }
    // Add the type to the list
    eventTypeNames.add(type.typename)
    eventTypes.add(type)
    // Determine if the event type is a union type, if so do the same checks for each subtype
    for (const unionType of type.unionTypes) {
      // Skip built-in types, too
      if (unionType.builtIn) continue
      // Check if there's a collision
      if (eventTypeNames.has(unionType.typename)) {
        // A type may be seen multiple times, make sure this is an actual collision
        if (eventTypes.has(unionType)) continue // This event was already processed, so we're done
        // Modify the type name by attaching a UUIDv4 to it
        unionType.typename = unionType.typename + "_" + uuid().replace(/-/g, "_")
      }
      // Add the type to the list
      eventTypeNames.add(unionType.typename)
      eventTypes.add(unionType)
    } // TODO: DRY this all up
    // Determine if any of the properties of the type should be added to the list
    for (const propType of Object.values(type.properties)) {
      // Skip built-in types, too
      if (propType.builtIn) continue
      // Check if there's a collision
      if (eventTypeNames.has(propType.typename)) {
        // A type may be seen multiple times, make sure this is an actual collision
        if (eventTypes.has(propType)) continue // This event was already processed, so we're done
        // Modify the type name by attaching a UUIDv4 to it
        propType.typename = propType.typename + "_" + uuid().replace(/-/g, "_")
      }
      // Add the type to the list
      eventTypeNames.add(propType.typename)
      eventTypes.add(propType)
    }
  }
  // Extract the handler definitions and constant data
  let handlers = {} // String to array of Microstatement objects
  let constantDedupeLookup = {} // String to Microstatement object
  let constants = new Set() // Microstatment objects
  for (let evt of Event.allEvents) {
    for (let handler of evt.handlers) {
      if (handler instanceof UserFunction) {
        // Define the handler preamble
        let handlerDec = "on " + evt.name + " fn ("
        let argList = []
        let microstatements = []
        for (const arg of Object.keys(handler.getArguments())) {
          argList.push(arg + ": " + handler.getArguments()[arg].typename)
          microstatements.push(new Microstatement(
            StatementType.ARG,
            handler.closureScope,
            true,
            arg,
            handler.getArguments()[arg],
            [],
            [],
          ))
        }
        handlerDec += argList.join(", ")
        handlerDec += "): " + handler.getReturnType().typename + " {"
        // Extract the handler statements and compile into microstatements
        const statements = handler.statements;
        for (const s of statements) {
          Microstatement.fromStatement(s, microstatements)
        }
        // Pull the constants out of the microstatements into the constants set.
        hoistConst(microstatements, constantDedupeLookup, constants)
        // Register the handler and remaining statements
        handlers[handlerDec] = microstatements
      }
    }
  }
  let outStr = ""
  // Print the event types
  for (const eventType of eventTypes) {
    outStr += eventType.toString() + "\n"
  }
  // Print the constants
  for (const constant of constants) {
    outStr += constant.toString() + "\n"
  }
  // Print the user-defined event declarations
  for (const evt of Event.allEvents) {
    if (evt.builtIn) continue // Skip built-in events
    if (evt.handlers.length == 0) continue // Skip events that are never handled
    outStr += evt.toString() + "\n"
  }
  // Print the user-defined event handlers
  for (const handlerDec of Object.keys(handlers)) {
    outStr += handlerDec + "\n"
    const microstatements = handlers[handlerDec]
    for (const m of microstatements) {
      const mString = m.toString()
      if (mString === "") continue
      outStr += "  " + mString + "\n"
    }
    outStr += "}\n"
  }
  return outStr
}

module.exports = (filename) => ammFromModuleAsts(moduleAstsFromFile(filename))
module.exports.lnTextToAmm = (str) => ammFromModuleAsts(moduleAstsFromString(str))

},{"./Ast":13,"./Event":15,"./Microstatement":24,"./Module":25,"./StatementType":29,"./Std":7,"./UserFunction":31,"./opcodes":33,"fs":82,"path":84,"uuid":87}],33:[function(require,module,exports){
const { v4: uuid, } = require('uuid')

const Box = require('./Box') // TODO: Eliminate Box
const Module = require('./Module')
const Event = require('./Event')
const Interface = require('./Interface')
const Scope = require('./Scope')
const Type = require('./Type')
const Microstatement = require('./Microstatement')
const StatementType = require('./StatementType')

const opcodeScope = new Scope()
const opcodeModule = new Module(opcodeScope)

// Base types
const t = (str) => Box.builtinTypes[str]
const addBuiltIn = (name) => { opcodeScope.put(name, new Box(t(name))) }
([
  'void', 'int8', 'int16', 'int32', 'int64', 'float32', 'float64', 'bool', 'string', 'function',
  'operator', 'Error', 'Array', 'Map', 'KeyVal',
].map(addBuiltIn))
Box.builtinTypes['Array'].solidify(['string'], opcodeScope)
Box.builtinTypes['Map'].solidify(['string', 'string'], opcodeScope)
opcodeScope.put('any', new Box(new Type('any', true, new Interface('any'))))
Box.builtinTypes['Array'].solidify(['any'], opcodeScope)
Box.builtinTypes['Map'].solidify(['any', 'any'], opcodeScope)
Box.builtinTypes['KeyVal'].solidify(['any', 'any'], opcodeScope)
opcodeScope.put("start", new Box(new Event("_start", Box.builtinTypes.void, true), true))

// opcode declarations
const addopcodes = (opcodes) => {
  const opcodeNames = Object.keys(opcodes)
  opcodeNames.forEach((opcodeName) => {
    const opcodeDef = opcodes[opcodeName]
    const [args, returnType] = opcodeDef
    const opcodeObj = {
      getName: () => opcodeName,
      getArguments: () => args,
      getReturnType: () => returnType,
      isNary: () => false,
      isPure: () => true,
      microstatementInlining: (realArgNames, scope, microstatements) => {
        microstatements.push(new Microstatement(
          StatementType.CONSTDEC,
          scope,
          true,
          "_" + uuid().replace(/-/g, "_"),
          opcodeObj.getReturnType(),
          realArgNames,
          [opcodeObj],
        ))
      },
    }
    // Add each opcode
    opcodeScope.put(opcodeName, new Box([opcodeObj], true))
  })
}

addopcodes({
  i8f64: [{ number: t('int8'), }, t('float64')],
  i16f64: [{ number: t('int16'), }, t('float64')],
  i32f64: [{ number: t('int32'), }, t('float64')],
  i64f64: [{ number: t('int64'), }, t('float64')],
  f32f64: [{ number: t('float32'), }, t('float64')],
  strf64: [{ str: t('string'), }, t('float64')],
  boolf64: [{ boo: t('bool'), }, t('float64')],
  i8f32: [{ number: t('int8'), }, t('float32')],
  i16f32: [{ number: t('int16'), }, t('float32')],
  i32f32: [{ number: t('int32'), }, t('float32')],
  i64f32: [{ number: t('int64'), }, t('float32')],
  f64f32: [{ number: t('float64'), }, t('float32')],
  strf32: [{ str: t('string'), }, t('float32')],
  boolf32: [{ boo: t('bool'), }, t('float32')],
  i8i64: [{ number: t('int8'), }, t('int64')],
  i16i64: [{ number: t('int16'), }, t('int64')],
  i32i64: [{ number: t('int32'), }, t('int64')],
  f32i64: [{ number: t('float32'), }, t('int64')],
  f64i64: [{ number: t('float64'), }, t('int64')],
  stri64: [{ str: t('string'), }, t('int64')],
  booli64: [{ boo: t('bool'), }, t('int64')],
  i8i32: [{ number: t('int8'), }, t('int32')],
  i16i32: [{ number: t('int16'), }, t('int32')],
  i64i32: [{ number: t('int64'), }, t('int32')],
  f32i32: [{ number: t('float32'), }, t('int32')],
  f64i32: [{ number: t('float64'), }, t('int32')],
  stri32: [{ str: t('string'), }, t('int32')],
  booli32: [{ boo: t('bool'), }, t('int32')],
  i8i16: [{ number: t('int8'), }, t('int16')],
  i32i16: [{ number: t('int32'), }, t('int16')],
  i64i16: [{ number: t('int64'), }, t('int16')],
  f32i16: [{ number: t('float32'), }, t('int16')],
  f64i16: [{ number: t('float64'), }, t('int16')],
  stri16: [{ str: t('string'), }, t('int16')],
  booli16: [{ boo: t('bool'), }, t('int16')],
  i16i8: [{ number: t('int16'), }, t('int8')],
  i32i8: [{ number: t('int32'), }, t('int8')],
  i64i8: [{ number: t('int64'), }, t('int8')],
  f32i8: [{ number: t('float32'), }, t('int8')],
  f64i8: [{ number: t('float64'), }, t('int8')],
  stri8: [{ str: t('string'), }, t('int8')],
  booli8: [{ boo: t('bool'), }, t('int8')],
  i8bool: [{ number: t('int8'), }, t('bool')],
  i16bool: [{ number: t('int16'), }, t('bool')],
  i32bool: [{ number: t('int32'), }, t('bool')],
  i64bool: [{ number: t('int64'), }, t('bool')],
  f32bool: [{ number: t('float32'), }, t('bool')],
  f64bool: [{ number: t('float64'), }, t('bool')],
  strbool: [{ str: t('string'), }, t('bool')],
  i8str: [{ number: t('int8'), }, t('string')],
  i16str: [{ number: t('int16'), }, t('string')],
  i32str: [{ number: t('int32'), }, t('string')],
  i64str: [{ number: t('int64'), }, t('string')],
  f32str: [{ number: t('float32'), }, t('string')],
  f64str: [{ number: t('float64'), }, t('string')],
  boolstr: [{ boo: t('bool'), }, t('string')],
  addi8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  addi16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  addi32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  addi64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  addf32: [{ a: t('float32'), b: t('float32'), }, t('float32')],
  addf64: [{ a: t('float64'), b: t('float64'), }, t('float64')],
  subi8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  subi16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  subi32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  subi64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  subf32: [{ a: t('float32'), b: t('float32'), }, t('float32')],
  subf64: [{ a: t('float64'), b: t('float64'), }, t('float64')],
  negi8: [{ a: t('int8'), }, t('int8')],
  negi16: [{ a: t('int16'), }, t('int16')],
  negi32: [{ a: t('int32'), }, t('int32')],
  negi64: [{ a: t('int64'), }, t('int64')],
  negf32: [{ a: t('float32'), }, t('float32')],
  negf64: [{ a: t('float64'), }, t('float64')],
  absi8: [{ a: t('int8'), }, t('int8')],
  absi16: [{ a: t('int16'), }, t('int16')],
  absi32: [{ a: t('int32'), }, t('int32')],
  absi64: [{ a: t('int64'), }, t('int64')],
  absf32: [{ a: t('float32'), }, t('float32')],
  absf64: [{ a: t('float64'), }, t('float64')],
  muli8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  muli16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  muli32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  muli64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  mulf32: [{ a: t('float32'), b: t('float32'), }, t('float32')],
  mulf64: [{ a: t('float64'), b: t('float64'), }, t('float64')],
  divi8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  divi16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  divi32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  divi64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  divf32: [{ a: t('float32'), b: t('float32'), }, t('float32')],
  divf64: [{ a: t('float64'), b: t('float64'), }, t('float64')],
  modi8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  modi16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  modi32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  modi64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  powi8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  powi16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  powi32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  powi64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  powf32: [{ a: t('float32'), b: t('float32'), }, t('float32')],
  powf64: [{ a: t('float64'), b: t('float64'), }, t('float64')],
  sqrtf32: [{ a: t('float32'), }, t('float32')],
  sqrtf64: [{ a: t('float64'), }, t('float64')],
  andi8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  andi16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  andi32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  andi64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  andbool: [{ a: t('bool'), b: t('bool'), }, t('bool')],
  ori8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  ori16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  ori32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  ori64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  orbool: [{ a: t('bool'), b: t('bool'), }, t('bool')],
  xori8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  xori16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  xori32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  xori64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  xorbool: [{ a: t('bool'), b: t('bool'), }, t('bool')],
  noti8: [{ a: t('int8'), }, t('int8')],
  noti16: [{ a: t('int16'), }, t('int16')],
  noti32: [{ a: t('int32'), }, t('int32')],
  noti64: [{ a: t('int64'), }, t('int64')],
  notbool: [{ a: t('bool'), }, t('bool')],
  nandi8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  nandi16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  nandi32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  nandi64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  nandboo: [{ a: t('bool'), b: t('bool'), }, t('bool')],
  nori8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  nori16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  nori32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  nori64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  norbool: [{ a: t('bool'), b: t('bool'), }, t('bool')],
  xnori8: [{ a: t('int8'), b: t('int8'), }, t('int8')],
  xnori16: [{ a: t('int16'), b: t('int16'), }, t('int16')],
  xnori32: [{ a: t('int32'), b: t('int32'), }, t('int32')],
  xnori64: [{ a: t('int64'), b: t('int64'), }, t('int64')],
  xnorboo: [{ a: t('bool'), b: t('bool'), }, t('bool')],
  eqi8: [{ a: t('int8'), b: t('int8'), }, t('bool')],
  eqi16: [{ a: t('int16'), b: t('int16'), }, t('bool')],
  eqi32: [{ a: t('int32'), b: t('int32'), }, t('bool')],
  eqi64: [{ a: t('int64'), b: t('int64'), }, t('bool')],
  eqf32: [{ a: t('float32'), b: t('float32'), }, t('bool')],
  eqf64: [{ a: t('float64'), b: t('float64'), }, t('bool')],
  eqbool: [{ a: t('bool'), b: t('bool'), }, t('bool')],
  eqstr: [{ a: t('string'), b: t('string'), }, t('bool')],
  neqi8: [{ a: t('int8'), b: t('int8'), }, t('bool')],
  neqi16: [{ a: t('int16'), b: t('int16'), }, t('bool')],
  neqi32: [{ a: t('int32'), b: t('int32'), }, t('bool')],
  neqi64: [{ a: t('int64'), b: t('int64'), }, t('bool')],
  neqf32: [{ a: t('float32'), b: t('float32'), }, t('bool')],
  neqf64: [{ a: t('float64'), b: t('float64'), }, t('bool')],
  neqbool: [{ a: t('bool'), b: t('bool'), }, t('bool')],
  neqstr: [{ a: t('string'), b: t('string'), }, t('bool')],
  lti8: [{ a: t('int8'), b: t('int8'), }, t('bool')],
  lti16: [{ a: t('int16'), b: t('int16'), }, t('bool')],
  lti32: [{ a: t('int32'), b: t('int32'), }, t('bool')],
  lti64: [{ a: t('int64'), b: t('int64'), }, t('bool')],
  ltf32: [{ a: t('float32'), b: t('float32'), }, t('bool')],
  ltf64: [{ a: t('float64'), b: t('float64'), }, t('bool')],
  ltstr: [{ a: t('string'), b: t('string'), }, t('bool')],
  ltei8: [{ a: t('int8'), b: t('int8'), }, t('bool')],
  ltei16: [{ a: t('int16'), b: t('int16'), }, t('bool')],
  ltei32: [{ a: t('int32'), b: t('int32'), }, t('bool')],
  ltei64: [{ a: t('int64'), b: t('int64'), }, t('bool')],
  ltef32: [{ a: t('float32'), b: t('float32'), }, t('bool')],
  ltef64: [{ a: t('float64'), b: t('float64'), }, t('bool')],
  ltestr: [{ a: t('string'), b: t('string'), }, t('bool')],
  gti8: [{ a: t('int8'), b: t('int8'), }, t('bool')],
  gti16: [{ a: t('int16'), b: t('int16'), }, t('bool')],
  gti32: [{ a: t('int32'), b: t('int32'), }, t('bool')],
  gti64: [{ a: t('int64'), b: t('int64'), }, t('bool')],
  gtf32: [{ a: t('float32'), b: t('float32'), }, t('bool')],
  gtf64: [{ a: t('float64'), b: t('float64'), }, t('bool')],
  gtstr: [{ a: t('string'), b: t('string'), }, t('bool')],
  gtei8: [{ a: t('int8'), b: t('int8'), }, t('bool')],
  gtei16: [{ a: t('int16'), b: t('int16'), }, t('bool')],
  gtei32: [{ a: t('int32'), b: t('int32'), }, t('bool')],
  gtei64: [{ a: t('int64'), b: t('int64'), }, t('bool')],
  gtef32: [{ a: t('float32'), b: t('float32'), }, t('bool')],
  gtef64: [{ a: t('float64'), b: t('float64'), }, t('bool')],
  gtestr: [{ a: t('string'), b: t('string'), }, t('bool')],
  catstr: [{ a: t('string'), b: t('string'), }, t('string')],
  catarr: [{ a: t('Array<any>'), b: t('string')}, t('Array<any>')],
  split: [{ str: t('string'), spl: t('string'), }, t('Array<string>')],
  repstr: [{ s: t('string'), n: t('int64'), }, t('string')],
  reparr: [{ arr: t('Array<any>'), n: t('int64'), }, t('Array<any>')],
  templ: [{ str: t('string'), map: t('Map<string, string>'), }, t('string')],
  matches: [{ s: t('string'), t: t('string'), }, t('bool')],
  indstr: [{ s: t('string'), t: t('string'), }, t('int64')],
  indarr: [{ arr: t('Array<any>'), val: t('any'), }, t('int64')],
  lenstr: [{ s: t('string'), }, t('int64')],
  lenarr: [{ arr: t('Array<any>'), }, t('int64')],
  lenmap: [{ map: t('Map<any, any>'), }, t('int64')],
  trim: [{ s: t('string'), }, t('string')],
  pair: [{ trueval: t('any'), falseval: t('any'), }, t('Array<any>')],
  condarr: [{ cond: t('bool'), options: t('Array<any>'), }, t('any')],
  condfn: [{ cond: t('bool'), optional: t('function'), }, t('any')],
  each: [{ arr: t('Array<any>'), cb: t('function'), }, t('void')],
  map: [{ arr: t('Array<any>'), cb: t('function'), }, t('Array<any>')],
  reduce: [{ arr: t('Array<any>'), cb: t('function'), }, t('any')],
  filter: [{ arr: t('Array<any>'), cb: t('function'), }, t('Array<any>')],
  find: [{ arr: t('Array<any>'), cb: t('function'), }, t('any')],
  every: [{ arr: t('Array<any>'), cb: t('function'), }, t('bool')],
  some: [{ arr: t('Array<any>'), cb: t('function'), }, t('bool')],
  join: [{ arr: t('Array<string>'), sep: t('string'), }, t('string')],
  keyVal: [{ map: t('Map<any, any>'), }, t('Array<KeyVal<any, any>>')],
  keys: [{ map: t('Map<any, any>'), }, t('Array<any>')],
  values: [{ map: t('Map<any, any>'), }, t('Array<any>')],
  stdoutp: [{ out: t('string'), }, t('void')],
  exitop: [{ code: t('int8'), }, t('void')],
})

module.exports = opcodeModule
},{"./Box":14,"./Event":15,"./Interface":23,"./Microstatement":24,"./Module":25,"./Scope":27,"./StatementType":29,"./Type":30,"uuid":87}],34:[function(require,module,exports){
const lntoamm = require('../lntoamm')
const { ammTextToJs, } = require('../ammtojs')

module.exports = (filename) => ammTextToJs(lntoamm(filename))
module.exports.lnTextToJs = (str) => ammTextToJs(lntoamm.lnTextToAmm(str))

},{"../ammtojs":6,"../lntoamm":32}],35:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = require('./Token').Token;
var Lexer = require('./Lexer').Lexer;
var Interval = require('./IntervalSet').Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function() {
	return 0;
};

BufferedTokenStream.prototype.release = function(marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function() {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function(index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function(index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function() {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function(i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function(n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function(start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function(i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function(k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function(k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) { // return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function(i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function() {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function() {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function(tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
	this.fetchedEOF = false;
};


// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function() {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function(interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function() {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;

},{"./IntervalSet":41,"./Lexer":43,"./Token":49}],36:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var InputStream = require('./InputStream').InputStream;

var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? require("fs") : null;

// Utility functions to create InputStreams from various sources.
//
// All returned InputStreams support the full range of Unicode
// up to U+10FFFF (the default behavior of InputStream only supports
// code points up to U+FFFF).
var CharStreams = {
  // Creates an InputStream from a string.
  fromString: function(str) {
    return new InputStream(str, true);
  },

  // Asynchronously creates an InputStream from a blob given the
  // encoding of the bytes in that blob (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes onLoad(result) on success, onError(error) on
  // failure.
  fromBlob: function(blob, encoding, onLoad, onError) {
    var reader = FileReader();
    reader.onload = function(e) {
      var is = new InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  // Creates an InputStream from a Buffer given the
  // encoding of the bytes in that buffer (defaults to 'utf8' if
  // encoding is null).
  fromBuffer: function(buffer, encoding) {
    return new InputStream(buffer.toString(encoding), true);
  },

  // Asynchronously creates an InputStream from a file on disk given
  // the encoding of the bytes in that file (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes callback(error, result) on completion.
  fromPath: function(path, encoding, callback) {
    fs.readFile(path, encoding, function(err, data) {
      var is = null;
      if (data !== null) {
        is = new InputStream(data, true);
      }
      callback(err, is);
    });
  },

  // Synchronously creates an InputStream given a path to a file
  // on disk and the encoding of the bytes in that file (defaults to
  // 'utf8' if encoding is null).
  fromPathSync: function(path, encoding) {
    var data = fs.readFileSync(path, encoding);
    return new InputStream(data, true);
  }
};

exports.CharStreams = CharStreams;

},{"./InputStream":40,"fs":82}],37:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = require('./Token').CommonToken;

function TokenFactory() {
	return this;
}

function CommonTokenFactory(copyText) {
	TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText===undefined ? false : copyText;
	return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !==null) {
        t.text = text;
    } else if (this.copyText && source[1] !==null) {
        t.text = source[1].getText(start,stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function(type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;

},{"./Token":49}],38:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = require('./Token').Token;
var BufferedTokenStream = require('./BufferedTokenStream').BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
	BufferedTokenStream.call(this, lexer);
    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function(i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function(k) {
    if (k===0 || this.index-k<0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function(k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {
    var n = 0;
    this.fill();
    for (var i =0; i< this.tokens.length;i++) {
        var t = this.tokens[i];
        if( t.channel===this.channel) {
            n += 1;
        }
        if( t.type===Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;
},{"./BufferedTokenStream":35,"./Token":49}],39:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
//
var InputStream = require('./InputStream').InputStream;
var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? require("fs") : null;

function FileStream(fileName, decodeToUnicodeCodePoints) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data, decodeToUnicodeCodePoints);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;

},{"./InputStream":40,"fs":82}],40:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = require('./Token').Token;
require('./polyfills/codepointat');
require('./polyfills/fromcodepoint');

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream) {
	stream._index = 0;
	stream.data = [];
	if (stream.decodeToUnicodeCodePoints) {
		for (var i = 0; i < stream.strdata.length; ) {
			var codePoint = stream.strdata.codePointAt(i);
			stream.data.push(codePoint);
			i += codePoint <= 0xFFFF ? 1 : 2;
		}
	} else {
		for (var i = 0; i < stream.strdata.length; i++) {
			var codeUnit = stream.strdata.charCodeAt(i);
			stream.data.push(codeUnit);
		}
	}
	stream._size = stream.data.length;
}

// If decodeToUnicodeCodePoints is true, the input is treated
// as a series of Unicode code points.
//
// Otherwise, the input is treated as a series of 16-bit UTF-16 code
// units.
function InputStream(data, decodeToUnicodeCodePoints) {
	this.name = "<empty>";
	this.strdata = data;
	this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get : function() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get : function() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function() {
	this._index = 0;
};

InputStream.prototype.consume = function() {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw ("cannot consume EOF");
	}
	this._index += 1;
};

InputStream.prototype.LA = function(offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) { // invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function(offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function() {
	return -1;
};

InputStream.prototype.release = function(marker) {
};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function(_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
								// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function(start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		if (this.decodeToUnicodeCodePoints) {
			var result = "";
			for (var i = start; i <= stop; i++) {
				result += String.fromCodePoint(this.data[i]);
			}
			return result;
		} else {
			return this.strdata.slice(start, stop + 1);
		}
	}
};

InputStream.prototype.toString = function() {
	return this.strdata;
};

exports.InputStream = InputStream;

},{"./Token":49,"./polyfills/codepointat":77,"./polyfills/fromcodepoint":78}],41:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*jslint smarttabs:true */

var Token = require('./Token').Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function(item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function() {
	if(this.start===this.stop-1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop-1).toString();
	}
};


Object.defineProperty(Interval.prototype, "length", {
	get : function() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function(v) {
	if (this.intervals === null || this.intervals.length===0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function(v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function(l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function(v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
				this.intervals[k].start = v.start;
				return;
			}
			// overlapping range -> adjust and reduce
			else if (v.start <= i.stop) {
				this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
				this.reduce(k);
				return;
			}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function(other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function(k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function(start, stop) {
    var result = new IntervalSet();
    result.addInterval(new Interval(start,stop+1));
    for(var i=0; i<this.intervals.length; i++) {
        result.removeRange(this.intervals[i]);
    }
    return result;
};

IntervalSet.prototype.contains = function(item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if(this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get : function() {
		var len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
});

IntervalSet.prototype.removeRange = function(v) {
    if(v.start===v.stop-1) {
        this.removeOne(v.start);
    } else if (this.intervals!==null) {
        var k = 0;
        for(var n=0; n<this.intervals.length; n++) {
            var i = this.intervals[k];
            // intervals are ordered
            if (v.stop<=i.start) {
                return;
            }
            // check for including range, split it
            else if(v.start>i.start && v.stop<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
                var x = new Interval(v.stop, i.stop);
                this.intervals.splice(k, 0, x);
                return;
            }
            // check for included range, remove it
            else if(v.start<=i.start && v.stop>=i.stop) {
                this.intervals.splice(k, 1);
                k = k - 1; // need another pass
            }
            // check for lower boundary
            else if(v.start<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
            }
            // check for upper boundary
            else if(v.stop<i.stop) {
                this.intervals[k] = new Interval(v.stop, i.stop);
            }
            k += 1;
        }
    }
};

IntervalSet.prototype.removeOne = function(v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
				this.intervals.splice(k, 1);
				return;
			}
			// check for lower boundary
			else if (v === i.start) {
				this.intervals[k] = new Interval(i.start + 1, i.stop);
				return;
			}
			// check for upper boundary
			else if (v === i.stop - 1) {
				this.intervals[k] = new Interval(i.start, i.stop - 1);
				return;
			}
			// split existing range
			else if (v < i.stop - 1) {
				var x = new Interval(i.start, v);
				i.start = v + 1;
				this.intervals.splice(k, 0, x);
				return;
			}
		}
	}
};

IntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if(literalNames!==null || symbolicNames!==null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if(elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toIndexString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop-1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;

},{"./Token":49}],42:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var Set = require('./Utils').Set;
var BitSet = require('./Utils').BitSet;
var Token = require('./Token').Token;
var ATNConfig = require('./atn/ATNConfig').ATNConfig;
var Interval = require('./IntervalSet').Interval;
var IntervalSet = require('./IntervalSet').IntervalSet;
var RuleStopState = require('./atn/ATNState').RuleStopState;
var RuleTransition = require('./atn/Transition').RuleTransition;
var NotSetTransition = require('./atn/Transition').NotSetTransition;
var WildcardTransition = require('./atn/Transition').WildcardTransition;
var AbstractPredicateTransition = require('./atn/Transition').AbstractPredicateTransition;

var pc = require('./PredictionContext');
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer (atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;


//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function(s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for(var alt=0; alt< count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
              look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
	ctx = ctx || null;
    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState ) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for(var i=0; i<ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for(var j=0; j<s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition ) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if( t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;


},{"./IntervalSet":41,"./PredictionContext":46,"./Token":49,"./Utils":50,"./atn/ATNConfig":52,"./atn/ATNState":57,"./atn/Transition":65}],43:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest of speed.

var Token = require('./Token').Token;
var Recognizer = require('./Recognizer').Recognizer;
var CommonTokenFactory = require('./CommonTokenFactory').CommonTokenFactory;
var RecognitionException  = require('./error/Errors').RecognitionException;
var LexerNoViableAltException = require('./error/Errors').LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [ this, input ];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

Lexer.prototype.reset = function() {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function() {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
				    if(e instanceof RecognitionException) {
                        this.notifyListeners(e); // report error
                        this.recover(e);
                    } else {
                        console.log(e.stack);
                        throw e;
                    }
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function() {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function() {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function(m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function(m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function() {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get : function() {
		return this._input;
	},
	set : function(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get : function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function(token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function() {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type,
			this._text, this._channel, this._tokenStartCharIndex, this
					.getCharIndex() - 1, this._tokenStartLine,
			this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function() {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
			null, Token.DEFAULT_CHANNEL, this._input.index,
			this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get : function() {
		return this.type;
	},
	set : function(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get : function() {
		return this._interp.line;
	},
	set : function(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get : function() {
		return this._interp.column;
	},
	set : function(column) {
		this._interp.column = column;
	}
});


// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function() {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set : function(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function() {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function(e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine,
			this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function(s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function(c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function(c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function(re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;

},{"./CommonTokenFactory":37,"./Recognizer":47,"./Token":49,"./error/Errors":74}],44:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = require('./Token').Token;
var ParseTreeListener = require('./tree/Tree').ParseTreeListener;
var Recognizer = require('./Recognizer').Recognizer;
var DefaultErrorStrategy = require('./error/ErrorStrategy').DefaultErrorStrategy;
var ATNDeserializer = require('./atn/ATNDeserializer').ATNDeserializer;
var ATNDeserializationOptions = require('./atn/ATNDeserializationOptions').ATNDeserializationOptions;
var TerminalNode = require('./tree/Tree').TerminalNode;
var ErrorNode = require('./tree/Tree').ErrorNode;

function TraceListener(parser) {
	ParseTreeListener.call(this);
    this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener.prototype);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function(ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function( node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function(ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function() {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function(ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function() {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function() {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function(listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function(listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function() {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function() {
	if (this._parseListeners !== null) {
        var ctx = this._ctx;
		this._parseListeners.map(function(listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function() {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
        var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function(listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function() {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function(factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function() {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions)
				.deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = require('./Lexer').Lexer;

Parser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().tokenSource;
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function() {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function(input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function() {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function(input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function() {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function() {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
        node.invokingState = this.state;
		if (hasListener) {
			this._parseListeners.map(function(listener) {
				if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
					listener.visitErrorNode(node);
				} else if (node instanceof TerminalNode) {
					listener.visitTerminal(node);
				}
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function() {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function(localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function() {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function(localctx, altNum) {
   	localctx.setAltNumber(altNum);
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function() {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length-1];
	}
};

Parser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,
		precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function(parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function(ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function(localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length-1];
};

Parser.prototype.inContext = function(context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function(symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function() {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function() {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function(ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function(p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function() {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function() {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function() {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function(trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;
},{"./Lexer":43,"./Recognizer":47,"./Token":49,"./atn/ATNDeserializationOptions":54,"./atn/ATNDeserializer":55,"./error/ErrorStrategy":73,"./tree/Tree":79}],45:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = require('./RuleContext').RuleContext;
var Tree = require('./tree/Tree');
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = require("./IntervalSet").Interval;

function ParserRuleContext(parent, invokingStateNumber) {
	parent = parent || null;
	invokingStateNumber = invokingStateNumber || null;
	RuleContext.call(this, parent, invokingStateNumber);
	this.ruleIndex = -1;
    // * If we are debugging or building a parse tree for a visitor,
    // we need to track all of the tokens and rule invocations associated
    // with this rule's context. This is empty for parsing w/o tree constr.
    // operation because we don't the need to track the details about
    // how we parse this rule.
    // /
    this.children = null;
    this.start = null;
    this.stop = null;
    // The exception that forced this rule to return. If the rule successfully
    // completed, this is {@code null}.
    this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function(ctx) {
    // from RuleContext
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
    // copy any error nodes to alt label node
    if(ctx.children) {
        this.children = [];
        // reset parent pointer for any error nodes
    	ctx.children.map(function(child) {
    		if (child instanceof ErrorNodeImpl) {
                this.children.push(child);
                child.parentCtx = this;
            }
		}, this);
	}
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function(listener) {
};

ParserRuleContext.prototype.exitRule = function(listener) {
};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function(child) {
    if (this.children === null) {
        this.children = [];
    }
    this.children.push(child);
    return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function() {
    if (this.children !== null) {
        this.children.pop();
    }
};

ParserRuleContext.prototype.addTokenNode = function(token) {
    var node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.addErrorNode = function(badToken) {
    var node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.getChild = function(i, type) {
	type = type || null;
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	if (type === null) {
		return this.children[i];
	} else {
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if(child instanceof type) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
		}
		return null;
    }
};


ParserRuleContext.prototype.getToken = function(ttype, i) {
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	for(var j=0; j<this.children.length; j++) {
		var child = this.children[j];
		if (child instanceof TerminalNode) {
			if (child.symbol.type === ttype) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
        }
	}
    return null;
};

ParserRuleContext.prototype.getTokens = function(ttype ) {
    if (this.children=== null) {
        return [];
    } else {
		var tokens = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					tokens.push(child);
				}
			}
		}
		return tokens;
    }
};

ParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {
    return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {
    if (this.children=== null) {
        return [];
    } else {
		var contexts = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof ctxType) {
				contexts.push(child);
			}
		}
		return contexts;
	}
};

ParserRuleContext.prototype.getChildCount = function() {
	if (this.children=== null) {
		return 0;
	} else {
		return this.children.length;
	}
};

ParserRuleContext.prototype.getSourceInterval = function() {
    if( this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
    } else {
        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
	ParserRuleContext.call(parent, invokingStateNumber);
    this.ruleIndex = ruleIndex;
    return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;
},{"./IntervalSet":41,"./RuleContext":48,"./tree/Tree":79}],46:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var RuleContext = require('./RuleContext').RuleContext;
var Hash = require('./Utils').Hash;
var Map = require('./Utils').Map;

function PredictionContext(cachedHashCode) {
	this.cachedHashCode = cachedHashCode;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function() {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function() {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashCode = function() {
	return this.cachedHashCode;
};


PredictionContext.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};
/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = new Map();
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function(ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache.get(ctx) || null;
	if (existing !== null) {
		return existing;
	}
	this.cache.put(ctx, ctx);
	return ctx;
};

PredictionContextCache.prototype.get = function(ctx) {
	return this.cache.get(ctx) || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get : function() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashCode = 0;
	var hash = new Hash();
	if(parent !== null) {
		hash.update(parent, returnState);
	} else {
		hash.update(1);
	}
	hashCode = hash.finish();
	PredictionContext.call(this, hashCode);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function(parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get : function() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function(index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		if(this.returnState !== other.returnState)
            return false;
        else if(this.parentCtx==null)
            return other.parentCtx==null
		else
            return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.toString = function() {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function() {
	return true;
};

EmptyPredictionContext.prototype.getParent = function(index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function(other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function() {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var h = new Hash();
	h.update(parents, returnStates);
	var hashCode = h.finish();
	PredictionContext.call(this, hashCode);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function() {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get : function() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function(index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function(index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates &&
				this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function() {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			var payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [ singleParent, singleParent ];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [ a.returnState, b.returnState ];
		var parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			var payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			var payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			var ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = new Map();

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(uniqueParents.containsKey(parent))) {
			uniqueParents.put(parent, parent);
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents.get(parents[q]);
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited.get(context) || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited.put(context, existing);
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited.put(context, context);
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited.put(updated, updated);
	visited.put(context, updated);

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = new Map();
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited.containsKey(context)) {
			return nodes;
		}
		visited.put(context, context);
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;

},{"./RuleContext":48,"./Utils":50}],47:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = require('./Token').Token;
var ConsoleErrorListener = require('./error/ErrorListener').ConsoleErrorListener;
var ProxyErrorListener = require('./error/ErrorListener').ProxyErrorListener;

function Recognizer() {
    this._listeners = [ ConsoleErrorListener.INSTANCE ];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};


Recognizer.prototype.checkVersion = function(toolVersion) {
    var runtimeVersion = "4.8";
    if (runtimeVersion!==toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function(listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function() {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function() {
    var tokenNames = this.getTokenNames();
    if (tokenNames===null) {
        throw("The current recognizer does not provide a list of token names.");
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if(result===undefined) {
        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function() {
    var ruleNames = this.ruleNames;
    if (ruleNames===null) {
        throw("The current recognizer does not provide a list of rule names.");
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if(result===undefined) {
        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function(tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !==undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};


// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function(e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};


// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function(t) {
    if (t===null) {
        return "<no token>";
    }
    var s = t.text;
    if (s===null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function() {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function(localctx , precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
	get : function() {
		return this._stateNumber;
	},
	set : function(state) {
		this._stateNumber = state;
	}
});


exports.Recognizer = Recognizer;

},{"./Token":49,"./error/ErrorListener":72}],48:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = require('./tree/Tree').RuleNode;
var INVALID_INTERVAL = require('./tree/Tree').INVALID_INTERVAL;
var INVALID_ALT_NUMBER = require('./atn/ATN').INVALID_ALT_NUMBER;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function() {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function() {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function() {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function() {
	return this;
};

RuleContext.prototype.getPayload = function() {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function() {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function(child) {
			return child.getText();
		}).join("");
	}
};

// For rule associated with this parse tree internal node, return
// the outer alternative number used to match the input. Default
// implementation does not compute nor store this alt num. Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
// to set it.
RuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }

// Set the outer alternative number for this context node. Default
// implementation does nothing to avoid backing field overhead for
// trees that don't need it.  Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
RuleContext.prototype.setAltNumber = function(altNumber) { }

RuleContext.prototype.getChild = function(i) {
	return null;
};

RuleContext.prototype.getChildCount = function() {
	return 0;
};

RuleContext.prototype.accept = function(visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = require('./tree/Trees').Trees;


// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function(ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function(ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
					: "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};


},{"./atn/ATN":51,"./tree/Tree":79,"./tree/Trees":80}],49:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get : function() {
		return this._text;
	},
	set : function(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function() {
	return this.source[0];
};

Token.prototype.getInputStream = function() {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [ null, null ];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function() {
	var t = new CommonToken(this.source, this.type, this.channel, this.start,
			this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set : function(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function() {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
			txt + "',<" + this.type + ">" +
			(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
			this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;

},{}],50:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function arrayToString(a) {
    return "[" + a.join(", ") + "]";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i,
        key = this.toString();

    remainder = key.length & 3; // key.length % 4
    bytes = key.length - remainder;
    h1 = String.prototype.seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a.equals(b);
}

function standardHashCodeFunction(a) {
    return a.hashCode();
}

function Set(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Set.prototype, "length", {
    get: function () {
        var l = 0;
        for (var key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
});

Set.prototype.add = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
        values.push(value);
        return value;
    } else {
        this.data[key] = [value];
        return value;
    }
};

Set.prototype.contains = function (value) {
    return this.get(value) != null;
};

Set.prototype.get = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
    }
    return null;
};

Set.prototype.values = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};

Set.prototype.toString = function () {
    return arrayToString(this.values());
};

function BitSet() {
    this.data = [];
    return this;
}

BitSet.prototype.add = function (value) {
    this.data[value] = true;
};

BitSet.prototype.or = function (set) {
    var bits = this;
    Object.keys(set.data).map(function (alt) {
        bits.add(alt);
    });
};

BitSet.prototype.remove = function (value) {
    delete this.data[value];
};

BitSet.prototype.contains = function (value) {
    return this.data[value] === true;
};

BitSet.prototype.values = function () {
    return Object.keys(this.data);
};

BitSet.prototype.minValue = function () {
    return Math.min.apply(null, this.values());
};

BitSet.prototype.hashCode = function () {
    var hash = new Hash();
    hash.update(this.values());
    return hash.finish();
};

BitSet.prototype.equals = function (other) {
    if (!(other instanceof BitSet)) {
        return false;
    }
    return this.hashCode() === other.hashCode();
};

Object.defineProperty(BitSet.prototype, "length", {
    get: function () {
        return this.values().length;
    }
});

BitSet.prototype.toString = function () {
    return "{" + this.values().join(", ") + "}";
};

function Map(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Map.prototype, "length", {
    get: function () {
        var l = 0;
        for (var hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
});

Map.prototype.put = function (key, value) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) {
                var oldValue = entry.value;
                entry.value = value;
                return oldValue;
            }
        }
        entries.push({key:key, value:value});
        return value;
    } else {
        this.data[hashKey] = [{key:key, value:value}];
        return value;
    }
};

Map.prototype.containsKey = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return true;
        }
    }
    return false;
};

Map.prototype.get = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return entry.value;
        }
    }
    return null;
};

Map.prototype.entries = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};


Map.prototype.getKeys = function () {
    return this.entries().map(function(e) {
        return e.key;
    });
};


Map.prototype.getValues = function () {
    return this.entries().map(function(e) {
            return e.value;
    });
};


Map.prototype.toString = function () {
    var ss = this.entries().map(function(entry) {
        return '{' + entry.key + ':' + entry.value + '}';
    });
    return '[' + ss.join(", ") + ']';
};


function AltDict() {
    this.data = {};
    return this;
}


AltDict.prototype.get = function (key) {
    key = "k-" + key;
    if (key in this.data) {
        return this.data[key];
    } else {
        return null;
    }
};

AltDict.prototype.put = function (key, value) {
    key = "k-" + key;
    this.data[key] = value;
};

AltDict.prototype.values = function () {
    var data = this.data;
    var keys = Object.keys(this.data);
    return keys.map(function (key) {
        return data[key];
    });
};

function DoubleDict(defaultMapCtor) {
    this.defaultMapCtor = defaultMapCtor || Map;
    this.cacheMap = new this.defaultMapCtor();
    return this;
}

function Hash() {
    this.count = 0;
    this.hash = 0;
    return this;
}

Hash.prototype.update = function () {
    for(var i=0;i<arguments.length;i++) {
        var value = arguments[i];
        if (value == null)
            continue;
        if(Array.isArray(value))
            this.update.apply(this, value);
        else {
            var k = 0;
            switch (typeof(value)) {
                case 'undefined':
                case 'function':
                    continue;
                case 'number':
                case 'boolean':
                    k = value;
                    break;
                case 'string':
                    k = value.hashCode();
                    break;
                default:
                    if(value.updateHashCode)
                        value.updateHashCode(this);
                    else
                        console.log("No updateHashCode for " + value.toString())
                    continue;
            }
            k = k * 0xCC9E2D51;
            k = (k << 15) | (k >>> (32 - 15));
            k = k * 0x1B873593;
            this.count = this.count + 1;
            var hash = this.hash ^ k;
            hash = (hash << 13) | (hash >>> (32 - 13));
            hash = hash * 5 + 0xE6546B64;
            this.hash = hash;
        }
    }
};

Hash.prototype.finish = function () {
    var hash = this.hash ^ (this.count * 4);
    hash = hash ^ (hash >>> 16);
    hash = hash * 0x85EBCA6B;
    hash = hash ^ (hash >>> 13);
    hash = hash * 0xC2B2AE35;
    hash = hash ^ (hash >>> 16);
    return hash;
};

function hashStuff() {
    var hash = new Hash();
    hash.update.apply(hash, arguments);
    return hash.finish();
}

DoubleDict.prototype.get = function (a, b) {
    var d = this.cacheMap.get(a) || null;
    return d === null ? null : (d.get(b) || null);
};

DoubleDict.prototype.set = function (a, b, o) {
    var d = this.cacheMap.get(a) || null;
    if (d === null) {
        d = new this.defaultMapCtor();
        this.cacheMap.put(a, d);
    }
    d.put(b, o);
};


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace(/\t/g, "\\t")
         .replace(/\n/g, "\\n")
         .replace(/\r/g, "\\r");
    if (escapeSpaces) {
        s = s.replace(/ /g, "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
};

function equalArrays(a, b)
{
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a == b)
        return true;
    if (a.length != b.length)
        return false;
    for (var i = 0; i < a.length; i++) {
        if (a[i] == b[i])
            continue;
        if (!a[i].equals(b[i]))
            return false;
    }
    return true;
};

exports.Hash = Hash;
exports.Set = Set;
exports.Map = Map;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.hashStuff = hashStuff;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;
exports.titleCase = titleCase;
exports.equalArrays = equalArrays;

},{}],51:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var LL1Analyzer = require('./../LL1Analyzer').LL1Analyzer;
var IntervalSet = require('./../IntervalSet').IntervalSet;

function ATN(grammarType , maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}

// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function(s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function(s) {
    if (s.nextTokenWithinRule !== null ) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function(s, ctx) {
    if ( ctx===undefined ) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function( state) {
    if ( state !== null ) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function( state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function( s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length-1;
    return s.decision;
};

ATN.prototype.getDecisionState = function( decision) {
    if (this.decisionToState.length===0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = require('./../Token').Token;

ATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {
    if ( stateNumber < 0 || stateNumber >= this.states.length ) {
        throw("Invalid state number.");
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;
},{"./../IntervalSet":41,"./../LL1Analyzer":42,"./../Token":49}],52:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = require('./ATNState').DecisionState;
var SemanticContext = require('./SemanticContext').SemanticContext;
var Hash = require("../Utils").Hash;


function checkParams(params, isCfg) {
	if(params===null) {
		var result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		var props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

function ATNConfig(params, config) {
	this.checkContext(params, config);
	params = checkParams(params);
	config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state!==null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt!==null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context!==null ? params.context : config.context;
    this.semanticContext = params.semanticContext!==null ? params.semanticContext :
        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function(params, config) {
	if((params.context===null || params.context===undefined) &&
			(config===null || config.context===null || config.context===undefined)) {
		this.context = null;
	}
};


ATNConfig.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.

ATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            (this.context===null ? other.context===null : this.context.equals(other.context)) &&
            this.semanticContext.equals(other.semanticContext) &&
            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
    }
};


ATNConfig.prototype.hashCodeForConfigSet = function() {
    var hash = new Hash();
    hash.update(this.state.stateNumber, this.alt, this.semanticContext);
    return hash.finish();
};


ATNConfig.prototype.equalsForConfigSet = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            this.semanticContext.equals(other.semanticContext);
    }
};


ATNConfig.prototype.toString = function() {
    return "(" + this.state + "," + this.alt +
        (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
        (this.semanticContext !== SemanticContext.NONE ?
                ("," + this.semanticContext.toString())
                : "") +
        (this.reachesIntoOuterContext>0 ?
                (",up=" + this.reachesIntoOuterContext)
                : "") + ")";
};


function LexerATNConfig(params, config) {
	ATNConfig.call(this, params, config);

    // This is the backing field for {@link //getLexerActionExecutor}.
	var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
};

LexerATNConfig.prototype.equals = function(other) {
    return this === other ||
            (other instanceof LexerATNConfig &&
            this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&
            (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
            ATNConfig.prototype.equals.call(this, other));
};

LexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;

LexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;


LexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {
    return source.passedThroughNonGreedyDecision ||
        (target instanceof DecisionState) && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;
},{"../Utils":50,"./ATNState":57,"./SemanticContext":64}],53:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = require('./ATN').ATN;
var Utils = require('./../Utils');
var Hash = Utils.Hash;
var Set = Utils.Set;
var SemanticContext = require('./SemanticContext').SemanticContext;
var merge = require('./../PredictionContext').merge;

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }


function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readOnly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashCode = -1;

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function(config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashCode = -1;
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function() {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function() {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get : function() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function(interpreter) {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function(coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function(other) {
	return this === other ||
		(other instanceof ATNConfigSet &&
		Utils.equalArrays(this.configs, other.configs) &&
		this.fullCtx === other.fullCtx &&
		this.uniqueAlt === other.uniqueAlt &&
		this.conflictingAlts === other.conflictingAlts &&
		this.hasSemanticContext === other.hasSemanticContext &&
		this.dipsIntoOuterContext === other.dipsIntoOuterContext);
};

ATNConfigSet.prototype.hashCode = function() {
    var hash = new Hash();
	hash.update(this.configs);
    return hash.finish();
};


ATNConfigSet.prototype.updateHashCode = function(hash) {
	if (this.readOnly) {
		if (this.cachedHashCode === -1) {
            this.cachedHashCode = this.hashCode();
		}
        hash.update(this.cachedHashCode);
	} else {
        hash.update(this.hashCode());
	}
};


Object.defineProperty(ATNConfigSet.prototype, "length", {
	get : function() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function() {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function() {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashCode = -1;
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function(readOnly) {
	this.readOnly = readOnly;
	if (readOnly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function() {
	return Utils.arrayToString(this.configs) +
		(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
		(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
		(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
		(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;

},{"./../PredictionContext":46,"./../Utils":50,"./ATN":51,"./SemanticContext":64}],54:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function ATNDeserializationOptions(copyFrom) {
	if(copyFrom===undefined) {
		copyFrom = null;
	}
	this.readOnly = false;
    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;

    return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;

},{}],55:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = require('./../Token').Token;
var ATN = require('./ATN').ATN;
var ATNType = require('./ATNType').ATNType;
var ATNStates = require('./ATNState');
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = require('./Transition');
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = require('./../IntervalSet').IntervalSet;
var Interval = require('./../IntervalSet').Interval;
var ATNDeserializationOptions = require('./ATNDeserializationOptions').ATNDeserializationOptions;
var LexerActions = require('./LexerAction');
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
var ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray( length, value) {
	var tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

function ATNDeserializer (options) {

    if ( options=== undefined || options === null ) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;

    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.indexOf(feature);
    if (idx1<0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function(data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = [];
    // First, deserialize sets with 16-bit arguments <= U+FFFF.
    this.readSets(atn, sets, this.readInt.bind(this));
    // Next, if the ATN was serialized with the Unicode SMP feature,
    // deserialize sets with 32-bit arguments <= U+10FFFF.
    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
        this.readSets(atn, sets, this.readInt32.bind(this));
    }
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function(data) {
	var adjust = function(c) {
        var v = c.charCodeAt(0);
        return v>1  ? v-2 : v + 65534;
	};
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function() {
    var version = this.readInt();
    if ( version !== SERIALIZED_VERSION ) {
        throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
    }
};

ATNDeserializer.prototype.checkUUID = function() {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
        throw ("Could not deserialize ATN with UUID: " + uuid +
                        " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function() {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function(atn) {
	var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for(var i=0; i<nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype===ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) { // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if(s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
	// state instances have been initialized
    for (j=0; j<loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j=0; j<endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }

    var numNonGreedyStates = this.readInt();
    for (j=0; j<numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j=0; j<numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function(atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER ) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i=0; i<nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if ( atn.grammarType === ATNType.LEXER ) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function(atn) {
    var nmodes = this.readInt();
    for (var i=0; i<nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function(atn, sets, readUnicode) {
    var m = this.readInt();
    for (var i=0; i<m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof!==0) {
            iset.addOne(-1);
        }
        for (var j=0; j<n; j++) {
            var i1 = readUnicode();
            var i2 = readUnicode();
            iset.addRange(i1, i2);
        }
    }
};

ATNDeserializer.prototype.readEdges = function(atn, sets) {
	var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i=0; i<nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for (j=0; j<state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
			var outermostPrecedenceReturn = -1;
			if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
				if (t.precedence === 0) {
					outermostPrecedenceReturn = t.target.ruleIndex;
				}
			}

			trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw ("IllegalState");
            }
            // block end states can only be associated to a single block start
			// state
            if ( state.endState.startState !== null) {
                throw ("IllegalState");
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function(atn) {
    var ndecisions = this.readInt();
    for (var i=0; i<ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function(atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i=0; i<count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {
	var i;
    var count = atn.ruleToStartState.length;
    for(i=0; i<count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for(i=0; i<count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {
	var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;

    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw ("Couldn't identify final state of the precedence rule prefix section.");
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }

    // all non-excluded transitions that currently target end state need to
	// target blockEnd instead
    for(i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for(var j=0; j<state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
	// instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while ( count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count-1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {
    if ( state.ruleIndex !== idx) {
        return null;
    }
    if (!( state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!( maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions &&
        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//isPrecedenceDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {
	for(var i=0; i<atn.states.length; i++) {
		var state = atn.states[i];
		if (!( state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if ( maybeLoopEndState.epsilonOnlyTransitions &&
                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                    state.isPrecedenceDecision = true;
                }
            }
        }
	}
};

ATNDeserializer.prototype.verifyATN = function(atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
	for(var i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else  if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw("IllegalState");
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
        }
	}
};

ATNDeserializer.prototype.checkCondition = function(condition, message) {
    if (!condition) {
        if (message === undefined || message===null) {
            message = "IllegalState";
        }
        throw (message);
    }
};

ATNDeserializer.prototype.readInt = function() {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function() {
    var low = this.readInt();
    var high = this.readInt();
    return low | (high << 16);
};

ATNDeserializer.prototype.readLong = function() {
    var low = this.readInt32();
    var high = this.readInt32();
    return (low & 0x00000000FFFFFFFF) | (high << 32);
};

function createByteToHex() {
	var bth = [];
	for (var i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

var byteToHex = createByteToHex();

ATNDeserializer.prototype.readUUID = function() {
	var bb = [];
	for(var i=7;i>=0;i--) {
		var int = this.readInt();
		/* jshint bitwise: false */
		bb[(2*i)+1] = int & 0xFF;
		bb[2*i] = (int >> 8) & 0xFF;
	}
    return byteToHex[bb[0]] + byteToHex[bb[1]] +
    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
    byteToHex[bb[10]] + byteToHex[bb[11]] +
    byteToHex[bb[12]] + byteToHex[bb[13]] +
    byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch(type) {
    case Transition.EPSILON:
        return new EpsilonTransition(target);
    case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
    case Transition.RULE:
        return new RuleTransition(atn.states[arg1], arg2, arg3, target);
    case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
    case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
    case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.SET:
        return new SetTransition(target, sets[arg1]);
    case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
    case Transition.WILDCARD:
        return new WildcardTransition(target);
    default:
        throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function() { return new BasicState(); };
        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };
        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };
        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };
        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };
        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };
        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };
        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };
        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };
        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };
        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };
        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };
        this.stateFactories = sf;
    }
    if (type>this.stateFactories.length || this.stateFactories[type] === null) {
        throw("The specified state type " + type + " is not valid.");
    } else {
        var s = this.stateFactories[type]();
        if (s!==null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };
        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };
        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };
        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };
        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };
        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };
        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };
        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };
        this.actionFactories = af;
    }
    if (type>this.actionFactories.length || this.actionFactories[type] === null) {
        throw("The specified lexer action type " + type + " is not valid.");
    } else {
        return this.actionFactories[type](data1, data2);
    }
};


exports.ATNDeserializer = ATNDeserializer;
},{"./../IntervalSet":41,"./../Token":49,"./ATN":51,"./ATNDeserializationOptions":54,"./ATNState":57,"./ATNType":58,"./LexerAction":60,"./Transition":65}],56:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var DFAState = require('./../dfa/DFAState').DFAState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var getCachedPredictionContext = require('./../PredictionContext').getCachedPredictionContext;
var Map = require('./../Utils').Map;

function ATNSimulator(atn, sharedContextCache) {

    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


ATNSimulator.prototype.getCachedContext = function(context) {
    if (this.sharedContextCache ===null) {
        return context;
    }
    var visited = new Map();
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;

},{"./../PredictionContext":46,"./../Utils":50,"./../dfa/DFAState":69,"./ATNConfigSet":53}],57:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects
    this.epsilonOnlyTransitions = false;
    // Track the transitions emanating from this ATN state.
    this.transitions = [];
    // Used to cache lookahead during parsing, not used during construction
    this.nextTokenWithinRule = null;
    return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function() {
	return this.stateNumber;
};

ATNState.prototype.equals = function(other) {
    if (other instanceof ATNState) {
        return this.stateNumber===other.stateNumber;
    } else {
        return false;
    }
};

ATNState.prototype.isNonGreedyExitState = function() {
    return false;
};


ATNState.prototype.addTransition = function(trans, index) {
	if(index===undefined) {
		index = -1;
	}
    if (this.transitions.length===0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
    }
    if (index===-1) {
        this.transitions.push(trans);
    } else {
        this.transitions.splice(index, 1, trans);
    }
};

function BasicState() {
	ATNState.call(this);
    this.stateType = ATNState.BASIC;
    return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;


function DecisionState() {
	ATNState.call(this);
    this.decision = -1;
    this.nonGreedy = false;
    return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;


//  The start of a regular {@code (...)} block.
function BlockStartState() {
	DecisionState.call(this);
	this.endState = null;
	return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;


function BasicBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.BLOCK_START;
	return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;


// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
	ATNState.call(this);
	this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;


// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
	ATNState.call(this);
    this.stateType = ATNState.RULE_STOP;
    return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
	ATNState.call(this);
	this.stateType = ATNState.RULE_START;
	this.stopState = null;
	this.isPrecedenceRule = false;
	return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
	DecisionState.call(this);
	this.stateType = ATNState.PLUS_LOOP_BACK;
	return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;


// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.STAR_BLOCK_START;
	return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;


function StarLoopbackState() {
	ATNState.call(this);
	this.stateType = ATNState.STAR_LOOP_BACK;
	return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;


function StarLoopEntryState() {
	DecisionState.call(this);
	this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
    this.isPrecedenceDecision = null;
    return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;


// Mark the end of a * or + loop.
function LoopEndState() {
	ATNState.call(this);
	this.stateType = ATNState.LOOP_END;
	this.loopBackState = null;
	return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;


// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
	DecisionState.call(this);
	this.stateType = ATNState.TOKEN_START;
	return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;

},{}],58:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {

}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;


},{}],59:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = require('./../Token').Token;
var Lexer = require('./../Lexer').Lexer;
var ATN = require('./ATN').ATN;
var ATNSimulator = require('./ATNSimulator').ATNSimulator;
var DFAState = require('./../dfa/DFAState').DFAState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var OrderedATNConfigSet = require('./ATNConfigSet').OrderedATNConfigSet;
var PredictionContext = require('./../PredictionContext').PredictionContext;
var SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;
var RuleStopState = require('./ATNState').RuleStopState;
var LexerATNConfig = require('./ATNConfig').LexerATNConfig;
var Transition = require('./Transition').Transition;
var LexerActionExecutor = require('./LexerActionExecutor').LexerActionExecutor;
var LexerNoViableAltException = require('./../error/Errors').LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function() {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function(simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function(input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function() {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function(input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (LexerATNSimulator.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (LexerATNSimulator.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function(input, ds0) {
	if (LexerATNSimulator.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) { // while more work
		if (LexerATNSimulator.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function(s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if(target===undefined) {
		target = null;
	}
	if (LexerATNSimulator.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function(input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) { // we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex,
				prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,
		reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = (cfg.alt === skipAlt);
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (LexerATNSimulator.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg
					.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = (t === Token.EOF);
				var config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
				if (this.closure(input, config, reach,
						currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,
		startIndex, index, line, charPos) {
	if (LexerATNSimulator.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function(trans, t) {
	if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function(input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function(input, config, configs,
		currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (LexerATNSimulator.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (LexerATNSimulator.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg,
							configs, currentAltReachedAcceptState, speculative,
							treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs,
					currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,
		configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (LexerATNSimulator.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
					this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig( { state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state:trans.target}, config);
	} else if (trans.serializationType === Transition.ATOM ||
				trans.serializationType === Transition.RANGE ||
				trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
				cfg = new LexerATNConfig( { state:trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,
		predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (LexerATNSimulator.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function(configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states.get(proposed);
	if (existing!==null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states.add(newState);
	return newState;
};

LexerATNSimulator.prototype.getDFA = function(mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function(input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function(input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function(tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;

},{"./../Lexer":43,"./../PredictionContext":46,"./../Token":49,"./../dfa/DFAState":69,"./../error/Errors":74,"./ATN":51,"./ATNConfig":52,"./ATNConfigSet":53,"./ATNSimulator":56,"./ATNState":57,"./LexerActionExecutor":61,"./Transition":65}],60:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
 //

function LexerActionType() {
}

LexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish()
};

LexerAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType);
};

LexerAction.prototype.equals = function(other) {
    return this === other;
};



//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
	LexerAction.call(this, LexerActionType.SKIP);
	return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function(lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function() {
	return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
	LexerAction.call(this, LexerActionType.TYPE);
	this.type = type;
	return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function(lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.type);
};


LexerTypeAction.prototype.equals = function(other) {
    if(this === other) {
        return true;
    } else if (! (other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function() {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
	LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function(lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerPushModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function() {
	return "pushMode(" + this.mode + ")";
};


// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
	LexerAction.call(this,LexerActionType.POP_MODE);
	return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function(lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function() {
	return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
	LexerAction.call(this, LexerActionType.MORE);
	return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function(lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function() {
    return "more";
};


// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
	LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function(lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function() {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


    // Constructs a custom lexer action with the specified rule and action
    // indexes.
    //
    // @param ruleIndex The rule index to use for calls to
    // {@link Recognizer//action}.
    // @param actionIndex The action index to use for calls to
    // {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
	LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
	LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function(lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.channel);
};

LexerChannelAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function() {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
	LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function(lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.offset, this.action);
};

LexerIndexedCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};


exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;
},{}],61:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var hashStuff = require("../Utils").hashStuff;
var LexerIndexedCustomAction = require('./LexerAction').LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([ lexerAction ]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent &&
				!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
					this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = (startIndex + offset) !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashCode = function() {
	return this.cachedHashCode;
};

LexerActionExecutor.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};


LexerActionExecutor.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else if (this.cachedHashCode != other.cachedHashCode) {
		return false;
	} else if (this.lexerActions.length != other.lexerActions.length) {
		return false;
	} else {
		var numActions = this.lexerActions.length
		for (var idx = 0; idx < numActions; ++idx) {
			if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
				return false;
			}
		}
		return true;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;

},{"../Utils":50,"./LexerAction":60}],62:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = require('./../Utils');
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = require('./ATN').ATN;
var ATNState = require('./ATNState').ATNState;
var ATNConfig = require('./ATNConfig').ATNConfig;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var Token = require('./../Token').Token;
var DFAState = require('./../dfa/DFAState').DFAState;
var PredPrediction = require('./../dfa/DFAState').PredPrediction;
var ATNSimulator = require('./ATNSimulator').ATNSimulator;
var PredictionMode = require('./PredictionMode').PredictionMode;
var RuleContext = require('./../RuleContext').RuleContext;
var ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;
var SemanticContext = require('./SemanticContext').SemanticContext;
var StarLoopEntryState = require('./ATNState').StarLoopEntryState;
var RuleStopState = require('./ATNState').RuleStopState;
var PredictionContext = require('./../PredictionContext').PredictionContext;
var Interval = require('./../IntervalSet').Interval;
var Transitions = require('./Transition');
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = require('./../error/Errors').NoViableAltException;

var SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;
var predictionContextFromRuleContext = require('./../PredictionContext').predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_closure = false;
ParserATNSimulator.prototype.debug_add = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;


ParserATNSimulator.prototype.reset = function() {
};

ParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision +
                               " exec LA(1)==" + this.getLookaheadName(input) +
                               " line " + input.LT(1).line + ":" +
                               input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;

    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0===null) {
            if (outerContext===null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }

            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if( dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
      // if the set is empty, there is no viable alternative for current symbol
      // does the state uniquely predict an alternative?
      // does the state have a conflict that would prevent us from
      //   putting it on the work list?

// We also have some key operations to do:
      // add an edge from previous DFA state to potentially new DFA state, D,
      //   upon current symbol but only if adding to work list, which means in all
      //   cases except no viable alternative (and possibly non-greedy decisions?)
      // collecting predicates and adding semantic context to DFA accept states
      // adding rule context to context-sensitive DFA accept states
      // consuming an input symbol
      // reporting a conflict
      // reporting an ambiguity
      // reporting a context sensitivity
      // reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while(true) { // while more work
        var D = this.getExistingTargetState(previousD, t);
        if(D===null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if(D===ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates!==null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if(conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length===1) {
                    if(this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext +" in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates===null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length===0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length===1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {
    var edges = previousD.edges;
    if (edges===null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {
   var reach = this.computeReachSet(previousD.configs, t, false);
    if(reach===null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                    ", previous=" + previousD.configs +
                    ", configs=" + reach +
                    ", predict=" + predictedAlt +
                    ", allSubsetsConflict=" +
                    PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                    this.getConflictingAlts(reach));
    }
    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if( D.predicates!==null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred!==null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over
                                     s0,
                                     input,
                                     startIndex,
                                     outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext "+s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) { // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach===null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if(this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" +
                  PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if( t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if( this.mergeCache===null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.

    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i=0; i<closure.items.length;i++) {
        var c = closure.items[i];
        if(this.debug_add) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates===null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if(this.debug_add) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for(var j=0;j<c.state.transitions.length;j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target!==null) {
                var cfg = new ATNConfig({state:target}, c);
                intermediate.add(cfg, this.mergeCache);
                if(this.debug_add) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates===null && t!==Token.EOF) {
        if (intermediate.items.length===1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach===null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k=0; k<intermediate.items.length;k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
        for (var l=0; l<skippedStopStates.length;l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length===0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length;i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for(var i=0;i<p.transitions.length;i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {
	var config;
	var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext===null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for(i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
		if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context!==null && context.equals(config.context)) {
                // eliminated
                continue;
            }
		}
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for(var i=0;i<configs.items.length;i++) {
        var c = configs.items[i];
        if(ambigAlts.contains( c.alt )) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i =1;i< nalts+1;i++) {
        var pred = altToPred[i] || null;
        if (pred===null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts===0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i=1; i<altToPred.length;i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if( ambigAlts!==null && ambigAlts.contains( i )) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (! containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length>0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};

ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {
    var alts = [];
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
            if(alts.indexOf(c.alt)<0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length===0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for(var i=0;i<predPredictions.length;i++) {
    	var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                             fullCtx, initialDepth, treatEofAsEpsilon);
};


ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser,true) + ")");
        // console.log("configs(" + configs.toString() + ")");
        if(config.reachesIntoOuterContext>50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (! config.context.isEmpty()) {
            for ( var i =0; i<config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates,
                                 fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                var returnState = this.atn.states[config.context.getReturnState(i)];
                var newContext = config.context.getParent(i); // "pop" return state
                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                var c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if( fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};


// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (! p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for(var i = 0;i<p.transitions.length; i++) {
        if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
            continue;

        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c!==null) {
            var newDepth = depth;
            if ( config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.
				if (this._dfa !== null && this._dfa.precedenceDfa) {
					if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
						c.precedenceFilterSuppressed = true;
					}
				}

                c.reachesIntoOuterContext += 1;
                if (closureBusy.add(c)!==c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else {
                if (!t.isEpsilon && closureBusy.add(c)!==c){
                    // avoid infinite recursion for EOF* and EOF+
                    continue;
                }
                if (t instanceof RuleTransition) {
                    // latch when newDepth goes negative - once we step out of the entry context we can't return
                    if (newDepth >= 0) {
                        newDepth += 1;
                    }
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};


ParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function(config) {
    // return False
    var p = config.state;
    // First check to see if we are in StarLoopEntryState generated during
    // left-recursion elimination. For efficiency, also check if
    // the context has an empty stack case. If so, it would mean
    // global FOLLOW so we can't perform optimization
    // Are we the special loop entry/exit state? or SLL wildcard
    if(p.stateType != ATNState.STAR_LOOP_ENTRY)
        return false;
    if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
           config.context.isEmpty() || config.context.hasEmptyPath())
        return false;

    // Require all return states to return back to the same rule that p is in.
    var numCtxs = config.context.length;
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex != p.ruleIndex)
            return false;
    }

    var decisionStartState = p.transitions[0].target;
    var blockEndStateNum = decisionStartState.endState.stateNumber;
    var blockEndState = this.atn.states[blockEndStateNum];

    // Verify that the top of each stack context leads to loop entry/exit
    // state through epsilon edges and w/o leaving rule.
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnStateNumber = config.context.getReturnState(i);
        var returnState = this.atn.states[returnStateNumber];
        // all states must have single outgoing epsilon edge
        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)
            return false;

        // Look for prefix op case like 'not expr', (' type ')' expr
        var returnStateTarget = returnState.transitions[0].target;
        if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )
            continue;

        // Look for 'expr op expr' or case where expr's return state is block end
        // of (...)* internal block; the block end points to loop back
        // which points to p but we don't need to check that
        if ( returnState == blockEndState )
            continue;

        // Look for ternary expr ? expr : expr. The return state points at block end,
        // which points at loop entry state
        if ( returnStateTarget == blockEndState )
            continue;

        // Look for complex prefix 'between expr and expr' case where 2nd expr's
        // return state points at block end state of (...)* internal block
        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1
                && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)
            continue;

        // anything else ain't conforming
        return false;
    }
    return true;
};


ParserATNSimulator.prototype.getRuleName = function( index) {
    if (this.parser!==null && index>=0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch(t.serializationType) {
    case Transition.RULE:
        return this.ruleTransition(config, t);
    case Transition.PRECEDENCE:
        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.PREDICATE:
        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.ACTION:
        return this.actionTransition(config, t);
    case Transition.EPSILON:
        return new ATNConfig({state:t.target}, config);
    case Transition.ATOM:
    case Transition.RANGE:
    case Transition.SET:
        // EOF transitions act like epsilon transitions after the first EOF
        // transition is traversed
        if (treatEofAsEpsilon) {
            if (t.matches(Token.EOF, 0, 1)) {
                return new ATNConfig({state: t.target}, config);
            }
        }
        return null;
    default:
    	return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function(config, t) {
    if (this.debug) {
        var index = t.actionIndex==-1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
    }
    return new ATNConfig({state:t.target}, config);
};

ParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser!==null) {
        	console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser!==null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function(config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({state:t.target, context:newContext}, config );
};

ParserATNSimulator.prototype.getConflictingAlts = function(configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

 // Sam pointed out a problem with the previous definition, v3, of
 // ambiguous states. If we have another state associated with conflicting
 // alternatives, we should keep going. For example, the following grammar
 //
 // s : (ID | ID ID?) ';' ;
 //
 // When the ATN simulation reaches the state before ';', it has a DFA
 // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
 // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
 // because alternative to has another way to continue, via [6|2|[]].
 // The key is that we have a single state that has config's only associated
 // with a single alternative, 2, and crucially the state transitions
 // among the configurations are all non-epsilon transitions. That means
 // we don't consider any conflicts that include alternative 2. So, we
 // ignore the conflict between alts 1 and 2. We ignore a set of
 // conflicting alts when there is an intersection with an alternative
 // associated with a single alt state in the state&rarr;config-list map.
 //
 // It's also the case that we might have two conflicting configurations but
 // also a 3rd nonconflicting configuration for a different alternative:
 // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
 //
 // a : A | A | A B ;
 //
 // After matching input A, we reach the stop state for rule A, state 1.
 // State 8 is the state right before B. Clearly alternatives 1 and 2
 // conflict and no amount of further lookahead will separate the two.
 // However, alternative 3 will be able to continue and so we do not
 // stop working on this state. In the previous example, we're concerned
 // with states associated with the conflicting alternatives. Here alt
 // 3 is not associated with the conflicting configs, but since we can continue
 // looking for input reasonably, I don't declare the state done. We
 // ignore a set of conflicting alts when we have an alternative
 // that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function( t) {
    if (t===Token.EOF) {
        return "EOF";
    }
    if( this.parser!==null && this.parser.literalNames!==null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
            return name + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function(input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for(var i=0; i<decs.length; i++) {
    	var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length>0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom "+ this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = (t instanceof NotSetTransition);
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function(configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for(var i=0;i<configs.items.length;i++) {
    	var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt // found first alt
        } else if( c.alt!==alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {
    if( this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to===null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_===null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges===null) {
        from_.edges = [];
    }
    from_.edges[t+1] = to; // connect

    if (this.debug) {
        var literalNames = this.parser===null ? null : this.parser.literalNames;
        var symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function(dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var existing = dfa.states.get(D);
    if(existing!==null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (! D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states.add(D);
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};

// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,
                               exact, ambigAlts, configs ) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};

exports.ParserATNSimulator = ParserATNSimulator;
},{"./../IntervalSet":41,"./../ParserRuleContext":45,"./../PredictionContext":46,"./../RuleContext":48,"./../Token":49,"./../Utils":50,"./../dfa/DFAState":69,"./../error/Errors":74,"./ATN":51,"./ATNConfig":52,"./ATNConfigSet":53,"./ATNSimulator":56,"./ATNState":57,"./PredictionMode":63,"./SemanticContext":64,"./Transition":65}],63:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = require('./../Utils').Set;
var Map = require('./../Utils').Map;
var BitSet = require('./../Utils').BitSet;
var AltDict = require('./../Utils').AltDict;
var ATN = require('./ATN').ATN;
var RuleStopState = require('./ATNState').RuleStopState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var ATNConfig = require('./ATNConfig').ATNConfig;
var SemanticContext = require('./SemanticContext').SemanticContext;
var Hash = require("../Utils").Hash;
var hashStuff = require('./../Utils').hashStuff;
var equalArrays = require('./../Utils').equalArrays;

function PredictionMode() {
	return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;


//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for(var i=0;i<configs.items.length;i++) {
            	var c = configs.items[i];
                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
	}
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
	}
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function(altsets) {
    return ! PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length===1) {
            return true;
        }
	}
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length>1) {
            return true;
        }
	}
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function(altsets) {
    var first = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts!==first) {
            return false;
        }
	}
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function(altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length===1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function(altsets) {
    var all = new BitSet();
    altsets.map( function(alts) { all.or(alts); });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>

PredictionMode.getConflictingAltSubsets = function(configs) {
    var configToAlts = new Map();
    configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
    configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}
    configs.items.map(function(cfg) {
        var alts = configToAlts.get(cfg);
        if (alts === null) {
            alts = new BitSet();
            configToAlts.put(cfg, alts);
        }
        alts.add(cfg.alt);
	});
    return configToAlts.getValues();
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function(configs) {
    var m = new AltDict();
    configs.items.map(function(c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for(var i=0;i<values.length;i++) {
        if (values[i].length===1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function(altsets) {
    var result = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        var minAlt = alts.minValue();
        if(result===null) {
            result = minAlt;
        } else if(result!==minAlt) { // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
	}
    return result;
};

exports.PredictionMode = PredictionMode;

},{"../Utils":50,"./../Utils":50,"./ATN":51,"./ATNConfig":52,"./ATNConfigSet":53,"./ATNState":57,"./SemanticContext":64}],64:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = require('./../Utils').Set;
var Hash = require('./../Utils').Hash;

function SemanticContext() {
	return this;
}

SemanticContext.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function(parser, outerContext) {
};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function(parser, outerContext) {
	return this;
};

SemanticContext.andContext = function(a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function(a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();


Predicate.prototype.evaluate = function(parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.updateHashCode = function(hash) {
	hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

Predicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex &&
				this.predIndex === other.predIndex &&
				this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function() {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function(parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function(other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.updateHashCode = function(hash) {
    hash.update(31);
};

PrecedencePredicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function() {
	return "{"+this.precedence+">=prec}?";
};



PrecedencePredicate.filterPrecedencePredicates = function(set) {
	var result = [];
	set.values().map( function(context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};


// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map( function(p) {
			if(reduced===null || p.precedence<reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "AND");
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function(o) {
		result = result === null ? o : SemanticContext.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function(a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length-1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "OR");
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function(o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

OR.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;

},{"./../Utils":50}],65:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = require('./../Token').Token;
var Interval = require('./../IntervalSet').Interval;
var IntervalSet = require('./../IntervalSet').IntervalSet;
var Predicate = require('./SemanticContext').Predicate;
var PrecedencePredicate = require('./SemanticContext').PrecedencePredicate;

function Transition (target) {
    // The target of this transition.
    if (target===undefined || target===null) {
        throw "target cannot be null.";
    }
    this.target = target;
    // Are we epsilon, action, sempred?
    this.isEpsilon = false;
    this.label = null;
    return this;
}
    // constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
	Transition.call(this, target);
	this.label_ = label; // The token type or character value; or, signifies special label.
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
    return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function() {
	var s = new IntervalSet();
    s.addOne(this.label_);
    return s;
};

AtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
    return this.label_ === symbol;
};

AtomTransition.prototype.toString = function() {
	return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
	Transition.call(this, ruleStart);
    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
    this.precedence = precedence;
    this.followState = followState; // what node to begin computations following ref to rule
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
    return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};


function EpsilonTransition(target, outermostPrecedenceReturn) {
	Transition.call(this, target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

EpsilonTransition.prototype.toString = function() {
	return "epsilon";
};

function RangeTransition(target, start, stop) {
	Transition.call(this, target);
	this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
    return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function() {
    var s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
};

RangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function() {
	return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
	Transition.call(this, target);
	return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PredicateTransition.prototype.getPredicate = function() {
	return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function() {
	return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
	Transition.call(this, target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;


ActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

ActionTransition.prototype.toString = function() {
	return "action_" + this.ruleIndex + ":" + this.actionIndex;
};


// A transition containing a set of values.
function SetTransition(target, set) {
	Transition.call(this, target);
	this.serializationType = Transition.SET;
    if (set !==undefined && set !==null) {
        this.label = set;
    } else {
        this.label = new IntervalSet();
        this.label.addOne(Token.INVALID_TYPE);
    }
    return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return this.label.contains(symbol);
};


SetTransition.prototype.toString = function() {
	return this.label.toString();
};

function NotSetTransition(target, set) {
	SetTransition.call(this, target, set);
	this.serializationType = Transition.NOT_SET;
	return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
			!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function() {
	return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
	Transition.call(this, target);
	this.serializationType = Transition.WILDCARD;
	return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;


WildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function() {
	return ".";
};

function PrecedencePredicateTransition(target, precedence) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
    return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function() {
	return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function() {
	return this.precedence + " >= _p";
};

exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;
},{"./../IntervalSet":41,"./../Token":49,"./SemanticContext":64}],66:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = require('./ATN').ATN;
exports.ATNDeserializer = require('./ATNDeserializer').ATNDeserializer;
exports.LexerATNSimulator = require('./LexerATNSimulator').LexerATNSimulator;
exports.ParserATNSimulator = require('./ParserATNSimulator').ParserATNSimulator;
exports.PredictionMode = require('./PredictionMode').PredictionMode;

},{"./ATN":51,"./ATNDeserializer":55,"./LexerATNSimulator":59,"./ParserATNSimulator":62,"./PredictionMode":63}],67:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Set = require("../Utils").Set;
var DFAState = require('./DFAState').DFAState;
var StarLoopEntryState = require('../atn/ATNState').StarLoopEntryState;
var ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;
var DFASerializer = require('./DFASerializer').DFASerializer;
var LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;



function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new Set();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
    if (atnStartState instanceof StarLoopEntryState)
    {
        if (atnStartState.isPrecedenceDecision) {
            this.precedenceDfa = true;
            var precedenceState = new DFAState(null, new ATNConfigSet());
            precedenceState.edges = [];
            precedenceState.isAcceptState = false;
            precedenceState.requiresFullContext = false;
            this.s0 = precedenceState;
        }
    }
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function(precedence) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function(precedence, startState) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function(precedenceDfa) {
	if (this.precedenceDfa!==precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(null, new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get : function() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function() {
	var list = this._states.values();
	return list.sort(function(a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function(literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function() {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;

},{"../Utils":50,"../atn/ATNState":57,"./../atn/ATNConfigSet":53,"./DFASerializer":68,"./DFAState":69}],68:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
	this.dfa = dfa;
	this.literalNames = literalNames || [];
	this.symbolicNames = symbolicNames || [];
	return this;
}

DFASerializer.prototype.toString = function() {
   if(this.dfa.s0 === null) {
       return null;
   }
   var buf = "";
   var states = this.dfa.sortedStates();
   for(var i=0;i<states.length;i++) {
       var s = states[i];
       if(s.edges!==null) {
            var n = s.edges.length;
            for(var j=0;j<n;j++) {
                var t = s.edges[j] || null;
                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
       }
   }
   return buf.length===0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function(i) {
    if (i===0) {
        return "EOF";
    } else if(this.literalNames !==null || this.symbolicNames!==null) {
        return this.literalNames[i-1] || this.symbolicNames[i-1];
    } else {
        return String.fromCharCode(i-1);
    }
};

DFASerializer.prototype.getStateString = function(s) {
    var baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
    if(s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
	DFASerializer.call(this, dfa, null);
	return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function(i) {
	return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;


},{}],69:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;
var Utils = require('./../Utils');
var Hash = Utils.Hash;
var Set = Utils.Set;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function() {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function() {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function(other) {
	// compare set of ATN configurations in this set with other
	return this === other ||
			(other instanceof DFAState &&
				this.configs.equals(other.configs));
};

DFAState.prototype.toString = function() {
	var s = "" + this.stateNumber + ":" + this.configs;
	if(this.isAcceptState) {
        s = s + "=>";
        if (this.predicates !== null)
            s = s + this.predicates;
        else
            s = s + this.prediction;
    }
	return s;
};

DFAState.prototype.hashCode = function() {
	var hash = new Hash();
	hash.update(this.configs);
    return hash.finish();
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;

},{"./../Utils":50,"./../atn/ATNConfigSet":53}],70:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = require('./DFA').DFA;
exports.DFASerializer = require('./DFASerializer').DFASerializer;
exports.LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;
exports.PredPrediction = require('./DFAState').PredPrediction;

},{"./DFA":67,"./DFASerializer":68,"./DFAState":69}],71:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = require('./../Utils').BitSet;
var ErrorListener = require('./ErrorListener').ErrorListener;
var Interval = require('./../IntervalSet').Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,
		startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function(
		recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function(
		recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;
},{"./../IntervalSet":41,"./../Utils":50,"./ErrorListener":72}],72:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
	return this;
}

ErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
};

ErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
};

ErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
};

ErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
};

function ConsoleErrorListener() {
	ErrorListener.call(this);
	return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
	ErrorListener.call(this);
    if (delegates===null) {
        throw "delegates";
    }
    this.delegates = delegates;
	return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });
};

ProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	this.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });
};

ProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	this.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;


},{}],73:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = require('./../Token').Token;
var Errors = require('./Errors');
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = require('./../atn/ATNState').ATNState;
var Interval = require('./../IntervalSet').Interval;
var IntervalSet = require('./../IntervalSet').IntervalSet;

function ErrorStrategy() {

}

ErrorStrategy.prototype.reset = function(recognizer){
};

ErrorStrategy.prototype.recoverInline = function(recognizer){
};

ErrorStrategy.prototype.recover = function(recognizer, e){
};

ErrorStrategy.prototype.sync = function(recognizer){
};

ErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){
};

ErrorStrategy.prototype.reportError = function(recognizer){
};



// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
	ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function(recognizer, e) {
   // if we've already reported an error and have not matched a token
   // yet successfully, don't report any errors.
    if(this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if ( e instanceof NoViableAltException ) {
        this.reportNoViableAlternative(recognizer, e);
    } else if ( e instanceof InputMismatchException ) {
        this.reportInputMismatch(recognizer, e);
    } else if ( e instanceof FailedPredicateException ) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function(recognizer, e) {
    if (this.lastErrorIndex===recognizer.getInputStream().index &&
        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
		// uh oh, another error at same token index and previously-visited
		// state in ATN; must be a case where LT(1) is in the recovery
		// token set so nothing got consumed. Consume a single token
		// at least to prevent an infinite loop; this is a failsafe.
		recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function(recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    var nextTokens = recognizer.atn.nextTokens(s);
    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {
        return;
    }
    switch (s.stateType) {
    case ATNState.BLOCK_START:
    case ATNState.STAR_BLOCK_START:
    case ATNState.PLUS_BLOCK_START:
    case ATNState.STAR_LOOP_ENTRY:
       // report error and recover if possible
        if( this.singleTokenDeletion(recognizer) !== null) {
            return;
        } else {
            throw new InputMismatchException(recognizer);
        }
        break;
    case ATNState.PLUS_LOOP_BACK:
    case ATNState.STAR_LOOP_BACK:
        this.reportUnwantedToken(recognizer);
        var expecting = new IntervalSet();
        expecting.addSet(recognizer.getExpectedTokens());
        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        break;
    default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if(tokens !== null) {
        if (e.startToken.type===Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
          " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " +
        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {
    if ( this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
          " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function(recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType) ){
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType===Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type===Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source,
        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
        -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {
    s = s.replace(/\n/g,"\\n");
    s = s.replace(/\r/g,"\\r");
    s = s.replace(/\t/g,"\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState>=0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while( ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
	DefaultErrorStrategy.call(this);
	return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function(recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};

// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function(recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;

},{"./../IntervalSet":41,"./../Token":49,"./../atn/ATNState":57,"./Errors":74}],74:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = require('./../atn/Transition').PredicateTransition;

function RecognitionException(params) {
	Error.call(this);
	if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
	} else {
		var stack = new Error().stack;
	}
	this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer!==null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function() {
    if (this.recognizer!==null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function() {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
	RecognitionException.call(this, {message:"", recognizer:lexer, input:input, ctx:null});
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function() {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex,this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
	ctx = ctx || recognizer._ctx;
	offendingToken = offendingToken || recognizer.getCurrentToken();
	startToken = startToken || recognizer.getCurrentToken();
	input = input || recognizer.getInputStream();
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:input, ctx:ctx});
    // Which configurations did we try at input.index() that couldn't match
	// input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
	RecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,
                         input:recognizer.getInputStream(), ctx:recognizer._ctx});
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
	Error.call(this);
	Error.captureStackTrace(this, ParseCancellationException);
	return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;
exports.ParseCancellationException = ParseCancellationException;

},{"./../atn/Transition":65}],75:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.RecognitionException = require('./Errors').RecognitionException;
exports.NoViableAltException = require('./Errors').NoViableAltException;
exports.LexerNoViableAltException = require('./Errors').LexerNoViableAltException;
exports.InputMismatchException = require('./Errors').InputMismatchException;
exports.FailedPredicateException = require('./Errors').FailedPredicateException;
exports.DiagnosticErrorListener = require('./DiagnosticErrorListener').DiagnosticErrorListener;
exports.BailErrorStrategy = require('./ErrorStrategy').BailErrorStrategy;
exports.ErrorListener = require('./ErrorListener').ErrorListener;

},{"./DiagnosticErrorListener":71,"./ErrorListener":72,"./ErrorStrategy":73,"./Errors":74}],76:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = require('./atn/index');
exports.codepointat = require('./polyfills/codepointat');
exports.dfa = require('./dfa/index');
exports.fromcodepoint = require('./polyfills/fromcodepoint');
exports.tree = require('./tree/index');
exports.error = require('./error/index');
exports.Token = require('./Token').Token;
exports.CharStreams = require('./CharStreams').CharStreams;
exports.CommonToken = require('./Token').CommonToken;
exports.InputStream = require('./InputStream').InputStream;
exports.FileStream = require('./FileStream').FileStream;
exports.CommonTokenStream = require('./CommonTokenStream').CommonTokenStream;
exports.Lexer = require('./Lexer').Lexer;
exports.Parser = require('./Parser').Parser;
var pc = require('./PredictionContext');
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = require('./ParserRuleContext').ParserRuleContext;
exports.Interval = require('./IntervalSet').Interval;
exports.Utils = require('./Utils');

},{"./CharStreams":36,"./CommonTokenStream":38,"./FileStream":39,"./InputStream":40,"./IntervalSet":41,"./Lexer":43,"./Parser":44,"./ParserRuleContext":45,"./PredictionContext":46,"./Token":49,"./Utils":50,"./atn/index":66,"./dfa/index":70,"./error/index":75,"./polyfills/codepointat":77,"./polyfills/fromcodepoint":78,"./tree/index":81}],77:[function(require,module,exports){
/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}

},{}],78:[function(require,module,exports){
/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var stringFromCharCode = String.fromCharCode;
		var floor = Math.floor;
		var fromCodePoint = function(_) {
			var MAX_SIZE = 0x4000;
			var codeUnits = [];
			var highSurrogate;
			var lowSurrogate;
			var index = -1;
			var length = arguments.length;
			if (!length) {
				return '';
			}
			var result = '';
			while (++index < length) {
				var codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) != codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}

},{}],79:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = require('./../Token').Token;
var Interval = require('./../IntervalSet').Interval;
var INVALID_INTERVAL = new Interval(-1, -2);
var Utils = require('../Utils.js');


function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

ParseTreeVisitor.prototype.visit = function(ctx) {
 	if (Array.isArray(ctx)) {
		return ctx.map(function(child) {
            return child.accept(this);
        }, this);
	} else {
		return ctx.accept(this);
	}
};

ParseTreeVisitor.prototype.visitChildren = function(ctx) {
	if (ctx.children) {
		return this.visit(ctx.children);
	} else {
		return null;
	}
}

ParseTreeVisitor.prototype.visitTerminal = function(node) {
};

ParseTreeVisitor.prototype.visitErrorNode = function(node) {
};


function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function(node) {
};

ParseTreeListener.prototype.visitErrorNode = function(node) {
};

ParseTreeListener.prototype.enterEveryRule = function(node) {
};

ParseTreeListener.prototype.exitEveryRule = function(node) {
};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function(i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function() {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function() {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function() {
	return 0;
};

TerminalNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function() {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function() {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function() {
	return true;
};

ErrorNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function(listener, t) {
	var errorNode = t instanceof ErrorNode ||
			(t.isErrorNode !== undefined && t.isErrorNode());
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function(listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function(listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;

},{"../Utils.js":50,"./../IntervalSet":41,"./../Token":49}],80:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Utils = require('./../Utils');
var Token = require('./../Token').Token;
var RuleNode = require('./Tree').RuleNode;
var ErrorNode = require('./Tree').ErrorNode;
var TerminalNode = require('./Tree').TerminalNode;
var ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;
var RuleContext = require('./../RuleContext').RuleContext;
var INVALID_ALT_NUMBER = require('./../atn/ATN').INVALID_ALT_NUMBER;


/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {
}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function(tree, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
       ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if(c===0) {
        return s;
    }
    var res = "(" + s + ' ';
    if(c>0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for(var i=1;i<c;i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function(t, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
        ruleNames = recog.ruleNames;
    }
    if(ruleNames!==null) {
       if (t instanceof RuleContext) {
           var altNumber = t.getAltNumber();
           if ( altNumber!=INVALID_ALT_NUMBER ) {
               return ruleNames[t.ruleIndex]+":"+altNumber;
           }
           return ruleNames[t.ruleIndex];
       } else if ( t instanceof ErrorNode) {
           return t.toString();
       } else if(t instanceof TerminalNode) {
           if(t.symbol!==null) {
               return t.symbol.text;
           }
       }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token ) {
       return payload.text;
    }
    return t.getPayload().toString();
};


// Return ordered list of all children of this node
Trees.getChildren = function(t) {
	var list = [];
	for(var i=0;i<t.getChildCount();i++) {
		list.push(t.getChild(i));
	}
	return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function(t) {
    var ancestors = [];
    t = t.getParent();
    while(t!==null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};

Trees.findAllTokenNodes = function(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function(t, ruleIndex) {
	return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function(t, index, findTokens) {
	var nodes = [];
	Trees._findAllNodes(t, index, findTokens, nodes);
	return nodes;
};

Trees._findAllNodes = function(t, index, findTokens, nodes) {
	// check this node (the root) first
	if(findTokens && (t instanceof TerminalNode)) {
		if(t.symbol.type===index) {
			nodes.push(t);
		}
	} else if(!findTokens && (t instanceof ParserRuleContext)) {
		if(t.ruleIndex===index) {
			nodes.push(t);
		}
	}
	// check children
	for(var i=0;i<t.getChildCount();i++) {
		Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
	}
};

Trees.descendants = function(t) {
	var nodes = [t];
    for(var i=0;i<t.getChildCount();i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};


exports.Trees = Trees;
},{"./../ParserRuleContext":45,"./../RuleContext":48,"./../Token":49,"./../Utils":50,"./../atn/ATN":51,"./Tree":79}],81:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Tree = require('./Tree');
exports.Trees = require('./Trees').Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;

},{"./Tree":79,"./Trees":80}],82:[function(require,module,exports){

},{}],83:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],84:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":85}],85:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],86:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function bytesToUuid(buf, offset) {
  const i = offset || 0;
  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();
}

var _default = bytesToUuid;
exports.default = _default;
},{}],87:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "v1", {
  enumerable: true,
  get: function () {
    return _v.default;
  }
});
Object.defineProperty(exports, "v3", {
  enumerable: true,
  get: function () {
    return _v2.default;
  }
});
Object.defineProperty(exports, "v4", {
  enumerable: true,
  get: function () {
    return _v3.default;
  }
});
Object.defineProperty(exports, "v5", {
  enumerable: true,
  get: function () {
    return _v4.default;
  }
});

var _v = _interopRequireDefault(require("./v1.js"));

var _v2 = _interopRequireDefault(require("./v3.js"));

var _v3 = _interopRequireDefault(require("./v4.js"));

var _v4 = _interopRequireDefault(require("./v5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./v1.js":91,"./v3.js":92,"./v4.js":94,"./v5.js":95}],88:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports.default = _default;
},{}],89:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
// find the complete implementation of crypto (msCrypto) on IE11.
const getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
const rnds8 = new Uint8Array(16);

function rng() {
  if (!getRandomValues) {
    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
  }

  return getRandomValues(rnds8);
}
},{}],90:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports.default = _default;
},{}],91:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _bytesToUuid = _interopRequireDefault(require("./bytesToUuid.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || [];
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _bytesToUuid.default)(b);
}

var _default = v1;
exports.default = _default;
},{"./bytesToUuid.js":86,"./rng.js":89}],92:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _md = _interopRequireDefault(require("./md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;
},{"./md5.js":88,"./v35.js":93}],93:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.URL = exports.DNS = void 0;

var _bytesToUuid = _interopRequireDefault(require("./bytesToUuid.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function uuidToBytes(uuid) {
  // Note: We assume we're being passed a valid uuid string
  const bytes = [];
  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {
    bytes.push(parseInt(hex, 16));
  });
  return bytes;
}

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    const off = buf && offset || 0;
    if (typeof value === 'string') value = stringToBytes(value);
    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);

    if (!Array.isArray(value)) {
      throw TypeError('value must be an array of bytes');
    }

    if (!Array.isArray(namespace) || namespace.length !== 16) {
      throw TypeError('namespace must be uuid string or an Array of 16 byte values');
    } // Per 4.3


    const bytes = hashfunc(namespace.concat(value));
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      for (let idx = 0; idx < 16; ++idx) {
        buf[off + idx] = bytes[idx];
      }
    }

    return buf || (0, _bytesToUuid.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
},{"./bytesToUuid.js":86}],94:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _bytesToUuid = _interopRequireDefault(require("./bytesToUuid.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  if (typeof options === 'string') {
    buf = options === 'binary' ? new Uint8Array(16) : null;
    options = null;
  }

  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    const start = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[start + i] = rnds[i];
    }

    return buf;
  }

  return (0, _bytesToUuid.default)(rnds);
}

var _default = v4;
exports.default = _default;
},{"./bytesToUuid.js":86,"./rng.js":89}],95:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _sha = _interopRequireDefault(require("./sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;
},{"./sha1.js":90,"./v35.js":93}],"alan-compiler":[function(require,module,exports){
const ammtojs = require('./ammtojs').ammTextToJs
const lntoamm = require('./lntoamm').lnTextToAmm
const lntojs = require('./lntojs').lnTextToJs

// We won't support AGC for now because of the complexities of moving off the Buffer API
const convert = {
  ln: {
    amm: lntoamm,
    js: (text) => { // Hackery for browserify for now, will clean this up later after some thought
      return lntojs(text).replace(/alan-js-runtime/g, 'alan-runtime')
    },
  },
  amm: {
    js: (text) => { // Similar hackery
      return ammtojs(text).repalce(/alan-js-runtime/g, 'alan-runtime')
    },
  }
}

module.exports = (inFormat, outFormat, text) => {
  if (convert[inFormat] && convert[inFormat][outFormat]) {
    return convert[inFormat][outFormat](text)
  } else {
    throw new Error(`${inFormat} to ${outFormat} is not supported`)
  }
}

},{"./ammtojs":6,"./lntoamm":32,"./lntojs":34}],"alan-js-runtime":[function(require,module,exports){
(function (process){
const EventEmitter = require('events')

const e = new EventEmitter()

module.exports = {
  addi64:  (a, b) => a + b,
  i64str:  a => a.toString(),
  catstr:  (a, b) => a.concat(b),
  subi64:  (a, b) => a - b,
  muli64:  (a, b) => a * b,
  divf64:  (a, b) => a / b,
  modi64:  (a, b) => a % b,
  powi64:  (a, b) => Math.floor(Math.pow(a, b)),
  andi64:  (a, b) => a & b,
  ori64:   (a, b) => a | b,
  xori64:  (a, b) => a ^ b,
  noti64:  a => ~a,
  nandi64: (a, b) => ~(a & b),
  nori64:  (a, b) => ~(a | b),
  xnori64: (a, b) => ~(a ^ b),
  eqi64:   (a, b) => a === b,
  sqrtf64: a => Math.sqrt(a),
  f64str:  a => a.toString(),
  condfn:  (cond, fn) => cond ? fn() : undefined,
  notbool: a => !a,
  stdoutp: out => process.stdout.write(out),
  exitop:  code => process.exit(code),
  emit:    (name, payload) => e.emit(name, payload),
  on:      (name, cb) => e.on(name, cb),
  emitter: e,
}

}).call(this,require('_process'))
},{"_process":85,"events":83}],"alan-runtime":[function(require,module,exports){
const r = require('alan-js-runtime')

// Redefined stdoutp and exitop to work in the browser
module.exports = {
  ...r,
  stdoutp: console.log,
  exitop: () => {
    r.emitter.removeAllListeners()
  }, // Clean up the event emitter, later we'll want a hook into the playground to show this
}

},{"alan-js-runtime":"alan-js-runtime"}]},{},[]);
